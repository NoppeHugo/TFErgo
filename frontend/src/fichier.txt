.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
import React from 'react';
import { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom';
import { AnimatePresence, motion } from 'framer-motion';
import CalendarPage from './pages/CalendarPage.js';
import PatientsPage from './pages/PatientsPage.js';
import ActivitiesPage from './pages/ActivitiesPage.js';
import ReportsPage from './pages/ReportsPage.js';
import PatientDetails from "./components/PatientDetails.js";
import AddPatientPage from './pages/AddPatientPage.js';
import PatientLayout from './components/PatientLayout.js'; // Import du layout patient
import Header from './components/Header.js';
import './index.css';
import LoginPage from './pages/LoginPage.js';
import RequireAuth from './components/RequireAuth.js';

// Page d'accueil
const HomePage = () => (
  <div className="w-full flex-grow flex flex-col items-center">
    <CalendarPage className="w-full h-full" />
    <PatientsPage className="w-full mt-4" />
  </div>
);

// **Effet d'apparition et de glissement pour la fiche patient**
const patientTransition = {
  initial: { opacity: 0, x: 50, scale: 0.95 },
  animate: { opacity: 1, x: 0, scale: 1, transition: { duration: 0.5, ease: "easeOut" } },
  exit: { opacity: 0, x: -50, scale: 0.95, transition: { duration: 0.4, ease: "easeIn" } }
};

const AnimatedRoutes = () => {
  const location = useLocation();

  return (
    <AnimatePresence mode="wait">
      <Routes location={location} key={location.pathname}>
        <Route path="/" element={<RequireAuth><HomePage /></RequireAuth>} />
        <Route path="/calendrier" element={<RequireAuth><CalendarPage /></RequireAuth>} />
        <Route path="/patients" element={<RequireAuth><PatientsPage /></RequireAuth>} />
        <Route path="/add-patient" element={<RequireAuth><AddPatientPage /></RequireAuth>} />
        <Route path="/activities" element={<RequireAuth><ActivitiesPage /></RequireAuth>} />
        <Route path="/reports" element={<RequireAuth><ReportsPage /></RequireAuth>} />
        <Route path="/login" element={<LoginPage />} />

        {/* Layout pour les pages patients */}
        <Route path="/patient/*" element={<RequireAuth><PatientLayout /></RequireAuth>}>
          <Route
            path=":patientId"
            element={
              <RequireAuth><motion.div
                key={location.pathname}
                initial="initial"
                animate="animate"
                exit="exit"
                variants={patientTransition}
                className="w-full"
              >
                <PatientDetails />
              </motion.div></RequireAuth>
            }
          />
          <Route path=":patientId/notes" element={<RequireAuth><PatientsPage /></RequireAuth>} />
          <Route path=":patientId/donnees" element={<RequireAuth><PatientsPage /></RequireAuth>} />
          <Route path=":patientId/dossier" element={<RequireAuth><PatientsPage /></RequireAuth>} />
        </Route>
      </Routes>
    </AnimatePresence>
  );
};

const App = () => {
  return (
    <Router>
      <div className="flex flex-col h-screen">
        <Header />
        <div className="flex-grow overflow-hidden">
          <AnimatedRoutes />
        </div>
      </div>
    </Router>
  );
};

export default App;
import { render, screen } from '@testing-library/react';
import App from './App.js';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Custom scrollbar styles */
.custom-scrollbar::-webkit-scrollbar {
  width: 0px; /* Remove scrollbar space */
  background: transparent; /* Optional: just make scrollbar invisible */
}

.custom-scrollbar {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}

/* Styles pour les boutons de la barre d'outils */
.toolbar-button {
  padding: 0.5rem 1rem;
  background-color: #e2e8f0; /* bg-gray-200 */
  border-radius: 0.25rem; /* rounded */
  cursor: pointer;
}

.toolbar-button:hover {
  background-color: #cbd5e0; /* hover:bg-gray-300 */
}

/* Styles pour le s√©lecteur de taille de texte */
.text-size-select {
  margin-left: 0.5rem; /* ml-2 */
  border: 1px solid #e2e8f0; /* border */
  padding: 0.25rem 0.5rem; /* px-2 py-1 */
  border-radius: 0.25rem; /* rounded */
}

@keyframes fadeInOut {
  0% { opacity: 0; transform: translateY(10px); }
  10% { opacity: 1; transform: translateY(0); }
  90% { opacity: 1; transform: translateY(0); }
  100% { opacity: 0; transform: translateY(10px); }
}

.animate-fade-in-out {
  animation: fadeInOut 3s ease-in-out forwards;
}

@keyframes fade-in {
  from { opacity: 0; transform: translateY(-4px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes fade-out {
  from { opacity: 1; transform: translateY(0); }
  to { opacity: 0; transform: translateY(-4px); }
}

.animate-fade-in {
  animation: fade-in 0.3s ease-out;
}

.animate-fade-out {
  animation: fade-out 0.3s ease-in;
}

.no-scrollbar::-webkit-scrollbar {
  display: none;
}
.no-scrollbar {
  -ms-overflow-style: none;
  scrollbar-width: none;
}
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App.js';
import reportWebVitals from './reportWebVitals.js';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
import axios from 'axios';

const API = axios.create({
  baseURL: 'http://localhost:3001',
  withCredentials: true,
});

export const getActivities = () => API.get('/activities');
export const getActivityById = (id) => API.get(`/activities/${id}`);
export const searchActivities = (params) => API.get('/activities/search', { params });
export const createActivity = (data) => API.post('/activities', data);
export const updateActivity = (id, data) => API.patch(`/activities/${id}`, data);
export const deleteActivity = (id) => API.delete(`/activities/${id}`);
export const uploadFileToActivity = (id, fileData) => API.post(`/files/${id}/files`, fileData);
export const deleteFile = (fileId) => API.delete(`/files/file/${fileId}`);
import axios from "axios";

const api = axios.create({
  baseURL: 'http://localhost:3001',
  withCredentials: true,
});

export const getPatientContacts = async (patientId) => {
  const res = await api.get(`/contacts/${patientId}`);
  return res.data;
};

export const addContact = async (patientId, contactData) => {
  const res = await api.post(`/contacts/${patientId}`, contactData);
  return res.data;
};

export const updateContact = async (contactId, contactData) => {
  const res = await api.patch(`/contacts/${contactId}`, contactData);
  return res.data;
};

export const deleteContact = async (contactId) => {
  const res = await api.delete(`/contacts/${contactId}`);
  return res.data;
};
import axios from 'axios';

const API = axios.create({
  baseURL: 'http://localhost:3001',
  withCredentials: true,
});

export const getGoals = () => API.get('/goals');
export const createGoal = (data) => API.post('/goals', data);
export const updateGoal = (id, data) => API.patch(`/goals/${id}`, data);
export const deleteGoal = (id) => API.delete(`/goals/${id}`);
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:3001',
  withCredentials: true,
});

export const getPatientHealthData = async (patientId) => {
  const res = await api.get(`/health/${patientId}`);
  return res.data;
};

export const updatePatientHealthData = async (patientId, updates) => {
  const res = await api.patch(`/health/${patientId}`, updates);
  return res.data;
};
import axios from "axios";

const api = axios.create({
  baseURL: "http://localhost:3001",
  withCredentials: true,
});

export const getMotifsByPatient = async (patientId) => {
  const res = await api.get(`/motifs/${patientId}`);
  return res.data;
};

export const createMotif = async (patientId, motif) => {
  const res = await api.post(`/motifs/${patientId}`, motif);
  return res.data;
};

export const updateMotif = async (id, updates) => {
  const res = await api.patch(`/motifs/${id}`, updates);
  return res.data;
};
import axios from "axios"

const api = axios.create({
  baseURL: 'http://localhost:3001',
  withCredentials: true
})

export const getPatientNotes = async (patientId) => {
  const res = await api.get(`/notes/${patientId}`)
  return res.data
}

export const addNoteToPatient = async (patientId, data) => {
  const res = await api.post(`/notes/${patientId}`, data)
  return res.data
}

export const updateNote = async (noteId, data) => {
  const res = await api.patch(`/notes/${noteId}`, data)
  return res.data
}

export const deleteNote = async (noteId) => {
  const res = await api.delete(`/notes/${noteId}`)
  return res.data
}
import axios from "axios";

const api = axios.create({
  baseURL: "http://localhost:3001",
  withCredentials: true,
});

export const createLongTermObjective = async (motifId, data) => {
  const res = await api.post(`/objectives/long/${motifId}`, data);
  return res.data;
};

export const createShortTermObjective = async (longTermObjectiveId, data) => {
  const res = await api.post(`/objectives/short/${longTermObjectiveId}`, data);
  return res.data;
};
import axios from 'axios'

const api = axios.create({
  baseURL: 'http://localhost:3001',
  withCredentials: true, 
})

// GET all patients
export const getAllPatients = async () => {
  const res = await api.get('/patients')
  return res.data
}

// GET one patient
export const getPatient = async (id) => {
  const res = await api.get(`/patients/${id}`)
  return res.data
}

// POST add new patient
export const createPatient = async (patientData) => {
    const res = await api.post('/patients', patientData);
    return res.data;
  };
  



// PATCH update patient
export const updatePatient = async (id, updates) => {
  const res = await api.patch(`/patients/${id}`, updates)
  return res.data
}

// DELETE patient
export const deletePatient = async (id) => {
  const res = await api.delete(`/patients/${id}`)
  return res.data
}
  
import React, { useState } from "react";
import { motion } from "framer-motion";

const Calendar = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const today = new Date();

  const generateCalendarDays = (date) => {
    const startOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
    const endOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);

    const startDayOfWeek = startOfMonth.getDay();
    const prevMonthDays = [];
    const startDatePrevMonth = new Date(startOfMonth);
    startDatePrevMonth.setDate(startDatePrevMonth.getDate() - (startDayOfWeek || 7) + 1);
    for (let i = 0; i < (startDayOfWeek || 7) - 1; i++) {
      prevMonthDays.push(new Date(startDatePrevMonth.setDate(startDatePrevMonth.getDate() + 1)));
    }

    const currentMonthDays = [];
    for (let i = 1; i <= endOfMonth.getDate(); i++) {
      currentMonthDays.push(new Date(date.getFullYear(), date.getMonth(), i));
    }

    const nextMonthDays = [];
    const remainingDays = 42 - (prevMonthDays.length + currentMonthDays.length);
    const startDateNextMonth = new Date(endOfMonth);
    startDateNextMonth.setDate(startDateNextMonth.getDate() + 1);
    for (let i = 0; i < remainingDays; i++) {
      nextMonthDays.push(new Date(startDateNextMonth.setDate(startDateNextMonth.getDate() + 1)));
    }

    return [...prevMonthDays, ...currentMonthDays, ...nextMonthDays];
  };

  const calendarDays = generateCalendarDays(currentDate);

  const handleMonthChange = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setMonth(currentDate.getMonth() + direction);
    setCurrentDate(newDate);
  };

  const resetToToday = () => {
    setCurrentDate(today);
  };

  return (
    <motion.div 
      className="p-6 bg-white rounded-lg shadow-md w-full h-full"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0, transition: { duration: 0.3 } }}
    >
      <div className="flex justify-between items-center mb-4">
        <button
          className="text-[#A294F9] font-bold hover:underline"
          onClick={() => handleMonthChange(-1)}
        >
          &lt; Mois pr√©c√©dent
        </button>
        <h2
          className="text-2xl font-bold text-gray-800 cursor-pointer hover:text-[#A294F9]"
          onClick={resetToToday}
        >
          {currentDate.toLocaleDateString("fr-FR", { month: "long", year: "numeric" })}
        </h2>
        <button
          className="text-[#A294F9] font-bold hover:underline"
          onClick={() => handleMonthChange(1)}
        >
          Mois suivant &gt;
        </button>
      </div>

      {/* Jours de la semaine */}
      <div className="grid grid-cols-7 text-center font-bold text-gray-600 text-xs sm:text-base">
        {["Lun", "Mar", "Mer", "Jeu", "Ven", "Sam", "Dim"].map((day) => (
          <div key={day}>{day}</div>
        ))}
      </div>

      {/* Jours du calendrier */}
      <div className="grid grid-cols-7 gap-2 mt-2">
        {calendarDays.map((day, index) => {
          const isCurrentMonth = day.getMonth() === currentDate.getMonth();
          const isToday =
            day.getDate() === today.getDate() &&
            day.getMonth() === today.getMonth() &&
            day.getFullYear() === today.getFullYear();

          return (
            <motion.div
              key={index}
              className={`p-2 text-center rounded-lg text-xs sm:text-base cursor-pointer transition-all ${
                isToday
                  ? "bg-[#A294F9] text-white font-bold"
                  : isCurrentMonth
                  ? "bg-white text-gray-800 border border-gray-300"
                  : "bg-gray-100 text-gray-400"
              } hover:bg-blue-100`}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              {day.getDate()}
            </motion.div>
          );
        })}
      </div>
    </motion.div>
  );
};

export default Calendar;
import React, { useState } from "react";
import { motion } from "framer-motion";

const Calendar = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const today = new Date();

  const generateCalendarDays = (date) => {
    const startOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
    const endOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);

    const startDayOfWeek = startOfMonth.getDay();
    const prevMonthDays = [];
    const startDatePrevMonth = new Date(startOfMonth);
    startDatePrevMonth.setDate(startDatePrevMonth.getDate() - (startDayOfWeek || 7) + 1);
    for (let i = 0; i < (startDayOfWeek || 7) - 1; i++) {
      prevMonthDays.push(new Date(startDatePrevMonth.setDate(startDatePrevMonth.getDate() + 1)));
    }

    const currentMonthDays = [];
    for (let i = 1; i <= endOfMonth.getDate(); i++) {
      currentMonthDays.push(new Date(date.getFullYear(), date.getMonth(), i));
    }

    const nextMonthDays = [];
    const remainingDays = 42 - (prevMonthDays.length + currentMonthDays.length);
    const startDateNextMonth = new Date(endOfMonth);
    startDateNextMonth.setDate(startDateNextMonth.getDate() + 1);
    for (let i = 0; i < remainingDays; i++) {
      nextMonthDays.push(new Date(startDateNextMonth.setDate(startDateNextMonth.getDate() + 1)));
    }

    return [...prevMonthDays, ...currentMonthDays, ...nextMonthDays];
  };

  const calendarDays = generateCalendarDays(currentDate);

  const handleMonthChange = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setMonth(currentDate.getMonth() + direction);
    setCurrentDate(newDate);
  };

  const resetToToday = () => {
    setCurrentDate(today);
  };

  return (
    <motion.div 
      className="p-6 bg-white rounded-lg shadow-md w-full h-full"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0, transition: { duration: 0.3 } }}
    >
      <div className="flex justify-between items-center mb-4">
        <button
          className="text-[#A294F9] font-bold hover:underline"
          onClick={() => handleMonthChange(-1)}
        >
          &lt; Mois pr√©c√©dent
        </button>
        <h2
          className="text-2xl font-bold text-gray-800 cursor-pointer hover:text-[#A294F9]"
          onClick={resetToToday}
        >
          {currentDate.toLocaleDateString("fr-FR", { month: "long", year: "numeric" })}
        </h2>
        <button
          className="text-[#A294F9] font-bold hover:underline"
          onClick={() => handleMonthChange(1)}
        >
          Mois suivant &gt;
        </button>
      </div>

      {/* Jours de la semaine */}
      <div className="grid grid-cols-7 text-center font-bold text-gray-600 text-xs sm:text-base">
        {["Lun", "Mar", "Mer", "Jeu", "Ven", "Sam", "Dim"].map((day) => (
          <div key={day}>{day}</div>
        ))}
      </div>

      {/* Jours du calendrier */}
      <div className="grid grid-cols-7 gap-2 mt-2">
        {calendarDays.map((day, index) => {
          const isCurrentMonth = day.getMonth() === currentDate.getMonth();
          const isToday =
            day.getDate() === today.getDate() &&
            day.getMonth() === today.getMonth() &&
            day.getFullYear() === today.getFullYear();

          return (
            <motion.div
              key={index}
              className={`p-2 text-center rounded-lg text-xs sm:text-base cursor-pointer transition-all ${
                isToday
                  ? "bg-[#A294F9] text-white font-bold"
                  : isCurrentMonth
                  ? "bg-white text-gray-800 border border-gray-300"
                  : "bg-gray-100 text-gray-400"
              } hover:bg-blue-100`}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              {day.getDate()}
            </motion.div>
          );
        })}
      </div>
    </motion.div>
  );
};

export default Calendar;
import React, { useEffect, useState } from 'react'
import { Link, useNavigate } from 'react-router-dom'

const Header = () => {
  const [therapist, setTherapist] = useState(null)
  const [menuOpen, setMenuOpen] = useState(false)
  const navigate = useNavigate()

  useEffect(() => {
    fetch('http://localhost:3001/auth/me', {
      credentials: 'include'
    })
      .then(res => res.ok ? res.json() : null)
      .then(data => {
        console.log(data)
        if (data) setTherapist(data)
      })
      .catch(() => {})
  }, [])

  const handleLogout = async () => {
    await fetch('http://localhost:3001/auth/logout', {
      method: 'POST',
      credentials: 'include'
    })
    navigate('/login')
  }

  return (
    <nav className="bg-[#A294F9] p-4 shadow-lg">
      <div className="container mx-auto flex justify-between items-center relative">
        <Link to="/" className="text-white text-3xl font-bold">
          ERGOGO
        </Link>

        <ul className="flex space-x-8 mx-auto">
          <li><Link to="/calendrier" className="text-white text-3xl hover:scale-125 transition">Calendrier</Link></li>
          <li><Link to="/patients" className="text-white text-3xl hover:scale-125 transition">Patients</Link></li>
          <li><Link to="/activities" className="text-white text-3xl hover:scale-125 transition">Activit√©s</Link></li>
          <li><Link to="/reports" className="text-white text-3xl hover:scale-125 transition">Rapports</Link></li>
        </ul>

        {/* Nom du th√©rapeute + menu de d√©connexion */}
        {therapist && (
          <div className="relative">
            <button
              onClick={() => setMenuOpen(!menuOpen)}
              className="text-white font-semibold px-4 py-2 rounded hover:bg-[#8d7cf9] transition"
            >
              {therapist.name}
              
            </button>

            {menuOpen && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded shadow-lg z-10">
                <button
                  onClick={handleLogout}
                  className="block w-full text-left px-4 py-2 text-gray-800 hover:bg-gray-100"
                >
                  Se d√©connecter
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </nav>
  )
}

export default Header
import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { getPatient, updatePatient, deletePatient } from "../api/patientAPI.js";
import PatientDetailsTab from "./PatientDetails/PatientDetailsTab.js";
import PatientNotesTab from "./PatientDetails/PatientNotesTab.js";
import PatientDataTab from "./PatientDetails/PatientDataTab.js";
import PatientFileTab from "./PatientDetails/PatientFileTab.js";

const PatientDetails = () => {
  const { patientId } = useParams();
  const [patient, setPatient] = useState(null);
  const [activeTab, setActiveTab] = useState("details");
  const [updatedPatient, setUpdatedPatient] = useState({});
  const [isEditing, setIsEditing] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getPatient(patientId);
        setPatient(data);
        setUpdatedPatient(data);
      } catch (error) {
        console.error("Erreur de chargement du patient :", error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [patientId]);

  const handleDelete = async () => {
    const confirmed = window.confirm("Supprimer ce patient ?");
    if (!confirmed) return;
    try {
      await deletePatient(patientId);
      navigate("/patients");
    } catch (err) {
      console.error("Erreur suppression :", err);
    }
  };

  const handleUpdate = async () => {
    try {
      await updatePatient(patientId, updatedPatient);
      const refreshed = await getPatient(patientId);
      setPatient(refreshed);
      setIsEditing(false);
    } catch (err) {
      console.error("Erreur mise √† jour :", err);
    }
  };

  const handleChange = (e) => {
    setUpdatedPatient({ ...updatedPatient, [e.target.name]: e.target.value });
  };

  if (loading) return <div>Chargement...</div>;
  if (!patient) return <div>Patient introuvable</div>;

  return (
    <div className="p-4 bg-white shadow-lg rounded-xl w-full h-full">
      <h2 className="text-xl font-bold">{patient.nom} {patient.prenom}</h2>
      <button className="bg-red-500 text-white px-2 py-1 rounded-lg hover:bg-red-600 text-sm" onClick={handleDelete}>
        Supprimer
      </button>

      <div className="flex space-x-4 mb-6">
        {["details", "carnet", "donnees", "dossier"].map((tab) => (
          <button
            key={tab}
            className={`py-2 px-4 rounded-lg ${activeTab === tab ? "bg-blue-500 text-white" : "bg-gray-200"}`}
            onClick={() => setActiveTab(tab)}
          >
            {tab === "details" ? "D√©tails" : tab === "carnet" ? "Carnet de notes" : tab === "donnees" ? "Donn√©es patient" : "Dossier patient"}
          </button>
        ))}
      </div>

      <div className="transition-all duration-500 ease-in-out h-full overflow-y-auto">
        {activeTab === "details" && <PatientDetailsTab patient={patient} isEditing={isEditing} updatedPatient={updatedPatient} handleChange={handleChange} handleUpdate={handleUpdate} setIsEditing={setIsEditing} />}
        {activeTab === "carnet" && <PatientNotesTab patient={patient} />}
        {activeTab === "donnees" && <PatientDataTab patient={patient} />}
        {activeTab === "dossier" && <PatientFileTab patient={patient} />}
      </div>
    </div>
  );
};

export default PatientDetails;
import React from "react";
import { Outlet } from "react-router-dom";
import PatientSidebar from "../components/PatientSidebar.js";

const PatientLayout = () => {
  return (
    <div className="flex w-full h-full">
      {/* Sidebar avec liste des patients */}
      <div className="flex-shrink-0 w-64 h-full bg-gray-100 p-4 shadow-lg overflow-y-auto custom-scrollbar">
        <PatientSidebar />
      </div>

      {/* Contenu dynamique (d√©tails, notes, donn√©es, dossier, etc.) */}
      <div className="flex-grow p-6 overflow-hidden">
        <Outlet />
      </div>
    </div>
  );
};

export default PatientLayout;
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { getAllPatients } from "../api/patientAPI.js";
import { motion } from "framer-motion";

const Patients = () => {
  const [patients, setPatients] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchPatients = async () => {
      try {
        const patientsList = await getAllPatients();
        setPatients(patientsList);
      } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des patients :", error);
      }
    };

    fetchPatients();
  }, []);

  const goToPatientDetails = (patientId) => {
    navigate(`/patient/${patientId}`);
  };

  const goToAddPatientPage = () => {
    navigate("/add-patient");
  };

  return (
    <motion.div 
      className="p-4 bg-white shadow-lg rounded-xl w-full max-w-4xl h-[80vh] mt-4 overflow-y-auto custom-scrollbar"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0, transition: { duration: 0.3 } }}
    >
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">Liste des Patients</h2>
        <button 
          className="bg-[#A294F9] text-white px-4 py-2 rounded-lg hover:bg-[#8a7cf9]"
          onClick={goToAddPatientPage}
        >
          Ajouter un patient
        </button>
      </div>

      <ul className="space-y-2">
        {patients.map(patient => (
          <motion.li
            key={patient.id}
            className="cursor-pointer p-2 rounded-lg bg-gray-100 hover:bg-gray-200 flex justify-between items-center"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => goToPatientDetails(patient.id)}
          >
            <span>{patient.nom} {patient.prenom}</span>
          </motion.li>
        ))}
      </ul>
    </motion.div>
  );
};

export default Patients;
import { useEffect, useState } from "react";
import { useNavigate, useParams, useLocation } from "react-router-dom";
import { getAllPatients } from "../api/patientAPI.js";

const PatientSidebar = () => {
  const [patients, setPatients] = useState([]);
  const { patientId } = useParams();
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    const fetchPatients = async () => {
      try {
        const patientsList = await getAllPatients();
        setPatients(patientsList);
      } catch (err) {
        console.error("Erreur chargement patients sidebar", err);
      }
    };
    fetchPatients();
  }, []);

  const handlePatientChange = (newPatientId) => {
    if (!newPatientId || newPatientId === patientId) return;
    const currentTab = location.pathname.split("/")[3] || "";
    navigate(`/patient/${newPatientId}/${currentTab}`);
  };

  return (
    <div className="h-full">
      <h3 className="text-lg font-bold mb-4">Liste des patients</h3>
      <ul className="space-y-2 h-96 overflow-y-auto custom-scrollbar">
        {patients.map((patient) => (
          <li
            key={patient.id}
            className={`p-2 rounded-lg cursor-pointer ${
              patient.id === patientId ? "bg-blue-500 text-white" : "bg-gray-200 hover:bg-blue-300"
            }`}
            onClick={() => handlePatientChange(patient.id)}
          >
            {patient.nom} {patient.prenom}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default PatientSidebar;
import React, { useEffect, useRef } from "react";
import Quill from "quill";
import "quill/dist/quill.snow.css";

const QuillEditor = ({ value, onChange, readOnly = false }) => {
  const editorRef = useRef(null);
  const quillInstance = useRef(null);

  useEffect(() => {
    if (!editorRef.current) return;

    // ‚ö†Ô∏è Supprime l'ancienne instance de Quill avant de recr√©er
    if (quillInstance.current) {
      quillInstance.current.root.innerHTML = value || "";
      quillInstance.current.enable(!readOnly); // Active/d√©sactive l'√©dition
      return;
    }

    // ‚úÖ Cr√©ation de Quill avec une vraie barre d'outils
    quillInstance.current = new Quill(editorRef.current, {
      theme: "snow",
      readOnly: readOnly,
      modules: {
        toolbar: [
          [{ header: [1, 2, 3, false] }],
          ["bold", "italic", "underline", "strike"],
          [{ color: [] }, { background: [] }],
          [{ list: "ordered" }, { list: "bullet" }],
          [{ align: [] }],
          ["blockquote", "code-block"],
          ["link", "image", "video"],
          ["clean"],
        ],
      },
    });

    // ‚úÖ G√©rer les changements de texte
    quillInstance.current.on("text-change", () => {
      const newContent = quillInstance.current.root.innerHTML;
      onChange(newContent);
    });

    // ‚úÖ Charger la valeur initiale
    quillInstance.current.root.innerHTML = value || "";

  }, [readOnly]);

  // ‚úÖ Mettre √† jour Quill si `value` change
  useEffect(() => {
    if (quillInstance.current && quillInstance.current.root.innerHTML !== value) {
      quillInstance.current.root.innerHTML = value || "";
    }
  }, [value]);

  return <div className="quill-editor" ref={editorRef} />;
};

export default QuillEditor;
import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'

export default function RequireAuth({ children }) {
  const [loading, setLoading] = useState(true)
  const navigate = useNavigate()

  useEffect(() => {
    fetch('http://localhost:3001/auth/me', {
      credentials: 'include'
    })
      .then(res => {
        if (!res.ok) navigate('/login')
        else setLoading(false)
      })
      .catch(() => navigate('/login'))
  }, [navigate])

  if (loading) return <div>Chargement...</div>

  return children
}
import { useState } from "react";
import PatientReferences from "./DataClient/PatientReferences.js";
import PatientHealthData from "./DataClient/PatientHealthData.js";
import { updatePatient } from "../../api/patientAPI.js";

const PatientDataTab = ({ patient }) => {
  const [activeSubTab, setActiveSubTab] = useState("references");
  const [updatedPatient, setUpdatedPatient] = useState({ ...patient });

  const handleChange = (e) => {
    setUpdatedPatient({ ...updatedPatient, [e.target.name]: e.target.value });
  };

  const handleSave = async () => {
    try {
      await updatePatient(patient.id, updatedPatient);
      alert("‚úÖ Donn√©es mises √† jour !");
    } catch (err) {
      console.error("‚ùå Erreur mise √† jour :", err);
      alert("‚ùå Erreur de sauvegarde.");
    }
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md h-full w-full max-w-8xl mx-auto">
      <h3 className="text-2xl font-bold mb-6 text-gray-800">Donn√©es Patient</h3>
      <div className="flex space-x-4 mb-6">
        <button
          className={`py-2 px-4 rounded-lg ${activeSubTab === "references" ? "bg-blue-500 text-white" : "bg-gray-200"}`}
          onClick={() => setActiveSubTab("references")}
        >
          R√©f√©rences et Contacts
        </button>
        <button
          className={`py-2 px-4 rounded-lg ${activeSubTab === "health" ? "bg-blue-500 text-white" : "bg-gray-200"}`}
          onClick={() => setActiveSubTab("health")}
        >
          Donn√©es de Sant√©
        </button>
      </div>

      <div className="transition-all duration-500 ease-in-out h-full overflow-y-auto">
        {activeSubTab === "references" && (
          <PatientReferences
            patient={updatedPatient}
            handleChange={handleChange}
            handleSave={handleSave}
          />
        )}
        {activeSubTab === "health" && (
          <PatientHealthData
            patient={updatedPatient}
            patientId={patient.id}
            handleChange={handleChange}
            handleSave={handleSave}
          />
        )}
      </div>
    </div>
  );
};

export default PatientDataTab;
import React from "react";
import PatientForm from "./PatientForm.js";

const PatientDetailsTab = ({ patient, isEditing, updatedPatient, handleChange, handleUpdate, setIsEditing }) => {
  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-2xl font-bold mb-6 text-gray-800">D√©tails du Patient</h3>

      {isEditing ? (
        <PatientForm
          patientData={updatedPatient}
          handleChange={handleChange}
          handleSubmit={handleUpdate}
          isEditing={true}
          setIsEditing={setIsEditing}
        />
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4 text-gray-700">
          <p><strong>NISS:</strong> {patient.niss}</p>
          <p><strong>Titre:</strong> {patient.titre}</p>
          <p><strong>Sexe:</strong> {patient.sexe}</p>
          <p><strong>Langue:</strong> {patient.langue}</p>
          <p><strong>Naissance:</strong> {patient.dateNaissance}</p>
          <p><strong>Nationalit√©:</strong> {patient.nationalite}</p>
          <p><strong>Adresse:</strong> {patient.adresse}</p>
          <p><strong>T√©l√©phone 1:</strong> {patient.telephone1}</p>
          <p><strong>T√©l√©phone 2:</strong> {patient.telephone2}</p>
          <p><strong>Email:</strong> {patient.email}</p>
          <p><strong>Mutuelle:</strong> {patient.mutuelle}</p>
          <p><strong>CT1/CT2:</strong> {patient.ct1_ct2}</p>
          <p><strong>Tiers Payant:</strong> {patient.tiersPayant}</p>
          <p><strong>M√©decin de famille:</strong> {patient.medecinFamille}</p>
          <p><strong>Profession:</strong> {patient.profession}</p>
          <p><strong>Nombre d'enfants:</strong> {patient.nbrEnfants}</p>
          <p><strong>Facturer √†:</strong> {patient.facturerA}</p>
          <p><strong>Zone de r√©sidence:</strong> {patient.zoneResidence}</p>
          <p><strong>√âtat civil:</strong> {patient.etatCivil}</p>
        </div>
      )}

      {/* üü¶ Bouton Modifier */}
      {!isEditing && (
        <div className="mt-6 flex justify-end">
          <button className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600" onClick={() => setIsEditing(true)}>
            Modifier
          </button>
        </div>
      )}
    </div>
  );
};

export default PatientDetailsTab;
import React, { useEffect, useState } from "react";
import { addMotifIntervention, getMotifsIntervention, updateMotifIntervention } from "../../firebase/patientsFirestore.js";
import PatientSituation from "./PatientFile/PatientSituation.js";
import PatientTherapeutic from "./PatientFile/PatientTherapeutic.js";
import PatientObjectives from "./PatientFile/PatientObjectives.js";
import PatientDiagnosis from "./PatientFile/PatientDiagnosis.js";
import PatientInterventions from "./PatientFile/PatientInterventions.js";
import PatientSummary from "./PatientFile/PatientSummary.js";

const PatientFileTab = ({ patient }) => {
  const [motifs, setMotifs] = useState([]);
  const [selectedMotif, setSelectedMotif] = useState(null);
  const [activeSubTab, setActiveSubTab] = useState("situation");
  const [newMotif, setNewMotif] = useState({ motifIntervention: "", groupeCible: "", age: "", batteriesCodeCIF: "" });

  useEffect(() => {
    if (!patient?.id) return;

    const fetchMotifs = async () => {
      const motifsList = await getMotifsIntervention(patient.id);
      setMotifs(motifsList);
    };

    fetchMotifs();
  }, [patient?.id]);

  const handleCreateMotif = async () => {
    if (!newMotif.motifIntervention.trim()) return;

    const addedMotif = await addMotifIntervention(patient.id, {
      ...newMotif,
      perspectiveTherapeutique: {
        assesments: "",
        syntheseEvaluation: "",
        restrictionsSouhaits: "",
      },
    });

    if (addedMotif) {
      setMotifs([...motifs, addedMotif]);
      setNewMotif({ motifIntervention: "", groupeCible: "", age: "", batteriesCodeCIF: "" });
    }
  };

  const handleSelectMotif = (motif) => {
    setSelectedMotif({
      ...motif,
      perspectiveTherapeutique: motif.perspectiveTherapeutique || {
        assesments: "",
        syntheseEvaluation: "",
        restrictionsSouhaits: "",
      },
    });
  };

  const handleUpdateMotifData = async (updatedMotif) => {
    if (!selectedMotif) return;
    console.log("üü¢ Tentative de mise √† jour du motif :", updatedMotif);
    try {
      await updateMotifIntervention(patient.id, selectedMotif.id, updatedMotif);
      console.log("‚úÖ Motif mis √† jour avec succ√®s !");
      
      // üî• Mise √† jour imm√©diate de la liste des motifs pour voir le changement sans refresh
      setMotifs((prevMotifs) =>
        prevMotifs.map((m) => (m.id === selectedMotif.id ? updatedMotif : m))
      );
      setSelectedMotif(updatedMotif);
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour du motif :", error);
    }
  };

  return (
    <div className="flex space-x-4">
      {/* Liste des motifs d‚Äôintervention */}
      <div className="w-1/6 bg-gray-100 p-4 rounded-lg shadow">
        <h4 className="text-lg font-semibold mb-3">Motifs d‚Äôintervention</h4>

        {/* Ajout d'un nouveau motif */}
        <div className="mb-4">
          <input
            type="text"
            placeholder="Motif d'intervention"
            value={newMotif.motifIntervention}
            onChange={(e) => setNewMotif({ ...newMotif, motifIntervention: e.target.value })}
            className="w-full p-2 border rounded-lg mb-2"
          />
          <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleCreateMotif}>
            Ajouter
          </button>
        </div>

        <ul className="space-y-2">
          {motifs.map((motif, index) => ( // üîπ Ajout de l'index pour √©viter l'erreur si `motif.id` est absent
            <li
              key={motif.id || index} // üîπ Correction ici
              className={`cursor-pointer p-2 rounded-lg ${
                selectedMotif?.id === motif.id ? "bg-blue-500 text-white" : "bg-gray-200"
              } hover:bg-blue-300`}
              onClick={() => handleSelectMotif(motif)}
            >
              <strong>{motif.motifIntervention}</strong>
              <p className="text-sm">Groupe: {motif.groupeCible} | √Çge: {motif.age}</p>
              <p className="text-xs">Batteries: {motif.batteriesCodeCIF}</p>
            </li>
          ))}
        </ul>
      </div>

      {/* Affichage des onglets du dossier patient */}
      <div className="w-5/6 bg-white p-4 rounded-lg shadow">
        {selectedMotif ? (
          <>
            <div className="flex space-x-2 mb-4">
              {["situation", "therapeutic", "objectives", "diagnosis", "interventions", "summary"].map((tab, index) => (
                <button
                  key={tab || index} // üîπ Correction ici
                  className={`py-2 px-4 rounded-lg ${
                    activeSubTab === tab ? "bg-blue-500 text-white" : "bg-gray-200"
                  }`}
                  onClick={() => setActiveSubTab(tab)}
                >
                  {tab === "situation" ? "Situation Personnelle" : ""}
                  {tab === "therapeutic" ? "Perspective Th√©rapeutique" : ""}
                  {tab === "objectives" ? "Objectifs" : ""}
                  {tab === "diagnosis" ? "Diagnostic" : ""}
                  {tab === "interventions" ? "Compte Rendu" : ""}
                  {tab === "summary" ? "Synth√®se" : ""}
                </button>
              ))}
            </div>

            {/* Affichage du sous-onglet s√©lectionn√© */}
            {activeSubTab === "situation" && <PatientSituation motif={selectedMotif} patientId={patient.id} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "therapeutic" && <PatientTherapeutic motif={selectedMotif} patientId={patient.id} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "objectives" && <PatientObjectives motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "diagnosis" && <PatientDiagnosis motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "interventions" && <PatientInterventions motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "summary" && <PatientSummary motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
          </>
        ) : (
          <p className="text-gray-500 text-center">S√©lectionnez un motif d‚Äôintervention.</p>
        )}
      </div>
    </div>
  );
};

export default PatientFileTab;
import React from "react";

const PatientForm = ({ patientData, handleChange, handleSubmit, isEditing, setIsEditing }) => {
  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-lg font-bold mb-4">{isEditing ? "Modifier le Patient" : "Ajouter un Patient"}</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <input type="text" name="nom" placeholder="Nom" value={patientData.nom || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="prenom" placeholder="Pr√©nom" value={patientData.prenom || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="niss" placeholder="NISS" value={patientData.niss || ""} onChange={handleChange} className="border p-2 rounded" />
        
        <select name="titre" value={patientData.titre || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Titre</option>
          <option value="M.">M.</option>
          <option value="Mme">Mme</option>
          <option value="Dr">Dr</option>
        </select>

        <select name="sexe" value={patientData.sexe || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Sexe</option>
          <option value="Homme">Homme</option>
          <option value="Femme">Femme</option>
          <option value="Autre">Autre</option>
        </select>

        <input type="text" name="langue" placeholder="Langue" value={patientData.langue || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="date" name="dateNaissance" placeholder="Naissance" value={patientData.dateNaissance || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="nationalite" placeholder="Nationalit√©" value={patientData.nationalite || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="adresse" placeholder="Adresse" value={patientData.adresse || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="telephone1" placeholder="T√©l√©phone 1" value={patientData.telephone1 || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="telephone2" placeholder="T√©l√©phone 2" value={patientData.telephone2 || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="email" name="email" placeholder="Email" value={patientData.email || ""} onChange={handleChange} className="border p-2 rounded" />

        <select name="mutuelle" value={patientData.mutuelle || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Mutuelle</option>
          <option value="Mutualit√© chr√©tienne">Mutualit√© chr√©tienne</option>
          <option value="Solidaris">Solidaris</option>
          <option value="Autre">Autre</option>
        </select>

        <input type="text" name="ct1_ct2" placeholder="CT1/CT2" value={patientData.ct1_ct2 || ""} onChange={handleChange} className="border p-2 rounded" />

        <select name="tiersPayant" value={patientData.tiersPayant || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Tiers Payant</option>
          <option value="Oui">Oui</option>
          <option value="Non">Non</option>
        </select>

        <input type="text" name="medecinFamille" placeholder="M√©decin de famille" value={patientData.medecinFamille || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="profession" placeholder="Profession" value={patientData.profession || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="number" name="nbrEnfants" placeholder="Nombre d'enfants" value={patientData.nbrEnfants || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="facturerA" placeholder="Facturer √†" value={patientData.facturerA || ""} onChange={handleChange} className="border p-2 rounded" />

        <select name="zoneResidence" value={patientData.zoneResidence || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Zone de r√©sidence</option>
          <option value="Bruxelles">Bruxelles</option>
          <option value="Wallonie">Wallonie</option>
          <option value="Flandre">Flandre</option>
          <option value="Autre">Autre</option>
        </select>

        <select name="etatCivil" value={patientData.etatCivil || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">√âtat civil</option>
          <option value="C√©libataire">C√©libataire</option>
          <option value="Mari√©(e)">Mari√©(e)</option>
          <option value="Divorc√©(e)">Divorc√©(e)</option>
          <option value="Veuf(ve)">Veuf(ve)</option>
        </select>
      </div>

      <div className="mt-4 flex space-x-4">
        <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSubmit}>
          {isEditing ? "Enregistrer" : "Ajouter"}
        </button>
        {isEditing && (
          <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={() => setIsEditing(false)}>
            Annuler
          </button>
        )}
      </div>
    </div>
  );
};

export default PatientForm;
import React, { useEffect, useState } from "react";
import { getPatientNotes, addNoteToPatient, updateNote, deleteNote } from "../../firebase/notesFirestore.js";

const PatientNotesTab = ({ patient }) => {
  const [notes, setNotes] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [newTitle, setNewTitle] = useState("");
  const [newText, setNewText] = useState("");
  const [loading, setLoading] = useState(false);
  const [editingNoteId, setEditingNoteId] = useState(null);
  const [editTitle, setEditTitle] = useState("");
  const [editText, setEditText] = useState("");

  useEffect(() => {
    if (!patient?.id) return;

    const fetchNotes = async () => {
      try {
        console.log("üîç R√©cup√©ration des notes pour le patient :", patient.id);
        const notesList = await getPatientNotes(patient.id);

        // S'assurer que notesList est bien un tableau et filtrer les notes invalides
        const validNotes = Array.isArray(notesList) ? notesList.filter(note => note && note.titre) : [];

        console.log("üìú Notes r√©cup√©r√©es :", validNotes);
        setNotes(validNotes);
        
      } catch (error) {
        console.error("‚ùå Erreur lors du chargement des notes :", error);
        setNotes([]); // üîπ √âvite un √©tat undefined
      }
    };

    fetchNotes();
  }, [patient?.id]);

  const handleAddNote = async () => {
    if (newTitle.trim() === "" || newText.trim() === "" || !patient?.id) return;

    setLoading(true);
    try {
      const noteData = {
        titre: newTitle,
        texte: newText || "Pas de texte",
        date: new Date().toISOString(),
      };

      await addNoteToPatient(patient.id, noteData);

      setNotes((prevNotes) => [...prevNotes, noteData]);
      setNewTitle("");
      setNewText("");
      setShowForm(false);
    } catch (error) {
      console.error("‚ùå Erreur lors de l'ajout de la note :", error);
    }
    setLoading(false);
  };

  const handleEdit = (note) => {
    setEditingNoteId(note.id);
    setEditTitle(note.titre);
    setEditText(note.texte);
  };

  const handleCancelEdit = () => {
    setEditingNoteId(null);
    setEditTitle("");
    setEditText("");
  };

  const handleSaveEdit = async (noteId) => {
    try {
      await updateNote(patient.id, noteId, { titre: editTitle, texte: editText });
      setNotes((prevNotes) =>
        prevNotes.map((note) =>
          note.id === noteId ? { ...note, titre: editTitle, texte: editText } : note
        )
      );
      setEditingNoteId(null);
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour de la note :", error);
    }
  };

  const handleDeleteNote = async (noteId) => {
    const confirmed = window.confirm("√ätes-vous s√ªr de vouloir supprimer cette note ?");
    if (!confirmed) return;

    try {
      await deleteNote(patient.id, noteId);
      setNotes((prevNotes) => prevNotes.filter((note) => note.id !== noteId));
    } catch (error) {
      console.error("‚ùå Erreur lors de la suppression de la note :", error);
    }
  };

  return (
    <div className="p-4 bg-white rounded-lg shadow">
      <h3 className="text-lg font-bold mb-2">Carnet de notes</h3>

      <button
        className="mb-4 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
        onClick={() => setShowForm(!showForm)}
      >
        {showForm ? "Annuler" : "Ajouter une note"}
      </button>

      {showForm && (
        <div className="mb-4 border p-4 rounded-lg bg-gray-100">
          <input
            type="text"
            className="w-full mb-2 border rounded-lg p-2"
            placeholder="Titre de la note"
            value={newTitle}
            onChange={(e) => setNewTitle(e.target.value)}
          />
          <textarea
            className="w-full mb-2 border rounded-lg p-2"
            placeholder="√âcrire une note..."
            value={newText}
            onChange={(e) => setNewText(e.target.value)}
          />
          <button
            className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
            onClick={handleAddNote}
            disabled={loading}
          >
            {loading ? "Ajout..." : "Ajouter"}
          </button>
        </div>
      )}

      <div className="mt-4">
        {Array.isArray(notes) && notes.length > 0 ? (
          <ul className="space-y-2">
            {notes.map((note, index) => (
              <li key={index} className="border-b py-2">
                {editingNoteId === note.id ? (
                  <div className="mb-2">
                    <input
                      type="text"
                      className="w-full mb-2 border rounded-lg p-2"
                      value={editTitle}
                      onChange={(e) => setEditTitle(e.target.value)}
                    />
                    <textarea
                      className="w-full mb-2 border rounded-lg p-2"
                      value={editText}
                      onChange={(e) => setEditText(e.target.value)}
                    />
                    <div className="flex space-x-2">
                      <button
                        className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                        onClick={() => handleSaveEdit(note.id)}
                      >
                        Enregistrer
                      </button>
                      <button
                        className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600"
                        onClick={handleCancelEdit}
                      >
                        Annuler
                      </button>
                    </div>
                  </div>
                ) : (
                  <>
                    <div className="flex justify-between items-center">
                      <span className="text-lg font-semibold text-blue-600">{note?.titre || "Sans titre"}</span>
                      <span className="text-gray-500 text-sm">
                        {note?.date ? new Date(note.date).toLocaleDateString("fr-FR", {
                          day: "2-digit",
                          month: "short",
                          year: "numeric",
                        }) : "Date inconnue"}
                      </span>
                    </div>

                    <p className="text-gray-700 text-sm">{note?.texte || "Pas de texte"}</p>

                    <div className="flex space-x-2 mt-2">
                      <button
                        className="bg-yellow-500 text-white px-3 py-1 rounded-lg hover:bg-yellow-600"
                        onClick={() => handleEdit(note)}
                      >
                        Modifier
                      </button>
                      <button
                        className="bg-red-500 text-white px-3 py-1 rounded-lg hover:bg-red-600"
                        onClick={() => handleDeleteNote(note.id)}
                      >
                        Supprimer
                      </button>
                    </div>
                  </>
                )}
              </li>
            ))}
          </ul>
        ) : (
          <p className="text-gray-500">Aucune note pour ce patient.</p>
        )}
      </div>
    </div>
  );
};

export default PatientNotesTab;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";
import { updatePatient } from "../../../api/patientAPI.js";

const PatientHealthData = ({ patient, patientId, handleChange, handleSave }) => {
  const [editing, setEditing] = useState(false);
  const [healthData, setHealthData] = useState({
    diagnosticMedical: patient?.diagnosticMedical || "",
    antecedentsMedicaux: patient?.antecedentsMedicaux || "",
    chroniqueSante: patient?.chroniqueSante || "",
  });

  useEffect(() => {
    setHealthData({
      diagnosticMedical: patient?.diagnosticMedical || "",
      antecedentsMedicaux: patient?.antecedentsMedicaux || "",
      chroniqueSante: patient?.chroniqueSante || "",
    });
  }, [patient]);

  const handleEdit = () => {
    setEditing(true);
  };

  const handleCancel = () => {
    setEditing(false);
    setHealthData({
      diagnosticMedical: patient?.diagnosticMedical || "",
      antecedentsMedicaux: patient?.antecedentsMedicaux || "",
      chroniqueSante: patient?.chroniqueSante || "",
    });
  };

  const handleInputChange = (field, value) => {
    setHealthData((prev) => ({ ...prev, [field]: value }));
  };

  const handleSaveHealthData = async () => {
    if (!patientId) {
      console.error("‚ùå patientId est undefined !");
      alert("Erreur : Impossible de sauvegarder, l'ID du patient est introuvable.");
      return;
    }

    const updatedData = {
      diagnosticMedical: healthData.diagnosticMedical || "",
      antecedentsMedicaux: healthData.antecedentsMedicaux || "",
      chroniqueSante: healthData.chroniqueSante || "",
    };

    console.log("üì§ Sauvegarde des donn√©es :", patientId, updatedData);

    try {
      await updatePatient(patientId, updatedData);
      console.log("‚úÖ Mise √† jour r√©ussie !");
      handleSave(); // Rafra√Æchir les donn√©es
      setEditing(false);
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour :", error);
    }
  };

  return (
    <div className="h-full overflow-y-auto w-full bg-white p-6 rounded-lg shadow-md">
      <h4 className="text-lg font-semibold mb-4">Donn√©es de Sant√©</h4>
      <div className="space-y-4">
        <div>
          <label className="block text-gray-700 font-semibold">Diagnostic M√©dical</label>
          <input
            type="text"
            name="diagnosticMedical"
            placeholder="Diagnostic m√©dical"
            value={healthData.diagnosticMedical}
            onChange={(e) => handleInputChange("diagnosticMedical", e.target.value)}
            className="border p-2 rounded w-full"
            disabled={!editing}
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 font-semibold">Ant√©c√©dents M√©dicaux</label>
          <QuillEditor
            value={healthData.antecedentsMedicaux}
            onChange={(value) => handleInputChange("antecedentsMedicaux", value)}
            readOnly={!editing}
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 font-semibold">Chronique de Sant√©</label>
          <QuillEditor
            value={healthData.chroniqueSante}
            onChange={(value) => handleInputChange("chroniqueSante", value)}
            readOnly={!editing}
          />
        </div>

        <div className="flex space-x-2">
          {!editing ? (
            <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={handleEdit}>
              Modifier
            </button>
          ) : (
            <>
              <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSaveHealthData}>
                Enregistrer
              </button>
              <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
                Annuler
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default PatientHealthData;
import React, { useState } from "react";

const PatientReferences = ({ patient, handleChange, handleSave }) => {
  const [editingIndex, setEditingIndex] = useState(null);
  const [editingType, setEditingType] = useState(null);
  const [newEntry, setNewEntry] = useState({});

  // üü¢ Activer l'√©dition pour une entr√©e sp√©cifique ou ajouter une nouvelle entr√©e
  const handleEdit = (index, type) => {
    setEditingIndex(index);
    setEditingType(type);

    if (index !== null) {
      setNewEntry(type === "references" ? patient.references[index] : patient.contacts[index]);
    } else {
      setNewEntry({
        dispensateurNom: "",
        dispensateurPrenom: "",
        dispensateurType: "",
        dispensateurINAMI: "",
        dispensateurTelephone: "",
        dispensateurEmail: "",
        contactNom: "",
        contactPrenom: "",
        contactRelation: "",
        contactTelephone: "",
        contactEmail: "",
        contactCommentaire: ""
      });
    }
  };

  // üü¢ Fermer le formulaire quand on clique sur "Annuler"
  const handleCancel = () => {
    setEditingIndex(null);
    setEditingType(null);
    setNewEntry({});
  };



  // üü¢ G√©rer les changements dans le formulaire
  const handleEntryChange = (e) => {
    setNewEntry({ ...newEntry, [e.target.name]: e.target.value });
  };

  // üü¢ Enregistrer une nouvelle entr√©e ou modification
  const handleSaveEntry = (type) => {
    let updatedList = [...(patient[type] || [])];

    if (editingIndex !== null) {
      updatedList[editingIndex] = newEntry;
    } else {
      updatedList.push(newEntry);
    }

    handleChange({ target: { name: type, value: updatedList } });

    setEditingIndex(null);
    setEditingType(null);
    setNewEntry({});
    handleSave();
  };

  // üü¢ Supprimer une entr√©e avec confirmation
  const handleDelete = (index, type) => {
    if (window.confirm("√ätes-vous s√ªr de vouloir supprimer cette entr√©e ?")) {
      let updatedList = [...(patient[type] || [])];
      updatedList.splice(index, 1);
      handleChange({ target: { name: type, value: updatedList } });
      handleSave();
    }
  };

  return (
    <div className="h-full overflow-y-auto w-full bg-white p-6 rounded-lg shadow-md">
      <h4 className="text-2xl font-bold text-gray-800 mb-6 text-center">R√©f√©rences et Contacts</h4>

      <div className="flex-grow overflow-auto p-2">
        {/* üü¶ Tableau des Dispensateurs de soin */}
        <div className="relative mb-8">
          <h5 className="text-lg font-semibold text-gray-700 mb-3">R√©f√©rences et Contacts</h5>
          <button className="absolute top-0 right-0 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => handleEdit(null, "references")}>
            {editingType === "references" ? "Annuler" : "Ajouter"}
          </button>
          <table className="w-full border-collapse border border-gray-300">
            <thead>
              <tr className="bg-gray-200 text-left">
                <th className="border border-gray-300 px-4 py-2">Nom</th>
                <th className="border border-gray-300 px-4 py-2">Pr√©nom</th>
                <th className="border border-gray-300 px-4 py-2">Type</th>
                <th className="border border-gray-300 px-4 py-2">INAMI</th>
                <th className="border border-gray-300 px-4 py-2">T√©l√©phone</th>
                <th className="border border-gray-300 px-4 py-2">Email</th>
                <th className="border border-gray-300 px-4 py-2">Action</th>
              </tr>
            </thead>
            <tbody>
              {(patient.references || []).map((ref, index) => (
                <tr key={index} className="border border-gray-300">
                  <td className="px-4 py-2">{ref.dispensateurNom}</td>
                  <td className="px-4 py-2">{ref.dispensateurPrenom}</td>
                  <td className="px-4 py-2">{ref.dispensateurType}</td>
                  <td className="px-4 py-2">{ref.dispensateurINAMI}</td>
                  <td className="px-4 py-2">{ref.dispensateurTelephone}</td>
                  <td className="px-4 py-2">{ref.dispensateurEmail}</td>
                  <td className="px-4 py-2 flex items-center space-x-2">
                    <button className="text-blue-500 hover:underline" onClick={() => handleEdit(index, "references")}>‚úèÔ∏è</button>
                    <button className="text-red-500 hover:underline" onClick={() => handleDelete(index, "references")}>üóëÔ∏è</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {editingType === "references" && (
            <div className="mt-4 p-4 bg-gray-100 rounded">
              <input type="text" name="dispensateurNom" placeholder="Nom" value={newEntry.dispensateurNom || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="dispensateurPrenom" placeholder="Pr√©nom" value={newEntry.dispensateurPrenom || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="dispensateurType" placeholder="Type" value={newEntry.dispensateurType || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="dispensateurINAMI" placeholder="INAMI" value={newEntry.dispensateurINAMI || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" />
              <input type="text" name="dispensateurTelephone" placeholder="T√©l√©phone" value={newEntry.dispensateurTelephone || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="dispensateurEmail" placeholder="Email" value={newEntry.dispensateurEmail || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" />
              <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={() => handleSaveEntry("references")}>
                Enregistrer
              </button>
              <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 ml-2" onClick={handleCancel}>
                Annuler
              </button>
            </div>
          )}
        </div>

        {/* üü¶ Tableau des Autres Contacts */}
        <div className="relative">
          <h5 className="text-lg font-semibold text-gray-700 mb-3">Donn√©es Sant√©</h5>
          <button className="absolute top-0 right-0 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => handleEdit(null, "contacts")}>
            {editingType === "contacts" ? "Annuler" : "Ajouter"}
          </button>
          <table className="w-full border-collapse border border-gray-300">
            <thead>
              <tr className="bg-gray-200 text-left">
                <th className="border border-gray-300 px-4 py-2">Nom</th>
                <th className="border border-gray-300 px-4 py-2">Pr√©nom</th>
                <th className="border border-gray-300 px-4 py-2">Relation</th>
                <th className="border border-gray-300 px-4 py-2">T√©l√©phone</th>
                <th className="border border-gray-300 px-4 py-2">Email</th>
                <th className="border border-gray-300 px-4 py-2">Commentaire</th>
                <th className="border border-gray-300 px-4 py-2">Action</th>
              </tr>
            </thead>
            <tbody>
              {(patient.contacts || []).map((contact, index) => (
                <tr key={index} className="border border-gray-300">
                  <td className="px-4 py-2">{contact.contactNom}</td>
                  <td className="px-4 py-2">{contact.contactPrenom}</td>
                  <td className="px-4 py-2">{contact.contactRelation}</td>
                  <td className="px-4 py-2">{contact.contactTelephone}</td>
                  <td className="px-4 py-2">{contact.contactEmail}</td>
                  <td className="px-4 py-2 whitespace-pre-wrap break-words">{contact.contactCommentaire}</td>
                  <td className="px-4 py-2 flex items-center space-x-2">
                    <button className="text-blue-500 hover:underline" onClick={() => handleEdit(index, "contacts")}>‚úèÔ∏è</button>
                    <button className="text-red-500 hover:underline" onClick={() => handleDelete(index, "contacts")}>üóëÔ∏è</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {editingType === "contacts" && (
            <div className="mt-4 p-4 bg-gray-100 rounded">
              <input type="text" name="contactNom" placeholder="Nom" value={newEntry.contactNom || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="contactPrenom" placeholder="Pr√©nom" value={newEntry.contactPrenom || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="contactRelation" placeholder="Relation" value={newEntry.contactRelation || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="contactTelephone" placeholder="T√©l√©phone" value={newEntry.contactTelephone || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="contactEmail" placeholder="Email" value={newEntry.contactEmail || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" />
              <textarea name="contactCommentaire" placeholder="Commentaire" value={newEntry.contactCommentaire || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" />
              <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={() => handleSaveEntry("contacts")}>
                Enregistrer
              </button>
              <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 ml-2" onClick={handleCancel}>
                Annuler
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default PatientReferences;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientDiagnosis = ({ motif, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [diagnostic, setDiagnostic] = useState(motif?.diagnostic || "");

  useEffect(() => {
    setDiagnostic(motif?.diagnostic || "");
  }, [motif]);

  const handleSave = async () => {
    if (!motif) return;

    const updatedMotif = {
      ...motif,
      diagnostic,
    };

    try {
      await updateMotif(updatedMotif);
      setEditing(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde du diagnostic :", error);
    }
  };

  const handleCancel = () => {
    setEditing(false);
    setDiagnostic(motif?.diagnostic || "");
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg h-full">
      <h4 className="text-md font-semibold mb-4">Diagnostic</h4>

      {/* ‚úÖ Ajout d'un conteneur propre pour QuillEditor */}
      <div className="border rounded-lg p-2">
        <QuillEditor
          value={diagnostic}
          onChange={setDiagnostic}
          readOnly={!editing}
          className="min-h-[150px] max-h-64 overflow-auto"
        />
      </div>

      <div className="flex space-x-2 mt-4">
        {editing ? (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        ) : (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => setEditing(true)}>
            Modifier
          </button>
        )}
      </div>
    </div>
  );
};

export default PatientDiagnosis;
import React, { useState } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientInterventions = ({ motif, updateMotif }) => {
  const [editingIndex, setEditingIndex] = useState(null);
  const [newIntervention, setNewIntervention] = useState({
    date: "",
    texte: "",
  });
  const [showForm, setShowForm] = useState(false);

  const handleInputChange = (field, value) => {
    setNewIntervention((prev) => ({ ...prev, [field]: value }));
  };

  const handleSaveIntervention = async () => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: [
        ...(motif.compteRenduInterventions || []),
        newIntervention,
      ],
    };

    try {
      await updateMotif(updatedMotif);
      setNewIntervention({ date: "", texte: "" });
      setShowForm(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de l'intervention :", error);
    }
  };

  const handleEditIntervention = (index) => {
    setEditingIndex(index);
    setNewIntervention(motif.compteRenduInterventions[index]);
    setShowForm(true);
  };

  const handleSaveEditIntervention = async () => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: motif.compteRenduInterventions.map((intervention, index) =>
        index === editingIndex ? newIntervention : intervention
      ),
    };

    try {
      await updateMotif(updatedMotif);
      setEditingIndex(null);
      setNewIntervention({ date: "", texte: "" });
      setShowForm(false);
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de l'intervention :", error);
    }
  };

  const handleDeleteIntervention = async (index) => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: motif.compteRenduInterventions.filter((_, i) => i !== index),
    };

    try {
      await updateMotif(updatedMotif);
    } catch (error) {
      console.error("Erreur lors de la suppression de l'intervention :", error);
    }
  };

  const handleCancel = () => {
    setEditingIndex(null);
    setNewIntervention({ date: "", texte: "" });
    setShowForm(false);
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-md font-semibold mb-4">Compte Rendu des Interventions</h4>

      <button
        className="mb-4 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
        onClick={() => {
          setShowForm(true);
          setEditingIndex(null);
          setNewIntervention({ date: "", texte: "" });
        }}
      >
        Ajouter une intervention
      </button>

      {showForm && (
        <div className="mb-4 border p-4 rounded-lg">
          <input
            type="date"
            className="w-full mb-2 border rounded-lg p-2"
            placeholder="Date de l'intervention"
            value={newIntervention.date}
            onChange={(e) => handleInputChange("date", e.target.value)}
          />
          <QuillEditor
            value={newIntervention.texte}
            onChange={(value) => handleInputChange("texte", value)}
            readOnly={false}
          />
          <div className="flex space-x-2 mt-4">
            {editingIndex !== null ? (
              <>
                <button
                  className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                  onClick={handleSaveEditIntervention}
                >
                  Enregistrer
                </button>
                <button
                  className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600"
                  onClick={handleCancel}
                >
                  Annuler
                </button>
              </>
            ) : (
              <button
                className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                onClick={handleSaveIntervention}
              >
                Ajouter
              </button>
            )}
          </div>
        </div>
      )}

      <div className="mt-4">
        {motif.compteRenduInterventions?.length > 0 ? (
          <ul className="space-y-2">
            {motif.compteRenduInterventions.map((intervention, index) => (
              <li key={index} className="border-b py-2">
                <div className="flex justify-between items-center">
                  <div>
                    <p><strong>Date:</strong> {intervention.date || "Non sp√©cifi√©e"}</p>
                    <div dangerouslySetInnerHTML={{ __html: intervention.texte }} />
                  </div>
                  <div className="flex space-x-2">
                    <button
                      className="text-yellow-500 hover:underline"
                      onClick={() => handleEditIntervention(index)}
                    >
                      ‚úèÔ∏è
                    </button>
                    <button
                      className="text-red-500 hover:underline"
                      onClick={() => handleDeleteIntervention(index)}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        ) : (
          <p className="text-gray-500">Aucune intervention enregistr√©e.</p>
        )}
      </div>
    </div>
  );
};

export default PatientInterventions;
import React, { useState } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientObjectives = ({ motif, updateMotif }) => {
  const [selectedLongTermObjective, setSelectedLongTermObjective] = useState(null);
  const [newLongTermObjective, setNewLongTermObjective] = useState({
    titre: "",
  });
  const [newShortTermObjective, setNewShortTermObjective] = useState({
    titre: "",
    dateDebut: "",
    dateFin: "",
    description: "",
    statut: "ouvert",
  });
  const [showShortTermForm, setShowShortTermForm] = useState(false);
  const [editingLongTermObjective, setEditingLongTermObjective] = useState(null);
  const [editingShortTermObjective, setEditingShortTermObjective] = useState(null);

  const handleSelectLongTermObjective = (objective) => {
    setSelectedLongTermObjective(objective);
    setShowShortTermForm(false);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewShortTermObjective((prev) => ({ ...prev, [name]: value }));
  };

  const handleLongTermInputChange = (e) => {
    const { name, value } = e.target;
    setNewLongTermObjective((prev) => ({ ...prev, [name]: value }));
  };

  const handleSaveShortTermObjective = async () => {
    if (!selectedLongTermObjective) return;

    const updatedMotif = {
      ...motif,
      objectifsCourtTerme: [
        ...(motif.objectifsCourtTerme || []),
        {
          ...newShortTermObjective,
          longTermObjectiveId: selectedLongTermObjective.id,
        },
      ],
    };

    try {
      await updateMotif(updatedMotif);
      setNewShortTermObjective({
        titre: "",
        dateDebut: "",
        dateFin: "",
        description: "",
        statut: "ouvert",
      });
      setShowShortTermForm(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de l'objectif √† court terme :", error);
    }
  };

  const handleSaveLongTermObjective = async () => {
    if (!newLongTermObjective.titre.trim()) return;

    const updatedMotif = {
      ...motif,
      objectifsLongTerme: [
        ...(motif.objectifsLongTerme || []),
        {
          ...newLongTermObjective,
          id: Date.now().toString(), // G√©n√©rer un ID unique pour l'objectif √† long terme
        },
      ],
    };

    try {
      await updateMotif(updatedMotif);
      setNewLongTermObjective({ titre: "" });
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de l'objectif √† long terme :", error);
    }
  };

  const handleEditLongTermObjective = (objective) => {
    setEditingLongTermObjective(objective);
    setNewLongTermObjective({ titre: objective.titre });
  };

  const handleSaveEditLongTermObjective = async () => {
    const updatedMotif = {
      ...motif,
      objectifsLongTerme: motif.objectifsLongTerme.map((obj) =>
        obj.id === editingLongTermObjective.id ? { ...obj, titre: newLongTermObjective.titre } : obj
      ),
    };

    try {
      await updateMotif(updatedMotif);
      setEditingLongTermObjective(null);
      setNewLongTermObjective({ titre: "" });
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de l'objectif √† long terme :", error);
    }
  };

  const handleDeleteLongTermObjective = async (objectiveId) => {
    const updatedMotif = {
      ...motif,
      objectifsLongTerme: motif.objectifsLongTerme.filter((obj) => obj.id !== objectiveId),
      objectifsCourtTerme: motif.objectifsCourtTerme.filter((obj) => obj.longTermObjectiveId !== objectiveId),
    };

    try {
      await updateMotif(updatedMotif);
      setSelectedLongTermObjective(null);
    } catch (error) {
      console.error("Erreur lors de la suppression de l'objectif √† long terme :", error);
    }
  };

  const handleEditShortTermObjective = (objective) => {
    setEditingShortTermObjective(objective);
    setNewShortTermObjective({
      titre: objective.titre,
      dateDebut: objective.dateDebut,
      dateFin: objective.dateFin,
      description: objective.description,
      statut: objective.statut,
    });
    setShowShortTermForm(true);
  };

  const handleSaveEditShortTermObjective = async () => {
    const updatedMotif = {
      ...motif,
      objectifsCourtTerme: motif.objectifsCourtTerme.map((obj) =>
        obj === editingShortTermObjective ? { ...newShortTermObjective, longTermObjectiveId: selectedLongTermObjective.id } : obj
      ),
    };

    try {
      await updateMotif(updatedMotif);
      setEditingShortTermObjective(null);
      setNewShortTermObjective({
        titre: "",
        dateDebut: "",
        dateFin: "",
        description: "",
        statut: "ouvert",
      });
      setShowShortTermForm(false);
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de l'objectif √† court terme :", error);
    }
  };

  const handleDeleteShortTermObjective = async (objective) => {
    const updatedMotif = {
      ...motif,
      objectifsCourtTerme: motif.objectifsCourtTerme.filter((obj) => obj !== objective),
    };

    try {
      await updateMotif(updatedMotif);
    } catch (error) {
      console.error("Erreur lors de la suppression de l'objectif √† court terme :", error);
    }
  };

  return (
    <div className="flex space-x-4">
      {/* Liste des objectifs √† long terme */}
      <div className="w-1/3 bg-gray-100 p-4 rounded-lg shadow">
        <h4 className="text-lg font-semibold mb-3">Objectifs Long Terme</h4>
        <div className="mb-4">
          <input
            type="text"
            placeholder="Titre de l'objectif √† long terme"
            value={newLongTermObjective.titre}
            onChange={handleLongTermInputChange}
            name="titre"
            className="w-full p-2 border rounded-lg mb-2"
          />
          {editingLongTermObjective ? (
            <>
              <button
                className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                onClick={handleSaveEditLongTermObjective}
              >
                Enregistrer
              </button>
              <button
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 ml-2"
                onClick={() => setEditingLongTermObjective(null)}
              >
                Annuler
              </button>
            </>
          ) : (
            <button
              className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
              onClick={handleSaveLongTermObjective}
            >
              Ajouter
            </button>
          )}
        </div>
        <ul className="space-y-2">
          {motif.objectifsLongTerme?.map((objective, index) => (
            <li
              key={index}
              className={`cursor-pointer p-2 rounded-lg ${
                selectedLongTermObjective?.id === objective.id ? "bg-blue-500 text-white" : "bg-gray-200"
              } hover:bg-blue-300`}
              onClick={() => handleSelectLongTermObjective(objective)}
            >
              <div className="flex justify-between items-center">
                <strong>{objective.titre}</strong>
                <div className="flex space-x-2">
                  <button
                    className="text-yellow-500 hover:underline"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleEditLongTermObjective(objective);
                    }}
                  >
                    ‚úèÔ∏è
                  </button>
                  <button
                    className="text-red-500 hover:underline"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteLongTermObjective(objective.id);
                    }}
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>
            </li>
          ))}
        </ul>
      </div>

      {/* Formulaire pour cr√©er un objectif √† court terme */}
      <div className="w-2/3 bg-white p-4 rounded-lg shadow">
        {selectedLongTermObjective ? (
          <>
            <div className="flex justify-between items-center mb-4">
              <h4 className="text-lg font-semibold">Objectifs √† Court Terme pour "{selectedLongTermObjective.titre}"</h4>
              <button
                className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
                onClick={() => {
                  setShowShortTermForm(true);
                  setEditingShortTermObjective(null);
                  setNewShortTermObjective({
                    titre: "",
                    dateDebut: "",
                    dateFin: "",
                    description: "",
                    statut: "ouvert",
                  });
                }}
              >
                Ajouter
              </button>
            </div>
            {showShortTermForm ? (
              <>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Titre :</label>
                  <input
                    type="text"
                    name="titre"
                    value={newShortTermObjective.titre}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Date D√©but :</label>
                  <input
                    type="date"
                    name="dateDebut"
                    value={newShortTermObjective.dateDebut}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Date Fin :</label>
                  <input
                    type="date"
                    name="dateFin"
                    value={newShortTermObjective.dateFin}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Description :</label>
                  <QuillEditor
                    value={newShortTermObjective.description}
                    onChange={(value) => handleInputChange({ target: { name: "description", value } })}
                    readOnly={false}
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Statut :</label>
                  <select
                    name="statut"
                    value={newShortTermObjective.statut}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  >
                    <option value="ouvert">Ouvert</option>
                    <option value="ferm√©">Ferm√©</option>
                  </select>
                </div>
                {editingShortTermObjective ? (
                  <>
                    <button
                      className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                      onClick={handleSaveEditShortTermObjective}
                    >
                      Enregistrer
                    </button>
                    <button
                      className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 ml-2"
                      onClick={() => {
                        setEditingShortTermObjective(null);
                        setShowShortTermForm(false);
                      }}
                    >
                      Annuler
                    </button>
                  </>
                ) : (
                  <button
                    className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                    onClick={handleSaveShortTermObjective}
                  >
                    Enregistrer
                  </button>
                )}
              </>
            ) : (
              <ul className="space-y-2">
                {motif.objectifsCourtTerme
                  ?.filter((obj) => obj.longTermObjectiveId === selectedLongTermObjective.id)
                  .map((objective, index) => (
                    <li key={index} className="p-2 rounded-lg bg-gray-200">
                      <div className="flex justify-between items-center">
                        <div>
                          <strong>{objective.titre}</strong>
                          <p>Date D√©but: {objective.dateDebut}</p>
                          <p>Date Fin: {objective.dateFin}</p>
                          <p>Description: <span dangerouslySetInnerHTML={{ __html: objective.description }} /></p>
                          <p>Statut: {objective.statut}</p>
                        </div>
                        <div className="flex space-x-2">
                          <button
                            className="text-yellow-500 hover:underline"
                            onClick={() => handleEditShortTermObjective(objective)}
                          >
                            ‚úèÔ∏è
                          </button>
                          <button
                            className="text-red-500 hover:underline"
                            onClick={() => handleDeleteShortTermObjective(objective)}
                          >
                            üóëÔ∏è
                          </button>
                        </div>
                      </div>
                    </li>
                  ))}
              </ul>
            )}
          </>
        ) : (
          <p className="text-gray-500">S√©lectionnez un objectif √† long terme pour cr√©er un objectif √† court terme.</p>
        )}
      </div>
    </div>
  );
};

export default PatientObjectives;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";
import { updateMotifIntervention } from "../../../firebase/patientsFirestore.js"; // üîπ V√©rifie que cet import est correct

const PatientSituation = ({ motif, patientId }) => {
  const [editing, setEditing] = useState(false);
  const [newSituation, setNewSituation] = useState({
    personne: motif?.situationPersonnelle?.personne || "",
    occupation: motif?.situationPersonnelle?.occupation || "",
    environnement: motif?.situationPersonnelle?.environnement || "",
  });

  useEffect(() => {
    setNewSituation({
      personne: motif?.situationPersonnelle?.personne || "",
      occupation: motif?.situationPersonnelle?.occupation || "",
      environnement: motif?.situationPersonnelle?.environnement || "",
    });
  }, [motif]);

  // ‚úÖ Active le mode √©dition
  const handleEdit = () => {
    setEditing(true);
  };

  // ‚ùå Annule l'√©dition et restaure les valeurs initiales
  const handleCancel = () => {
    setEditing(false);
    setNewSituation({
      personne: motif?.situationPersonnelle?.personne || "",
      occupation: motif?.situationPersonnelle?.occupation || "",
      environnement: motif?.situationPersonnelle?.environnement || "",
    });
  };

  // ‚úèÔ∏è Met √† jour localement les valeurs pendant la saisie
  const handleInputChange = (field, value) => {
    setNewSituation((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    if (!motif || !patientId) {
      console.error("‚ùå patientId ou motif est undefined !");
      return;
    }
  
    const updatedMotif = {
      ...motif,
      situationPersonnelle: {
        personne: newSituation.personne || "",
        occupation: newSituation.occupation || "",
        environnement: newSituation.environnement || "",
      },
    };
  
    console.log("üì§ Tentative d'enregistrement :", patientId, motif.id, updatedMotif);
  
    try {
      const success = await updateMotifIntervention(patientId, motif.id, updatedMotif);
  
      if (success) {
        console.log("‚úÖ Mise √† jour r√©ussie !");
        
        // üõë Ajout : Mise √† jour du `state` pour rafra√Æchir imm√©diatement l'affichage
        setNewSituation(updatedMotif.situationPersonnelle);
        
        // üõë Ajout : Mise √† jour du motif actuel
        motif.situationPersonnelle = updatedMotif.situationPersonnelle;
  
        setEditing(false);
      } else {
        console.error("‚ùå Mise √† jour √©chou√©e.");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour :", error);
    }
  };
  

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-lg font-semibold mb-4">Situation Personnelle</h4>

      {/* ‚úÖ √âditeur pour "Personne" */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Personne :</label>
        <QuillEditor
          value={newSituation.personne}
          onChange={(value) => handleInputChange("personne", value)}
          readOnly={!editing}
        />
      </div>

      {/* ‚úÖ √âditeur pour "Occupation" */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Occupation :</label>
        <QuillEditor
          value={newSituation.occupation}
          onChange={(value) => handleInputChange("occupation", value)}
          readOnly={!editing}
        />
      </div>

      {/* ‚úÖ √âditeur pour "Environnement" */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Environnement :</label>
        <QuillEditor
          value={newSituation.environnement}
          onChange={(value) => handleInputChange("environnement", value)}
          readOnly={!editing}
        />
      </div>

      {/* ‚úÖ Boutons Modifier / Enregistrer / Annuler */}
      <div className="flex space-x-2">
        {!editing ? (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={handleEdit}>
            Modifier
          </button>
        ) : (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default PatientSituation;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientSummary = ({ motif, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [synthese, setSynthese] = useState(motif?.synthese || "");

  useEffect(() => {
    setSynthese(motif?.synthese || "");
  }, [motif]);

  const handleSave = async () => {
    if (!motif) return;

    const updatedMotif = {
      ...motif,
      synthese,
    };

    try {
      await updateMotif(updatedMotif);
      setEditing(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de la synth√®se :", error);
    }
  };

  const handleCancel = () => {
    setEditing(false);
    setSynthese(motif?.synthese || "");
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg h-full">
      <h4 className="text-md font-semibold mb-4">Synth√®se</h4>

      <div className="border rounded-lg p-2">
        <QuillEditor
          value={synthese}
          onChange={setSynthese}
          readOnly={!editing}
          className="min-h-[150px] max-h-64 overflow-auto"
        />
      </div>

      <div className="flex space-x-2 mt-4">
        {editing ? (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        ) : (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => setEditing(true)}>
            Modifier
          </button>
        )}
      </div>
    </div>
  );
};

export default PatientSummary;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";
import { updateMotifIntervention } from "../../../firebase/patientsFirestore.js";

const PatientTherapeutic = ({ motif, patientId, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [therapeuticData, setTherapeuticData] = useState({
    assesments: motif?.perspectiveTherapeutique?.assesments || "",
    syntheseEvaluation: motif?.perspectiveTherapeutique?.syntheseEvaluation || "",
    restrictionsSouhaits: motif?.perspectiveTherapeutique?.restrictionsSouhaits || "",
    diagnosticOccupationnel: motif?.perspectiveTherapeutique?.diagnosticOccupationnel || "",
  });

  useEffect(() => {
    setTherapeuticData({
      assesments: motif?.perspectiveTherapeutique?.assesments || "",
      syntheseEvaluation: motif?.perspectiveTherapeutique?.syntheseEvaluation || "",
      restrictionsSouhaits: motif?.perspectiveTherapeutique?.restrictionsSouhaits || "",
      diagnosticOccupationnel: motif?.perspectiveTherapeutique?.diagnosticOccupationnel || "",
    });
  }, [motif]);

  const handleEdit = () => {
    setEditing(true);
  };

  const handleCancel = () => {
    setEditing(false);
    setTherapeuticData({
      assesments: motif?.perspectiveTherapeutique?.assesments || "",
      syntheseEvaluation: motif?.perspectiveTherapeutique?.syntheseEvaluation || "",
      restrictionsSouhaits: motif?.perspectiveTherapeutique?.restrictionsSouhaits || "",
      diagnosticOccupationnel: motif?.perspectiveTherapeutique?.diagnosticOccupationnel || "",
    });
  };

  const handleInputChange = (field, value) => {
    setTherapeuticData((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    if (!motif || !patientId) {
      console.error("‚ùå patientId ou motif est undefined !");
      return;
    }

    const updatedMotif = {
      ...motif,
      perspectiveTherapeutique: {
        assesments: therapeuticData.assesments || "",
        syntheseEvaluation: therapeuticData.syntheseEvaluation || "",
        restrictionsSouhaits: therapeuticData.restrictionsSouhaits || "",
        diagnosticOccupationnel: therapeuticData.diagnosticOccupationnel || "",
      },
    };

    console.log("üì§ Sauvegarde des donn√©es th√©rapeutiques :", patientId, updatedMotif);

    try {
      await updateMotifIntervention(patientId, motif.id, updatedMotif);
      console.log("‚úÖ Mise √† jour r√©ussie !");
      setEditing(false);
      updateMotif(updatedMotif); // Update the parent component's state
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour :", error);
    }
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-lg font-semibold mb-4">Perspective Th√©rapeutique</h4>

      <div className="mb-4 p-3 border border-gray-300 bg-gray-100 rounded-lg">
        <h5 className="text-md font-semibold text-gray-700">Batteries Code CIF</h5>
        <p className="text-gray-600">{therapeuticData.assesments || "Non d√©fini"}</p>
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Synth√®se de l'√©valuation :</label>
        <QuillEditor
          value={therapeuticData.syntheseEvaluation}
          onChange={(value) => handleInputChange("syntheseEvaluation", value)}
          readOnly={!editing}
        />
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Restrictions de participation :</label>
        <QuillEditor
          value={therapeuticData.restrictionsSouhaits}
          onChange={(value) => handleInputChange("restrictionsSouhaits", value)}
          readOnly={!editing}
        />
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Diagnostic Occupationnel :</label>
        <QuillEditor
          value={therapeuticData.diagnosticOccupationnel}
          onChange={(value) => handleInputChange("diagnosticOccupationnel", value)}
          readOnly={!editing}
        />
      </div>

      <div className="flex space-x-2">
        {!editing ? (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={handleEdit}>
            Modifier
          </button>
        ) : (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default PatientTherapeutic;
import React, { useEffect, useState } from 'react'
import { Link, useNavigate } from 'react-router-dom'

const Header = () => {
  const [therapist, setTherapist] = useState(null)
  const [menuOpen, setMenuOpen] = useState(false)
  const navigate = useNavigate()

  useEffect(() => {
    fetch('http://localhost:3001/auth/me', {
      credentials: 'include'
    })
      .then(res => res.ok ? res.json() : null)
      .then(data => {
        console.log(data)
        if (data) setTherapist(data)
      })
      .catch(() => {})
  }, [])

  const handleLogout = async () => {
    await fetch('http://localhost:3001/auth/logout', {
      method: 'POST',
      credentials: 'include'
    })
    navigate('/login')
  }

  return (
    <nav className="bg-[#A294F9] p-4 shadow-lg">
      <div className="container mx-auto flex justify-between items-center relative">
        <Link to="/" className="text-white text-3xl font-bold">
          ERGOGO
        </Link>

        <ul className="flex space-x-8 mx-auto">
          <li><Link to="/calendrier" className="text-white text-3xl hover:scale-125 transition">Calendrier</Link></li>
          <li><Link to="/patients" className="text-white text-3xl hover:scale-125 transition">Patients</Link></li>
          <li><Link to="/activities" className="text-white text-3xl hover:scale-125 transition">Activit√©s</Link></li>
          <li><Link to="/reports" className="text-white text-3xl hover:scale-125 transition">Rapports</Link></li>
        </ul>

        {/* Nom du th√©rapeute + menu de d√©connexion */}
        {therapist && (
          <div className="relative">
            <button
              onClick={() => setMenuOpen(!menuOpen)}
              className="text-white font-semibold px-4 py-2 rounded hover:bg-[#8d7cf9] transition"
            >
              {therapist.name}
              
            </button>

            {menuOpen && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded shadow-lg z-10">
                <button
                  onClick={handleLogout}
                  className="block w-full text-left px-4 py-2 text-gray-800 hover:bg-gray-100"
                >
                  Se d√©connecter
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </nav>
  )
}

export default Header
import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { getPatient, updatePatient, deletePatient } from "../api/patientAPI.js";
import PatientDetailsTab from "./PatientDetails/PatientDetailsTab.js";
import PatientNotesTab from "./PatientDetails/PatientNotesTab.js";
import PatientDataTab from "./PatientDetails/PatientDataTab.js";
import PatientFileTab from "./PatientDetails/PatientFileTab.js";

const PatientDetails = () => {
  const { patientId } = useParams();
  const [patient, setPatient] = useState(null);
  const [activeTab, setActiveTab] = useState("details");
  const [updatedPatient, setUpdatedPatient] = useState({});
  const [isEditing, setIsEditing] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getPatient(patientId);
        setPatient(data);
        setUpdatedPatient(data);
      } catch (error) {
        console.error("Erreur de chargement du patient :", error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [patientId]);

  const handleDelete = async () => {
    const confirmed = window.confirm("Supprimer ce patient ?");
    if (!confirmed) return;
    try {
      await deletePatient(patientId);
      navigate("/patients");
    } catch (err) {
      console.error("Erreur suppression :", err);
    }
  };

  const handleUpdate = async () => {
    try {
      await updatePatient(patientId, updatedPatient);
      const refreshed = await getPatient(patientId);
      setPatient(refreshed);
      setIsEditing(false);
    } catch (err) {
      console.error("Erreur mise √† jour :", err);
    }
  };

  const handleChange = (e) => {
    setUpdatedPatient({ ...updatedPatient, [e.target.name]: e.target.value });
  };

  if (loading) return <div>Chargement...</div>;
  if (!patient) return <div>Patient introuvable</div>;

  return (
    <div className="p-4 bg-white shadow-lg rounded-xl w-full h-full">
      <h2 className="text-xl font-bold">{patient.lastName} {patient.firstName}</h2>
      <button className="bg-red-500 text-white px-2 py-1 rounded-lg hover:bg-red-600 text-sm" onClick={handleDelete}>
        Supprimer
      </button>

      <div className="flex space-x-4 mb-6">
        {["details", "carnet", "donnees", "dossier"].map((tab) => (
          <button
            key={tab}
            className={`py-2 px-4 rounded-lg ${activeTab === tab ? "bg-blue-500 text-white" : "bg-gray-200"}`}
            onClick={() => setActiveTab(tab)}
          >
            {tab === "details" ? "D√©tails" : tab === "carnet" ? "Carnet de notes" : tab === "donnees" ? "Donn√©es patient" : "Dossier patient"}
          </button>
        ))}
      </div>
      


      <div className="transition-all duration-500 ease-in-out h-full overflow-y-auto">
        {activeTab === "details" && <PatientDetailsTab patient={patient} isEditing={isEditing} updatedPatient={updatedPatient} handleChange={handleChange} handleUpdate={handleUpdate} setIsEditing={setIsEditing} />}
        {activeTab === "carnet" && <PatientNotesTab patient={patient} />}
        {activeTab === "donnees" && <PatientDataTab patient={patient} />}
        {activeTab === "dossier" && <PatientFileTab patient={patient} />}
      </div>
    </div>
  );
};

export default PatientDetails;
import React from "react";
import { Outlet } from "react-router-dom";
import PatientSidebar from "../components/PatientSidebar.js";

const PatientLayout = () => {
  return (
    <div className="flex w-full h-full">
      {/* Sidebar avec liste des patients */}
      <div className="flex-shrink-0 w-64 h-full bg-gray-100 p-4 shadow-lg overflow-y-auto custom-scrollbar">
        <PatientSidebar />
      </div>

      {/* Contenu dynamique (d√©tails, notes, donn√©es, dossier, etc.) */}
      <div className="flex-grow p-6 overflow-hidden">
        <Outlet />
      </div>
    </div>
  );
};

export default PatientLayout;
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { getAllPatients } from "../api/patientAPI.js";
import { motion } from "framer-motion";

const Patients = () => {
  const [patients, setPatients] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchPatients = async () => {
      try {
        const patientsList = await getAllPatients();
        setPatients(patientsList);
      } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des patients :", error);
      }
    };

    fetchPatients();
  }, []);

  const goToPatientDetails = (patientId) => {
    navigate(`/patient/${patientId}`);
  };

  const goToAddPatientPage = () => {
    navigate("/add-patient");
  };

  return (
    <motion.div 
      className="p-4 bg-white shadow-lg rounded-xl w-full max-w-4xl h-[80vh] mt-4 overflow-y-auto custom-scrollbar"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0, transition: { duration: 0.3 } }}
    >
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">Liste des Patients</h2>
        <button 
          className="bg-[#A294F9] text-white px-4 py-2 rounded-lg hover:bg-[#8a7cf9]"
          onClick={goToAddPatientPage}
        >
          Ajouter un patient
        </button>
      </div>

      <ul className="space-y-2">
        {patients.map(patient => (
          <motion.li
            key={patient.id}
            className="cursor-pointer p-2 rounded-lg bg-gray-100 hover:bg-gray-200 flex justify-between items-center"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => goToPatientDetails(patient.id)}
          >
            <span>{patient.lastName} {patient.firstName}</span>
          </motion.li>
        ))}
      </ul>
    </motion.div>
  );
};

export default Patients;
import { useEffect, useState } from "react";
import { useNavigate, useParams, useLocation } from "react-router-dom";
import { getAllPatients } from "../api/patientAPI.js";

const PatientSidebar = () => {
  const [patients, setPatients] = useState([]);
  const { patientId } = useParams();
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    const fetchPatients = async () => {
      try {
        const patientsList = await getAllPatients();
        setPatients(patientsList);
      } catch (err) {
        console.error("Erreur chargement patients sidebar", err);
      }
    };
    fetchPatients();
  }, []);

  const handlePatientChange = (newPatientId) => {
    if (!newPatientId || newPatientId === parseInt(patientId)) return;
    const currentTab = location.pathname.split("/")[3] || "";
    navigate(`/patient/${newPatientId}/${currentTab}`);
  };

  return (
    <div className="h-full">
      <h3 className="text-lg font-bold mb-4">Liste des patients</h3>
      <ul className="space-y-2 h-96 overflow-y-auto custom-scrollbar">
        {patients.map((patient) => (
          <li
            key={patient.id}
            className={`p-2 rounded-lg cursor-pointer ${
              patient.id === parseInt(patientId) ? "bg-blue-500 text-white" : "bg-gray-200 hover:bg-blue-300"
            }`}
            onClick={() => handlePatientChange(patient.id)}
          >
            {patient.firstName} {patient.lastName}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default PatientSidebar;
import React, { useEffect, useRef } from "react";
import Quill from "quill";
import "quill/dist/quill.snow.css";

const QuillEditor = ({ value, onChange, readOnly = false }) => {
  const editorRef = useRef(null);
  const quillInstance = useRef(null);

  useEffect(() => {
    if (!editorRef.current) return;

    // ‚ö†Ô∏è Supprime l'ancienne instance de Quill avant de recr√©er
    if (quillInstance.current) {
      quillInstance.current.root.innerHTML = value || "";
      quillInstance.current.enable(!readOnly); // Active/d√©sactive l'√©dition
      return;
    }

    // ‚úÖ Cr√©ation de Quill avec une vraie barre d'outils
    quillInstance.current = new Quill(editorRef.current, {
      theme: "snow",
      readOnly: readOnly,
      modules: {
        toolbar: [
          [{ header: [1, 2, 3, false] }],
          ["bold", "italic", "underline", "strike"],
          [{ color: [] }, { background: [] }],
          [{ list: "ordered" }, { list: "bullet" }],
          [{ align: [] }],
          ["blockquote", "code-block"],
          ["link", "image", "video"],
          ["clean"],
        ],
      },
    });

    // ‚úÖ G√©rer les changements de texte
    quillInstance.current.on("text-change", () => {
      const newContent = quillInstance.current.root.innerHTML;
      onChange(newContent);
    });

    // ‚úÖ Charger la valeur initiale
    quillInstance.current.root.innerHTML = value || "";

  }, [readOnly]);

  // ‚úÖ Mettre √† jour Quill si `value` change
  useEffect(() => {
    if (quillInstance.current && quillInstance.current.root.innerHTML !== value) {
      quillInstance.current.root.innerHTML = value || "";
    }
  }, [value]);

  return <div className="quill-editor" ref={editorRef} />;
};

export default QuillEditor;
import React, { useState } from 'react';
import { DndContext, closestCenter } from '@dnd-kit/core';
import { arrayMove, SortableContext, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import axios from 'axios';

const sectionLabels = {
  patientInfo: 'Informations patient',
  notes: 'Notes du th√©rapeute',
  diagnostic: 'Diagnostics',
  synthese: 'Synth√®ses',
  interventions: 'Interventions',
  objectifs: 'Objectifs th√©rapeutiques'
};

const initialSections = Object.keys(sectionLabels);

const SortableItem = ({ id, enabled, onToggle }) => {
  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id });
  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
    padding: '10px',
    marginBottom: '8px',
    background: '#f3f4f6',
    borderRadius: '6px',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center'
  };

  return (
    <div ref={setNodeRef} style={style} {...attributes} {...listeners}>
      <span>{sectionLabels[id]}</span>
      <input type="checkbox" checked={enabled} onChange={() => onToggle(id)} />
    </div>
  );
};

const ReportBuilder = ({ patientId }) => {
  const [sections, setSections] = useState(initialSections);
  const [enabledSections, setEnabledSections] = useState(new Set(initialSections));

  const handleToggle = (key) => {
    const updated = new Set(enabledSections);
    updated.has(key) ? updated.delete(key) : updated.add(key);
    setEnabledSections(updated);
  };

  const handleDragEnd = (event) => {
    const { active, over } = event;
    if (active.id !== over.id) {
      const oldIndex = sections.indexOf(active.id);
      const newIndex = sections.indexOf(over.id);
      setSections(arrayMove(sections, oldIndex, newIndex));
    }
  };

  const handleGenerate = async () => {
    const selected = sections.filter((s) => enabledSections.has(s));
    const res = await axios.post(
      `http://localhost:3001/reports/${patientId}`,
      { selectedSections: selected },
      { responseType: 'blob', withCredentials: true }
    );

    const blob = new Blob([res.data], { type: 'application/pdf' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'rapport_patient.pdf');
    document.body.appendChild(link);
    link.click();
    link.remove();
  };

  return (
    <div className="p-4 bg-white rounded-xl shadow-xl">
      <h2 className="text-xl font-semibold mb-4">üßæ G√©n√©rer un rapport patient</h2>
      <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
        <SortableContext items={sections} strategy={verticalListSortingStrategy}>
          {sections.map((id) => (
            <SortableItem
              key={id}
              id={id}
              enabled={enabledSections.has(id)}
              onToggle={handleToggle}
            />
          ))}
        </SortableContext>
      </DndContext>
      <button
        onClick={handleGenerate}
        className="mt-6 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
      >
        G√©n√©rer le PDF
      </button>
    </div>
  );
};

export default ReportBuilder;
import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'

export default function RequireAuth({ children }) {
  const [loading, setLoading] = useState(true)
  const navigate = useNavigate()

  useEffect(() => {
    fetch('http://localhost:3001/auth/me', {
      credentials: 'include'
    })
      .then(res => {
        if (!res.ok) navigate('/login')
        else setLoading(false)
      })
      .catch(() => navigate('/login'))
  }, [navigate])

  if (loading) return <div>Chargement...</div>

  return children
}
// src/components/Toast.js
import React from 'react';

const Toast = ({ message }) => {
  if (!message) return null;

  return (
    <div className="fixed bottom-4 right-4 bg-green-600 text-white px-4 py-2 rounded shadow z-50 animate-fade-in-out">
      {message}
    </div>
  );
};

export default Toast;
import React, { useState } from 'react';
import { FiMoreVertical } from 'react-icons/fi';
import ActivityFileViewer from './ActivityFileViewer.js';

const ActivityCard = ({ activity, onEdit, onDelete, onOpen }) => {
  const [menuOpen, setMenuOpen] = useState(false);

  return (
    <div
      className="relative bg-white rounded shadow-sm p-4 border hover:shadow-md transition cursor-pointer"
      onClick={() => onOpen(activity)}
    >
      {/* Menu bouton 3 points */}
      <div className="absolute top-2 right-2 z-20" onClick={(e) => e.stopPropagation()}>
        <button
          onClick={() => setMenuOpen(prev => !prev)}
          className="text-gray-500 hover:text-gray-800"
        >
          <FiMoreVertical size={18} />
        </button>
        {menuOpen && (
          <div className="absolute right-0 mt-1 bg-white border rounded shadow w-32 z-30 animate-fade-in">
            <button
              onClick={() => { setMenuOpen(false); onEdit(); }}
              className="block w-full text-left px-4 py-2 text-sm hover:bg-purple-100"
            >
              Modifier
            </button>
            <button
              onClick={() => { setMenuOpen(false); onDelete(); }}
              className="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50"
            >
              Supprimer
            </button>
          </div>
        )}
      </div>

      <h2 className="text-xl font-bold text-purple-700">{activity.name}</h2>
      <p className="text-gray-600 text-sm mt-1 whitespace-pre-line">{activity.description}</p>

      {activity.link && (
        <a
          href={activity.link}
          className="text-purple-600 text-sm underline mt-2 inline-block"
          target="_blank"
          rel="noopener noreferrer"
          onClick={e => e.stopPropagation()}
        >
          Lien externe
        </a>
      )}

      <div className="mt-3">
        <p className="text-sm font-semibold text-gray-700">Objectifs :</p>
        {activity.objectives?.length ? (
          <div className="flex flex-wrap gap-2 mt-1">
            {activity.objectives.map(o => (
              <span
                key={o.objective.id}
                className="text-xs px-2 py-1 bg-purple-100 text-purple-800 rounded-full"
              >
                {o.objective.name}
              </span>
            ))}
          </div>
        ) : (
          <p className="text-sm text-gray-400">Aucun</p>
        )}
      </div>

      <div className="mt-3">
        <p className="text-sm font-semibold text-gray-700">Fichiers :</p>
        {activity.files?.length ? activity.files.map(file => (
          <ActivityFileViewer key={file.id} file={file} />
        )) : <p className="text-sm text-gray-400">Aucun fichier</p>}
      </div>
    </div>
  );
};

export default ActivityCard;
import React from 'react';

const ActivityFileViewer = ({ file }) => {
  const isImage = file.fileType.startsWith('image/');
  const isPdf = file.fileType === 'application/pdf';
  const isAudio = file.fileType.startsWith('audio/');
  const isVideo = file.fileType.startsWith('video/');

  return (
    <div className="mt-2">
      <p className="text-sm font-medium text-gray-700">{file.fileName}</p>
      {isImage && <img src={file.fileUrl} alt={file.fileName} className="max-w-full h-auto" />}
      {isPdf && <iframe src={file.fileUrl} title={file.fileName} className="w-full h-64" />}
      {isAudio && <audio controls src={file.fileUrl} className="w-full" />}
      {isVideo && <video controls src={file.fileUrl} className="w-full" />}
    </div>
  );
};

export default ActivityFileViewer;
import React, { useEffect, useState } from 'react';
import { getGoals } from '../../api/goalAPI.js';

const ActivityFilters = ({ filters, setFilters, onCreated }) => {
  const [goals, setGoals] = useState([]);
  const [error, setError] = useState('');
  const [fade, setFade] = useState(false);
  const [removingIndex, setRemovingIndex] = useState(null);

  const loadGoals = () => {
    getGoals().then(res => setGoals(res.data));
  };

  useEffect(() => {
    loadGoals();
  }, [onCreated]);

  const handleChangeObjective = (index, value) => {
    const updated = [...filters.objectives];
    updated[index] = Number(value);
    setFilters({ ...filters, objectives: updated });
    setError('');
  };

  const handleAddObjectiveField = () => {
    if (filters.objectives.includes(null)) {
      setError("Veuillez remplir l'objectif pr√©c√©dent avant d'en ajouter un autre.");
      setFade(false);
      setTimeout(() => setFade(true), 2500);
      setTimeout(() => setError(''), 3000);
      return;
    }
    setFilters({ ...filters, objectives: [...filters.objectives, null] });
    setError('');
    setFade(false);
  };

  const handleRemoveObjective = (index) => {
    setRemovingIndex(index);
    setTimeout(() => {
      const updated = [...filters.objectives];
      updated.splice(index, 1);
      setFilters({ ...filters, objectives: updated });
      setRemovingIndex(null);
    }, 300); // Dur√©e de l‚Äôanimation
    setError('');
  };

  return (
    <div className="flex flex-col gap-4 transition-all duration-500 ease-in-out">
      {/* Nom & Description */}
      <div className="flex flex-col gap-2">
        <input
          type="text"
          placeholder="Rechercher par nom"
          className="border px-3 py-2 rounded w-full text-sm"
          value={filters.name}
          onChange={(e) => setFilters({ ...filters, name: e.target.value })}
        />
        <input
          type="text"
          placeholder="Rechercher par description"
          className="border px-3 py-2 rounded w-full text-sm"
          value={filters.description}
          onChange={(e) => setFilters({ ...filters, description: e.target.value })}
        />
      </div>

      {/* Objectifs */}
      <div>
        <label className="text-sm font-semibold text-gray-700 mb-1 block">
          Filtrer par objectifs :
        </label>
        <div className="flex flex-col gap-2">
          {filters.objectives.map((id, index) => (
            <div
              key={index}
              className={`flex items-center gap-2 ${
                removingIndex === index ? 'animate-fade-out' : 'animate-fade-in'
              }`}
            >
              <select
                className="border px-2 py-1 rounded flex-grow text-sm"
                value={id || ''}
                onChange={(e) => handleChangeObjective(index, e.target.value)}
              >
                <option value="">Objectif {index + 1}</option>
                {goals.map(goal => (
                  <option key={goal.id} value={goal.id}>
                    {goal.name}
                  </option>
                ))}
              </select>
              <button
                onClick={() => handleRemoveObjective(index)}
                className="text-red-500 text-lg hover:text-red-700"
                title="Supprimer ce filtre"
              >
                ‚àí
              </button>
            </div>
          ))}

          {/* Message d'erreur anim√© */}
          {error && (
            <div
              className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 mt-1 transition-opacity duration-500 ease-in-out animate-fade-in ${
                fade ? 'opacity-0' : 'opacity-100'
              }`}
            >
              {error}
            </div>
          )}

          <button
            onClick={handleAddObjectiveField}
            type="button"
            className="text-blue-600 text-sm hover:underline mt-1"
          >
            + Ajouter un objectif
          </button>
        </div>
      </div>
    </div>
  );
};

export default ActivityFilters;
import React, { useState, useEffect } from 'react';
import Select from 'react-select';
import { createActivity, uploadFileToActivity } from '../../api/activityAPI.js';
import { getGoals, createGoal } from '../../api/goalAPI.js';

const ActivityForm = ({ onCreated, showToast }) => {
  const [visible, setVisible] = useState(false);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [link, setLink] = useState('');
  const [selectedGoals, setSelectedGoals] = useState([]);
  const [goals, setGoals] = useState([]);
  const [files, setFiles] = useState([]);
  const [newGoalName, setNewGoalName] = useState('');
  const [errors, setErrors] = useState({});
  const [fadeErrors, setFadeErrors] = useState(false);
  const [goalError, setGoalError] = useState('');
  const [fadeGoalError, setFadeGoalError] = useState(false);

  const loadGoals = () => {
    getGoals().then(res => setGoals(res.data));
  };

  useEffect(() => {
    loadGoals();
  }, []);

  const goalOptions = goals.map(goal => ({ value: goal.id, label: goal.name }));

  const handleFileChange = (e) => setFiles([...e.target.files]);

  const validate = () => {
    const newErrors = {};
    if (!name.trim()) newErrors.name = 'Le nom est requis.';
    if (selectedGoals.length === 0) newErrors.goals = 'Veuillez s√©lectionner au moins un objectif.';
    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const validationErrors = validate();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      setFadeErrors(false);
      setTimeout(() => setFadeErrors(true), 2500);
      setTimeout(() => setErrors({}), 3000);
      return;
    }

    const newActivity = await createActivity({
      therapistId: 1,
      name,
      description,
      link,
      objectiveIds: selectedGoals.map(g => g.value),
    });

    const activityId = newActivity.data.id;

    const uploads = files.map((file) => {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = async () => {
          await uploadFileToActivity(activityId, {
            fileUrl: reader.result,
            fileType: file.type,
            fileName: file.name,
          });
          resolve();
        };
        reader.readAsDataURL(file);
      });
    });

    await Promise.all(uploads);

    showToast && showToast("Activit√© ajout√©e !");
    onCreated();

    // Reset
    setName('');
    setDescription('');
    setLink('');
    setSelectedGoals([]);
    setFiles([]);
    setVisible(false);
    setErrors({});
  };

  const handleAddGoal = async () => {
    if (!newGoalName.trim()) {
      setGoalError("Veuillez √©crire un objectif avant de l‚Äôajouter.");
      setFadeGoalError(false);
      setTimeout(() => setFadeGoalError(true), 2500);
      setTimeout(() => setGoalError(''), 3000);
      return;
    }
    await createGoal({ name: newGoalName });
    setNewGoalName('');
    loadGoals();
    onCreated();
    showToast && showToast("Objectif ajout√© !");
  };

  if (!visible) {
    return (
      <div className="flex gap-4 flex-wrap">
        <div className="flex flex-col gap-1">
          <div className="flex items-center gap-2">
            <input
              type="text"
              value={newGoalName}
              onChange={(e) => setNewGoalName(e.target.value)}
              placeholder="Nouvel objectif"
              className="border px-2 py-1 rounded text-sm shadow-sm"
            />
            <button
              onClick={handleAddGoal}
              className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm transition"
            >
              + Objectif
            </button>
          </div>
          {goalError && (
            <div
              className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${
                fadeGoalError ? 'opacity-0' : 'opacity-100'
              }`}
            >
              {goalError}
            </div>
          )}
        </div>

        <button
          onClick={() => setVisible(true)}
          className="bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded text-sm transition"
        >
          + Ajouter une activit√©
        </button>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="bg-white p-6 rounded border shadow space-y-4 animate-fade-in w-full">
      <div className="flex flex-col gap-1">
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Nom de l‚Äôactivit√©"
          className="w-full border px-3 py-2 rounded"
        />
        {errors.name && (
          <div className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${fadeErrors ? 'opacity-0' : 'opacity-100'}`}>
            {errors.name}
          </div>
        )}
      </div>

      <textarea
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        placeholder="Description"
        className="w-full border px-3 py-2 rounded"
        rows={3}
      />
      <input
        type="text"
        value={link}
        onChange={(e) => setLink(e.target.value)}
        placeholder="Lien externe"
        className="w-full border px-3 py-2 rounded"
      />

      <div className="flex flex-col gap-1">
        <label className="block text-sm font-medium text-gray-700">Objectifs li√©s :</label>
        <Select
          options={goalOptions}
          isMulti
          value={selectedGoals}
          onChange={setSelectedGoals}
          className="text-sm"
          placeholder="S√©lectionner des objectifs"
        />
        {errors.goals && (
          <div className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${fadeErrors ? 'opacity-0' : 'opacity-100'}`}>
            {errors.goals}
          </div>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Fichiers :</label>
        <input type="file" multiple onChange={handleFileChange} />
      </div>

      <div className="flex gap-4 pt-2">
        <button
          type="submit"
          className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition"
        >
          Cr√©er
        </button>
        <button
          type="button"
          onClick={() => setVisible(false)}
          className="text-gray-600 hover:underline"
        >
          Annuler
        </button>
      </div>
    </form>
  );
};

export default ActivityForm;
import React, { useEffect, useState } from 'react';
import { searchActivities, deleteActivity } from '../../api/activityAPI.js';
import ActivityCard from './ActivityCard.js';
import EditActivityForm from './EditActivityForm.js';
import FullscreenActivityView from './FullscreenActivityView.js';

const ActivityList = ({ filters, refresh }) => {
  const [activities, setActivities] = useState([]);
  const [editingActivity, setEditingActivity] = useState(null);
  const [fullscreenActivity, setFullscreenActivity] = useState(null); // üëà NEW

  useEffect(() => {
    searchActivities({
      name: filters.name || '',
      description: filters.description || '',
      objectives: filters.objectives?.join(',') || '',
    }).then(res => setActivities(res.data));
  }, [filters, refresh]);

  const handleDelete = async (id) => {
    if (window.confirm("Supprimer cette activit√© ?")) {
      await deleteActivity(id);
      setActivities(prev => prev.filter(a => a.id !== id));
    }
  };

  const handleUpdated = () => {
    setEditingActivity(null);
    searchActivities({
      name: filters.name || '',
      description: filters.description || '',
      objectives: filters.objectives?.join(',') || '',
    }).then(res => setActivities(res.data));
  };

  return (
    <>
      {editingActivity ? (
        <div className="mb-6">
          <EditActivityForm
            activity={editingActivity}
            onClose={() => setEditingActivity(null)}
            onUpdated={handleUpdated}
          />
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
          {activities.map(activity => (
            <ActivityCard
              key={activity.id}
              activity={activity}
              onEdit={() => setEditingActivity(activity)}
              onDelete={() => handleDelete(activity.id)}
              onOpen={setFullscreenActivity} // üëà NEW
            />
          ))}
        </div>
      )}

      {/* Vue plein √©cran si s√©lectionn√©e */}
      {fullscreenActivity && (
        <FullscreenActivityView
          activity={fullscreenActivity}
          onClose={() => setFullscreenActivity(null)}
        />
      )}
    </>
  );
};

export default ActivityList;
import React, { useState, useEffect } from 'react';
import Select from 'react-select';
import { updateActivity } from '../../api/activityAPI.js';
import { getGoals } from '../../api/goalAPI.js';

const EditActivityForm = ({ activity, onClose, onUpdated }) => {
  const [name, setName] = useState(activity.name || '');
  const [description, setDescription] = useState(activity.description || '');
  const [link, setLink] = useState(activity.link || '');
  const [selectedGoals, setSelectedGoals] = useState([]);
  const [goals, setGoals] = useState([]);

  useEffect(() => {
    getGoals().then(res => {
      setGoals(res.data);
      const mapped = activity.objectives.map(o => ({
        value: o.objective.id,
        label: o.objective.name,
      }));
      setSelectedGoals(mapped);
    });
  }, [activity]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    await updateActivity(activity.id, {
      name,
      description,
      link,
      objectiveIds: selectedGoals.map(o => o.value),
    });

    onUpdated(); // Rafra√Æchir la liste
    onClose();   // Fermer le formulaire
  };

  return (
    <form onSubmit={handleSubmit} className="bg-white p-6 rounded border shadow space-y-4 animate-fade-in">
      <h2 className="text-xl font-semibold text-purple-700">Modifier l‚Äôactivit√©</h2>

      <input
        type="text"
        value={name}
        onChange={e => setName(e.target.value)}
        placeholder="Nom"
        className="w-full border px-3 py-2 rounded"
      />

      <textarea
        value={description}
        onChange={e => setDescription(e.target.value)}
        placeholder="Description"
        rows={3}
        className="w-full border px-3 py-2 rounded"
      />

      <input
        type="text"
        value={link}
        onChange={e => setLink(e.target.value)}
        placeholder="Lien externe"
        className="w-full border px-3 py-2 rounded"
      />

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Objectifs :</label>
        <Select
          options={goals.map(g => ({ value: g.id, label: g.name }))}
          isMulti
          value={selectedGoals}
          onChange={setSelectedGoals}
          className="text-sm"
        />
      </div>

      <div className="flex gap-4">
        <button
          type="submit"
          className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition"
        >
          Enregistrer
        </button>
        <button
          type="button"
          onClick={onClose}
          className="text-gray-600 hover:underline"
        >
          Annuler
        </button>
      </div>
    </form>
  );
};

export default EditActivityForm;
import React, { useState } from 'react';
import { FiMoreVertical } from 'react-icons/fi';
import ActivityFileViewer from './ActivityFileViewer.js';

const ActivityCard = ({ activity, onEdit, onDelete }) => {
  const [menuOpen, setMenuOpen] = useState(false);

  return (
    <div className="relative bg-white rounded shadow-sm p-4 border hover:shadow-md transition">
      {/* Menu bouton 3 points */}
      <div className="absolute top-2 right-2">
        <button
          onClick={() => setMenuOpen(prev => !prev)}
          className="text-gray-500 hover:text-gray-800"
        >
          <FiMoreVertical size={18} />
        </button>
        {menuOpen && (
          <div className="absolute right-0 mt-1 bg-white border rounded shadow w-32 z-10 animate-fade-in">
            <button
              onClick={() => { setMenuOpen(false); onEdit(); }}
              className="block w-full text-left px-4 py-2 text-sm hover:bg-purple-100"
            >
              Modifier
            </button>
            <button
              onClick={() => { setMenuOpen(false); onDelete(); }}
              className="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50"
            >
              Supprimer
            </button>
          </div>
        )}
      </div>

      <h2 className="text-xl font-bold text-purple-700">{activity.name}</h2>
      <p className="text-gray-600 text-sm mt-1 whitespace-pre-line">{activity.description}</p>

      {activity.link && (
        <a
          href={activity.link}
          className="text-purple-600 text-sm underline mt-2 inline-block"
          target="_blank"
          rel="noopener noreferrer"
        >
          Lien externe
        </a>
      )}

      <div className="mt-3">
        <p className="text-sm font-semibold text-gray-700">Objectifs :</p>
        {activity.objectives?.length ? (
          <div className="flex flex-wrap gap-2 mt-1">
            {activity.objectives.map(o => (
              <span
                key={o.objective.id}
                className="text-xs px-2 py-1 bg-purple-100 text-purple-800 rounded-full"
              >
                {o.objective.name}
              </span>
            ))}
          </div>
        ) : (
          <p className="text-sm text-gray-400">Aucun</p>
        )}
      </div>

      <div className="mt-3">
        <p className="text-sm font-semibold text-gray-700">Fichiers :</p>
        {activity.files?.length ? activity.files.map(file => (
          <ActivityFileViewer key={file.id} file={file} />
        )) : <p className="text-sm text-gray-400">Aucun fichier</p>}
      </div>
    </div>
  );
};

export default ActivityCard;
import React from 'react';

const ActivityFileViewer = ({ file }) => {
  const isImage = file.fileType.startsWith('image/');
  const isPdf = file.fileType === 'application/pdf';
  const isAudio = file.fileType.startsWith('audio/');
  const isVideo = file.fileType.startsWith('video/');

  return (
    <div className="mt-2">
      <p className="text-sm font-medium text-gray-700">{file.fileName}</p>
      {isImage && <img src={file.fileUrl} alt={file.fileName} className="max-w-full h-auto" />}
      {isPdf && <iframe src={file.fileUrl} title={file.fileName} className="w-full h-64" />}
      {isAudio && <audio controls src={file.fileUrl} className="w-full" />}
      {isVideo && <video controls src={file.fileUrl} className="w-full" />}
    </div>
  );
};

export default ActivityFileViewer;
import React, { useEffect, useState } from 'react';
import { getGoals } from '../../api/goalAPI.js';

const ActivityFilters = ({ filters, setFilters, onCreated }) => {
  const [goals, setGoals] = useState([]);
  const [error, setError] = useState('');
  const [fade, setFade] = useState(false);
  const [removingIndex, setRemovingIndex] = useState(null);

  const loadGoals = () => {
    getGoals().then(res => setGoals(res.data));
  };

  useEffect(() => {
    loadGoals();
  }, [onCreated]);

  const handleChangeObjective = (index, value) => {
    const updated = [...filters.objectives];
    updated[index] = Number(value);
    setFilters({ ...filters, objectives: updated });
    setError('');
  };

  const handleAddObjectiveField = () => {
    if (filters.objectives.includes(null)) {
      setError("Veuillez remplir l'objectif pr√©c√©dent avant d'en ajouter un autre.");
      setFade(false);
      setTimeout(() => setFade(true), 2500);
      setTimeout(() => setError(''), 3000);
      return;
    }
    setFilters({ ...filters, objectives: [...filters.objectives, null] });
    setError('');
    setFade(false);
  };

  const handleRemoveObjective = (index) => {
    setRemovingIndex(index);
    setTimeout(() => {
      const updated = [...filters.objectives];
      updated.splice(index, 1);
      setFilters({ ...filters, objectives: updated });
      setRemovingIndex(null);
    }, 300); // Dur√©e de l‚Äôanimation
    setError('');
  };

  return (
    <div className="flex flex-col gap-4 transition-all duration-500 ease-in-out">
      {/* Nom & Description */}
      <div className="flex flex-col gap-2">
        <input
          type="text"
          placeholder="Rechercher par nom"
          className="border px-3 py-2 rounded w-full text-sm"
          value={filters.name}
          onChange={(e) => setFilters({ ...filters, name: e.target.value })}
        />
        <input
          type="text"
          placeholder="Rechercher par description"
          className="border px-3 py-2 rounded w-full text-sm"
          value={filters.description}
          onChange={(e) => setFilters({ ...filters, description: e.target.value })}
        />
      </div>

      {/* Objectifs */}
      <div>
        <label className="text-sm font-semibold text-gray-700 mb-1 block">
          Filtrer par objectifs :
        </label>
        <div className="flex flex-col gap-2">
          {filters.objectives.map((id, index) => (
            <div
              key={index}
              className={`flex items-center gap-2 ${
                removingIndex === index ? 'animate-fade-out' : 'animate-fade-in'
              }`}
            >
              <select
                className="border px-2 py-1 rounded flex-grow text-sm"
                value={id || ''}
                onChange={(e) => handleChangeObjective(index, e.target.value)}
              >
                <option value="">Objectif {index + 1}</option>
                {goals.map(goal => (
                  <option key={goal.id} value={goal.id}>
                    {goal.name}
                  </option>
                ))}
              </select>
              <button
                onClick={() => handleRemoveObjective(index)}
                className="text-red-500 text-lg hover:text-red-700"
                title="Supprimer ce filtre"
              >
                ‚àí
              </button>
            </div>
          ))}

          {/* Message d'erreur anim√© */}
          {error && (
            <div
              className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 mt-1 transition-opacity duration-500 ease-in-out animate-fade-in ${
                fade ? 'opacity-0' : 'opacity-100'
              }`}
            >
              {error}
            </div>
          )}

          <button
            onClick={handleAddObjectiveField}
            type="button"
            className="text-blue-600 text-sm hover:underline mt-1"
          >
            + Ajouter un objectif
          </button>
        </div>
      </div>
    </div>
  );
};

export default ActivityFilters;
import React, { useState, useEffect } from 'react';
import Select from 'react-select';
import { createActivity, uploadFileToActivity } from '../../api/activityAPI.js';
import { getGoals, createGoal } from '../../api/goalAPI.js';

const ActivityForm = ({ onCreated, showToast }) => {
  const [visible, setVisible] = useState(false);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [link, setLink] = useState('');
  const [selectedGoals, setSelectedGoals] = useState([]);
  const [goals, setGoals] = useState([]);
  const [files, setFiles] = useState([]);
  const [newGoalName, setNewGoalName] = useState('');
  const [errors, setErrors] = useState({});
  const [fadeErrors, setFadeErrors] = useState(false);
  const [goalError, setGoalError] = useState('');
  const [fadeGoalError, setFadeGoalError] = useState(false);

  const loadGoals = () => {
    getGoals().then(res => setGoals(res.data));
  };

  useEffect(() => {
    loadGoals();
  }, []);

  const goalOptions = goals.map(goal => ({ value: goal.id, label: goal.name }));

  const handleFileChange = (e) => setFiles([...e.target.files]);

  const validate = () => {
    const newErrors = {};
    if (!name.trim()) newErrors.name = 'Le nom est requis.';
    if (selectedGoals.length === 0) newErrors.goals = 'Veuillez s√©lectionner au moins un objectif.';
    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const validationErrors = validate();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      setFadeErrors(false);
      setTimeout(() => setFadeErrors(true), 2500);
      setTimeout(() => setErrors({}), 3000);
      return;
    }

    const newActivity = await createActivity({
      therapistId: 1,
      name,
      description,
      link,
      objectiveIds: selectedGoals.map(g => g.value),
    });

    const activityId = newActivity.data.id;

    const uploads = files.map((file) => {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = async () => {
          await uploadFileToActivity(activityId, {
            fileUrl: reader.result,
            fileType: file.type,
            fileName: file.name,
          });
          resolve();
        };
        reader.readAsDataURL(file);
      });
    });

    await Promise.all(uploads);

    showToast && showToast("Activit√© ajout√©e !");
    onCreated();

    // Reset
    setName('');
    setDescription('');
    setLink('');
    setSelectedGoals([]);
    setFiles([]);
    setVisible(false);
    setErrors({});
  };

  const handleAddGoal = async () => {
    if (!newGoalName.trim()) {
      setGoalError("Veuillez √©crire un objectif avant de l‚Äôajouter.");
      setFadeGoalError(false);
      setTimeout(() => setFadeGoalError(true), 2500);
      setTimeout(() => setGoalError(''), 3000);
      return;
    }
    await createGoal({ name: newGoalName });
    setNewGoalName('');
    loadGoals();
    onCreated();
    showToast && showToast("Objectif ajout√© !");
  };

  if (!visible) {
    return (
      <div className="flex gap-4 flex-wrap">
        <div className="flex flex-col gap-1">
          <div className="flex items-center gap-2">
            <input
              type="text"
              value={newGoalName}
              onChange={(e) => setNewGoalName(e.target.value)}
              placeholder="Nouvel objectif"
              className="border px-2 py-1 rounded text-sm shadow-sm"
            />
            <button
              onClick={handleAddGoal}
              className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm transition"
            >
              + Objectif
            </button>
          </div>
          {goalError && (
            <div
              className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${
                fadeGoalError ? 'opacity-0' : 'opacity-100'
              }`}
            >
              {goalError}
            </div>
          )}
        </div>

        <button
          onClick={() => setVisible(true)}
          className="bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded text-sm transition"
        >
          + Ajouter une activit√©
        </button>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="bg-white p-6 rounded border shadow space-y-4 animate-fade-in w-full">
      <div className="flex flex-col gap-1">
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Nom de l‚Äôactivit√©"
          className="w-full border px-3 py-2 rounded"
        />
        {errors.name && (
          <div className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${fadeErrors ? 'opacity-0' : 'opacity-100'}`}>
            {errors.name}
          </div>
        )}
      </div>

      <textarea
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        placeholder="Description"
        className="w-full border px-3 py-2 rounded"
        rows={3}
      />
      <input
        type="text"
        value={link}
        onChange={(e) => setLink(e.target.value)}
        placeholder="Lien externe"
        className="w-full border px-3 py-2 rounded"
      />

      <div className="flex flex-col gap-1">
        <label className="block text-sm font-medium text-gray-700">Objectifs li√©s :</label>
        <Select
          options={goalOptions}
          isMulti
          value={selectedGoals}
          onChange={setSelectedGoals}
          className="text-sm"
          placeholder="S√©lectionner des objectifs"
        />
        {errors.goals && (
          <div className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${fadeErrors ? 'opacity-0' : 'opacity-100'}`}>
            {errors.goals}
          </div>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Fichiers :</label>
        <input type="file" multiple onChange={handleFileChange} />
      </div>

      <div className="flex gap-4 pt-2">
        <button
          type="submit"
          className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition"
        >
          Cr√©er
        </button>
        <button
          type="button"
          onClick={() => setVisible(false)}
          className="text-gray-600 hover:underline"
        >
          Annuler
        </button>
      </div>
    </form>
  );
};

export default ActivityForm;
// src/components/activities/ActivityList.js
import React, { useEffect, useState } from 'react';
import { searchActivities, deleteActivity } from '../../api/activityAPI.js';
import ActivityCard from './ActivityCard.js';
import EditActivityForm from './EditActivityForm.js';

const ActivityList = ({ filters, refresh }) => {
  const [activities, setActivities] = useState([]);
  const [editingActivity, setEditingActivity] = useState(null);

  useEffect(() => {
    searchActivities({
      name: filters.name || '',
      description: filters.description || '',
      objectives: filters.objectives?.join(',') || '',
    }).then(res => setActivities(res.data));
  }, [filters, refresh]);

  const handleDelete = async (id) => {
    if (window.confirm("Supprimer cette activit√© ?")) {
      await deleteActivity(id);
      setActivities(prev => prev.filter(a => a.id !== id));
    }
  };

  const handleUpdated = () => {
    setEditingActivity(null);
    searchActivities({
      name: filters.name || '',
      description: filters.description || '',
      objectives: filters.objectives?.join(',') || '',
    }).then(res => setActivities(res.data));
  };

  return (
    <>
      {editingActivity ? (
        <div className="mb-6">
          <EditActivityForm
            activity={editingActivity}
            onClose={() => setEditingActivity(null)}
            onUpdated={handleUpdated}
          />
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
          {activities.map(activity => (
            <ActivityCard
              key={activity.id}
              activity={activity}
              onEdit={() => setEditingActivity(activity)}
              onDelete={() => handleDelete(activity.id)}
            />
          ))}
        </div>
      )}
    </>
  );
};

export default ActivityList;
import React, { useState, useEffect } from 'react';
import Select from 'react-select';
import { updateActivity } from '../../api/activityAPI.js';
import { getGoals } from '../../api/goalAPI.js';

const EditActivityForm = ({ activity, onClose, onUpdated }) => {
  const [name, setName] = useState(activity.name || '');
  const [description, setDescription] = useState(activity.description || '');
  const [link, setLink] = useState(activity.link || '');
  const [selectedGoals, setSelectedGoals] = useState([]);
  const [goals, setGoals] = useState([]);

  useEffect(() => {
    getGoals().then(res => {
      setGoals(res.data);
      const mapped = activity.objectives.map(o => ({
        value: o.objective.id,
        label: o.objective.name,
      }));
      setSelectedGoals(mapped);
    });
  }, [activity]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    await updateActivity(activity.id, {
      name,
      description,
      link,
      objectiveIds: selectedGoals.map(o => o.value),
    });

    onUpdated(); // Rafra√Æchir la liste
    onClose();   // Fermer le formulaire
  };

  return (
    <form onSubmit={handleSubmit} className="bg-white p-6 rounded border shadow space-y-4 animate-fade-in">
      <h2 className="text-xl font-semibold text-purple-700">Modifier l‚Äôactivit√©</h2>

      <input
        type="text"
        value={name}
        onChange={e => setName(e.target.value)}
        placeholder="Nom"
        className="w-full border px-3 py-2 rounded"
      />

      <textarea
        value={description}
        onChange={e => setDescription(e.target.value)}
        placeholder="Description"
        rows={3}
        className="w-full border px-3 py-2 rounded"
      />

      <input
        type="text"
        value={link}
        onChange={e => setLink(e.target.value)}
        placeholder="Lien externe"
        className="w-full border px-3 py-2 rounded"
      />

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Objectifs :</label>
        <Select
          options={goals.map(g => ({ value: g.id, label: g.name }))}
          isMulti
          value={selectedGoals}
          onChange={setSelectedGoals}
          className="text-sm"
        />
      </div>

      <div className="flex gap-4">
        <button
          type="submit"
          className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition"
        >
          Enregistrer
        </button>
        <button
          type="button"
          onClick={onClose}
          className="text-gray-600 hover:underline"
        >
          Annuler
        </button>
      </div>
    </form>
  );
};

export default EditActivityForm;
import React from 'react';
import ActivityFileViewer from './ActivityFileViewer.js';

const FullscreenActivityView = ({ activity, onClose }) => {
  if (!activity) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50">
      <div className="bg-white max-w-3xl w-full rounded-lg p-6 relative overflow-y-auto max-h-[90vh]">
        <button
          onClick={onClose}
          className="absolute top-3 right-4 text-gray-500 hover:text-black text-xl font-bold"
        >
          ‚úï
        </button>

        <h2 className="text-2xl font-bold text-purple-700 mb-2">{activity.name}</h2>
        <p className="text-gray-700 whitespace-pre-line mb-4">{activity.description}</p>

        {activity.link && (
          <a
            href={activity.link}
            className="text-purple-600 text-sm underline mb-4 block"
            target="_blank"
            rel="noopener noreferrer"
          >
            Lien externe
          </a>
        )}

        <div className="mb-4">
          <p className="text-sm font-semibold text-gray-700">Objectifs :</p>
          {activity.objectives?.length ? (
            <div className="flex flex-wrap gap-2 mt-1">
              {activity.objectives.map(o => (
                <span
                  key={o.objective.id}
                  className="text-xs px-2 py-1 bg-purple-100 text-purple-800 rounded-full"
                >
                  {o.objective.name}
                </span>
              ))}
            </div>
          ) : (
            <p className="text-sm text-gray-400">Aucun</p>
          )}
        </div>

        <div>
          <p className="text-sm font-semibold text-gray-700">Fichiers :</p>
          {activity.files?.length ? activity.files.map(file => (
            <ActivityFileViewer key={file.id} file={file} />
          )) : <p className="text-sm text-gray-400">Aucun fichier</p>}
        </div>
      </div>
    </div>
  );
};

export default FullscreenActivityView;
import { useState } from "react";
import PatientReferences from "./DataClient/PatientReferences.js";
import PatientHealthData from "./DataClient/PatientHealthData.js";
import { updatePatient } from "../../api/patientAPI.js";

const PatientDataTab = ({ patient }) => {
  const [activeSubTab, setActiveSubTab] = useState("references");
  const [updatedPatient, setUpdatedPatient] = useState({ ...patient });

  const handleChange = (e) => {
    setUpdatedPatient({ ...updatedPatient, [e.target.name]: e.target.value });
  };

  const handleSave = async () => {
    try {
      await updatePatient(patient.id, updatedPatient);
      alert("‚úÖ Donn√©es mises √† jour !");
    } catch (err) {
      console.error("‚ùå Erreur mise √† jour :", err);
      alert("‚ùå Erreur de sauvegarde.");
    }
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md h-full w-full max-w-8xl mx-auto">
      <h3 className="text-2xl font-bold mb-6 text-gray-800">Donn√©es Patient</h3>
      <div className="flex space-x-4 mb-6">
        <button
          className={`py-2 px-4 rounded-lg ${activeSubTab === "references" ? "bg-blue-500 text-white" : "bg-gray-200"}`}
          onClick={() => setActiveSubTab("references")}
        >
          R√©f√©rences et Contacts
        </button>
        <button
          className={`py-2 px-4 rounded-lg ${activeSubTab === "health" ? "bg-blue-500 text-white" : "bg-gray-200"}`}
          onClick={() => setActiveSubTab("health")}
        >
          Donn√©es de Sant√©
        </button>
      </div>

      <div className="transition-all duration-500 ease-in-out h-full overflow-y-auto">
        {activeSubTab === "references" && (
          <PatientReferences
            patient={updatedPatient}
            handleChange={handleChange}
            handleSave={handleSave}
          />
        )}
        {activeSubTab === "health" && (
          <PatientHealthData
            patient={updatedPatient}
            patientId={patient.id}
            handleChange={handleChange}
            handleSave={handleSave}
          />
        )}
      </div>
    </div>
  );
};

export default PatientDataTab;
import React from "react";
import PatientForm from "./PatientForm.js";

const PatientDetailsTab = ({ patient, isEditing, updatedPatient, handleChange, handleUpdate, setIsEditing }) => {
  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-2xl font-bold mb-6 text-gray-800">D√©tails du Patient</h3>

      {isEditing ? (
        <PatientForm
          patientData={updatedPatient}
          handleChange={handleChange}
          handleSubmit={handleUpdate}
          isEditing={true}
          setIsEditing={setIsEditing}
        />
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4 text-gray-700">
          <p><strong>Nom:</strong> {patient.lastName}</p>
          <p><strong>Pr√©nom:</strong> {patient.firstName}</p>
          <p><strong>NISS:</strong> {patient.niss}</p>
          <p><strong>Titre:</strong> {patient.title}</p>
          <p><strong>Sexe:</strong> {patient.sex}</p>
          <p><strong>Langue:</strong> {patient.language}</p>
          <p><strong>Naissance:</strong> {patient.birthdate ? new Date(patient.birthdate).toISOString().split("T")[0] : "Non renseign√©e"}</p>
          <p><strong>Nationalit√©:</strong> {patient.nationality}</p>
          <p><strong>Adresse:</strong> {patient.address}</p>
          <p><strong>T√©l√©phone 1:</strong> {patient.phone1}</p>
          <p><strong>T√©l√©phone 2:</strong> {patient.phone2}</p>
          <p><strong>Email:</strong> {patient.email}</p>
          <p><strong>Mutuelle:</strong> {patient.insurance}</p>
          <p><strong>M√©decin de famille:</strong> {patient.familyDoctor}</p>
          <p><strong>Profession:</strong> {patient.profession}</p>
          <p><strong>Nombre d'enfants:</strong> {patient.childrenCount}</p>
          <p><strong>Facturer √†:</strong> {patient.billingInfo}</p>
          <p><strong>Zone de r√©sidence:</strong> {patient.residenceZone}</p>
          <p><strong>√âtat civil:</strong> {patient.maritalStatus}</p>
        </div>
      )}

      {!isEditing && (
        <div className="mt-6 flex justify-end">
          <button
            className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600"
            onClick={() => setIsEditing(true)}
          >
            Modifier
          </button>
        </div>
      )}
    </div>
  );
};

export default PatientDetailsTab;
import React, { useEffect, useState } from "react";
import { getMotifsByPatient, createMotif, updateMotif } from "../../api/motifAPI.js";
import PatientSituation from "./PatientFile/PatientSituation.js";
import PatientTherapeutic from "./PatientFile/PatientTherapeutic.js";
import PatientObjectives from "./PatientFile/PatientObjectives.js";
import PatientDiagnosis from "./PatientFile/PatientDiagnosis.js";
import PatientInterventions from "./PatientFile/PatientInterventions.js";
import PatientSummary from "./PatientFile/PatientSummary.js";

const PatientFileTab = ({ patient }) => {
  const [motifs, setMotifs] = useState([]);
  const [selectedMotif, setSelectedMotif] = useState(null);
  const [activeSubTab, setActiveSubTab] = useState("situation");
  const [newMotif, setNewMotif] = useState({ title: "", groupeCible: "", age: "", batteriesCodeCIF: "" });

  useEffect(() => {
    if (!patient?.id) return;

    const fetchMotifs = async () => {
      const motifsList = await getMotifsByPatient(patient.id);
      setMotifs(motifsList);
    };

    fetchMotifs();
  }, [patient?.id]);

  const handleCreateMotif = async () => {
    if (!newMotif.title.trim()) return;

    const addedMotif = await createMotif(patient.id, {
      ...newMotif,
      therapeutic: {
        assesments: "",
        syntheseEvaluation: "",
        restrictionsSouhaits: "",
      },
    });

    if (addedMotif) {
      setMotifs([...motifs, addedMotif]);
      setNewMotif({ title: "", groupeCible: "", age: "", batteriesCodeCIF: "" });
      setSelectedMotif({
        ...addedMotif,
        therapeutic: addedMotif.therapeutic || {
          assesments: "",
          syntheseEvaluation: "",
          restrictionsSouhaits: "",
        },
      });
    }
  };

  const handleSelectMotif = (motif) => {
    setSelectedMotif({
      ...motif,
      therapeutic: motif.therapeutic || {
        assesments: "",
        syntheseEvaluation: "",
        restrictionsSouhaits: "",
      },
    });
  };

  const handleUpdateMotifData = async (updatedMotif) => {
    if (!selectedMotif) return;
    try {
      await updateMotif(selectedMotif.id, updatedMotif);
      setMotifs((prevMotifs) =>
        prevMotifs.map((m) => (m.id === selectedMotif.id ? updatedMotif : m))
      );
      setSelectedMotif(updatedMotif);
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour du motif :", error);
    }
  };

  return (
    <div className="flex space-x-4">
      <div className="w-1/6 bg-gray-100 p-4 rounded-lg shadow">
        <h4 className="text-lg font-semibold mb-3">Motifs d‚Äôintervention</h4>

        <div className="mb-4">
          <input
            type="text"
            placeholder="Motif d'intervention"
            value={newMotif.title}
            onChange={(e) => setNewMotif({ ...newMotif, title: e.target.value })}
            className="w-full p-2 border rounded-lg mb-2"
          />
          <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleCreateMotif}>
            Ajouter
          </button>
        </div>

        <ul className="space-y-2">
          {motifs.map((motif, index) => (
            <li
              key={motif.id || index}
              className={`cursor-pointer p-2 rounded-lg ${selectedMotif?.id === motif.id ? "bg-blue-500 text-white" : "bg-gray-200"} hover:bg-blue-300`}
              onClick={() => handleSelectMotif(motif)}
            >
              <strong>{motif.title}</strong>
              <p className="text-sm">Groupe: {motif.groupeCible} | √Çge: {motif.age}</p>
              <p className="text-xs">Batteries: {motif.batteriesCodeCIF}</p>
            </li>
          ))}
        </ul>
      </div>

      <div className="w-5/6 bg-white p-4 rounded-lg shadow">
        {selectedMotif ? (
          <>
            <div className="flex space-x-2 mb-4">
              {["situation", "therapeutic", "objectives", "diagnosis", "interventions", "summary"].map((tab) => (
                <button
                  key={tab}
                  className={`py-2 px-4 rounded-lg ${activeSubTab === tab ? "bg-blue-500 text-white" : "bg-gray-200"}`}
                  onClick={() => setActiveSubTab(tab)}
                >
                  {tab === "situation" && "Situation Personnelle"}
                  {tab === "therapeutic" && "Perspective Th√©rapeutique"}
                  {tab === "objectives" && "Objectifs"}
                  {tab === "diagnosis" && "Diagnostic"}
                  {tab === "interventions" && "Compte Rendu"}
                  {tab === "summary" && "Synth√®se"}
                </button>
              ))}
            </div>

            {activeSubTab === "situation" && <PatientSituation motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "therapeutic" && <PatientTherapeutic motif={selectedMotif} patientId={patient?.id} updateMotif={handleUpdateMotifData}/>}
            {activeSubTab === "objectives" && <PatientObjectives motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "diagnosis" && <PatientDiagnosis motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "interventions" && <PatientInterventions motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "summary" && <PatientSummary motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
          </>
        ) : (
          <p className="text-gray-500 text-center">S√©lectionnez un motif d‚Äôintervention.</p>
        )}
      </div>
    </div>
  );
};

export default PatientFileTab;
import React from "react";

const PatientForm = ({ patientData, handleChange, handleSubmit, isEditing, setIsEditing }) => {
  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-lg font-bold mb-4">{isEditing ? "Modifier le Patient" : "Ajouter un Patient"}</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <input
          type="text"
          name="firstName"
          placeholder="Pr√©nom"
          value={patientData.firstName || ""}
          onChange={handleChange}
          className="border p-2 rounded"
        />
        <input
          type="text"
          name="lastName"
          placeholder="Nom"
          value={patientData.lastName || ""}
          onChange={handleChange}
          className="border p-2 rounded"
        />
        
        <input type="text" name="niss" placeholder="NISS" value={patientData.niss || ""} onChange={handleChange} className="border p-2 rounded" />

        <select name="title" value={patientData.title || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Titre</option>
          <option value="M.">M.</option>
          <option value="Mme">Mme</option>
          <option value="Dr">Dr</option>
        </select>

        <select name="sex" value={patientData.sex || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Sexe</option>
          <option value="Homme">Homme</option>
          <option value="Femme">Femme</option>
          <option value="Autre">Autre</option>
        </select>

        <input type="text" name="language" placeholder="Langue" value={patientData.language || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="date" name="birthdate" placeholder="Naissance" value={patientData.birthdate || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="nationality" placeholder="Nationalit√©" value={patientData.nationality || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="address" placeholder="Adresse" value={patientData.address || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="phone1" placeholder="T√©l√©phone 1" value={patientData.phone1 || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="phone2" placeholder="T√©l√©phone 2" value={patientData.phone2 || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="email" name="email" placeholder="Email" value={patientData.email || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="familyDoctor" placeholder="M√©decin de famille" value={patientData.familyDoctor || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="profession" placeholder="Profession" value={patientData.profession || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="number" name="childrenCount" placeholder="Nombre d'enfants" value={patientData.childrenCount || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="billingInfo" placeholder="Facturer √†" value={patientData.billingInfo || ""} onChange={handleChange} className="border p-2 rounded" />

        <select name="residenceZone" value={patientData.residenceZone || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Zone de r√©sidence</option>
          <option value="Bruxelles">Bruxelles</option>
          <option value="Wallonie">Wallonie</option>
          <option value="Flandre">Flandre</option>
          <option value="Autre">Autre</option>
        </select>

        <select name="maritalStatus" value={patientData.maritalStatus || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">√âtat civil</option>
          <option value="C√©libataire">C√©libataire</option>
          <option value="Mari√©(e)">Mari√©(e)</option>
          <option value="Divorc√©(e)">Divorc√©(e)</option>
          <option value="Veuf(ve)">Veuf(ve)</option>
        </select>
      </div>

      <div className="mt-4 flex space-x-4">
        <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSubmit}>
          {isEditing ? "Enregistrer" : "Ajouter"}
        </button>
        {isEditing && (
          <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={() => setIsEditing(false)}>
            Annuler
          </button>
        )}
      </div>
    </div>
  );
};

export default PatientForm;
import React, { useEffect, useState } from "react";
import {
  getPatientNotes,
  addNoteToPatient,
  updateNote,
  deleteNote,
} from "../../api/noteAPI.js";

const PatientNotesTab = ({ patient }) => {
  const [notes, setNotes] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [newTitle, setNewTitle] = useState("");
  const [newText, setNewText] = useState("");
  const [loading, setLoading] = useState(false);
  const [editingNoteId, setEditingNoteId] = useState(null);
  const [editTitle, setEditTitle] = useState("");
  const [editText, setEditText] = useState("");

  useEffect(() => {
    if (!patient?.id) return;

    const fetchNotes = async () => {
      try {
        const notesList = await getPatientNotes(patient.id);
        setNotes(notesList || []);
      } catch (error) {
        console.error("Error loading notes:", error);
        setNotes([]);
      }
    };

    fetchNotes();
  }, [patient?.id]);

  const handleAddNote = async () => {
    if (!newTitle.trim() || !newText.trim() || !patient?.id) return;

    setLoading(true);
    try {
      const noteData = {
        title: newTitle,
        description: newText,
      };

      const newNote = await addNoteToPatient(patient.id, noteData);
      setNotes((prev) => [newNote, ...prev]);
      setNewTitle("");
      setNewText("");
      setShowForm(false);
    } catch (error) {
      console.error("Error adding note:", error);
    }
    setLoading(false);
  };

  const handleEdit = (note) => {
    setEditingNoteId(note.id);
    setEditTitle(note.title);
    setEditText(note.description);
  };

  const handleSaveEdit = async (noteId) => {
    try {
      await updateNote(noteId, {
        title: editTitle,
        description: editText,
      });

      setNotes((prev) =>
        prev.map((note) =>
          note.id === noteId
            ? { ...note, title: editTitle, description: editText }
            : note
        )
      );
      setEditingNoteId(null);
    } catch (error) {
      console.error("Error updating note:", error);
    }
  };

  const handleDeleteNote = async (noteId) => {
    if (!window.confirm("Delete this note?")) return;

    try {
      await deleteNote(noteId);
      setNotes((prev) => prev.filter((n) => n.id !== noteId));
    } catch (error) {
      console.error("Error deleting note:", error);
    }
  };

  const handleCancelEdit = () => {
    setEditingNoteId(null);
    setEditTitle("");
    setEditText("");
  };

  return (
    <div className="p-4 bg-white rounded-lg shadow">
      <h3 className="text-lg font-bold mb-4">Notes</h3>

      <button
        className="mb-4 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
        onClick={() => setShowForm(!showForm)}
      >
        {showForm ? "Cancel" : "Add Note"}
      </button>

      {showForm && (
        <div className="mb-4 border p-4 rounded-lg bg-gray-100">
          <input
            type="text"
            className="w-full mb-2 border rounded-lg p-2"
            placeholder="Note title"
            value={newTitle}
            onChange={(e) => setNewTitle(e.target.value)}
          />
          <textarea
            className="w-full mb-2 border rounded-lg p-2"
            placeholder="Note description"
            value={newText}
            onChange={(e) => setNewText(e.target.value)}
          />
          <button
            className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
            onClick={handleAddNote}
            disabled={loading}
          >
            {loading ? "Adding..." : "Add"}
          </button>
        </div>
      )}

      {notes.length > 0 ? (
        <ul className="space-y-4">
          {notes.map((note) => (
            <li key={note.id} className="border-b pb-4">
              {editingNoteId === note.id ? (
                <>
                  <input
                    className="w-full mb-2 border rounded-lg p-2"
                    value={editTitle}
                    onChange={(e) => setEditTitle(e.target.value)}
                  />
                  <textarea
                    className="w-full mb-2 border rounded-lg p-2"
                    value={editText}
                    onChange={(e) => setEditText(e.target.value)}
                  />
                  <div className="flex gap-2">
                    <button
                      className="bg-green-500 text-white px-4 py-1 rounded-lg"
                      onClick={() => handleSaveEdit(note.id)}
                    >
                      Save
                    </button>
                    <button
                      className="bg-gray-500 text-white px-4 py-1 rounded-lg"
                      onClick={handleCancelEdit}
                    >
                      Cancel
                    </button>
                  </div>
                </>
              ) : (
                <>
                  <div className="flex justify-between items-center">
                    <span className="font-semibold text-blue-600">{note.title}</span>
                    <span className="text-sm text-gray-500">
                      {new Date(note.noteDate).toLocaleDateString("fr-FR")}
                    </span>
                  </div>
                  <p className="text-gray-700">{note.description}</p>
                  <div className="flex gap-2 mt-2">
                    <button
                      className="bg-yellow-500 text-white px-3 py-1 rounded-lg"
                      onClick={() => handleEdit(note)}
                    >
                      Edit
                    </button>
                    <button
                      className="bg-red-500 text-white px-3 py-1 rounded-lg"
                      onClick={() => handleDeleteNote(note.id)}
                    >
                      Delete
                    </button>
                  </div>
                </>
              )}
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-gray-500">No notes available.</p>
      )}
    </div>
  );
};

export default PatientNotesTab;
import { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";
import { getPatientHealthData, updatePatientHealthData } from "../../../api/healthDataApi.js";

const PatientHealthData = ({ patient, patientId }) => {
  const [editing, setEditing] = useState(false);
  const [healthData, setHealthData] = useState({
    medicalDiagnosis: "",
    medicalHistory: "",
    healthChronicle: "",
  });

  useEffect(() => {
    if (patientId) {
      loadHealthData();
    }
  }, [patientId]);

  const loadHealthData = async () => {
    try {
      const data = await getPatientHealthData(patientId);
      setHealthData(data);
    } catch (err) {
      console.error("Erreur chargement sant√©:", err);
    }
  };

  const handleInputChange = (field, value) => {
    setHealthData((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    try {
      await updatePatientHealthData(patientId, healthData);
      setEditing(false);
      alert("‚úÖ Donn√©es mises √† jour !");
    } catch (err) {
      console.error("Erreur mise √† jour:", err);
      alert("‚ùå Erreur sauvegarde.");
    }
  };

  const handleCancel = () => {
    loadHealthData();
    setEditing(false);
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-2xl font-bold mb-6 text-center text-gray-800">
        Donn√©es de Sant√©
      </h3>

      <div className="space-y-6">
        <div>
          <label className="block text-gray-700 font-semibold mb-1">
            Diagnostic M√©dical
          </label>
          <input
            type="text"
            value={healthData.medicalDiagnosis}
            onChange={(e) => handleInputChange("medicalDiagnosis", e.target.value)}
            className="border p-2 rounded w-full"
            disabled={!editing}
          />
        </div>

        <div>
          <label className="block text-gray-700 font-semibold mb-1">
            Ant√©c√©dents M√©dicaux
          </label>
          <QuillEditor
            value={healthData.medicalHistory}
            onChange={(value) => handleInputChange("medicalHistory", value)}
            readOnly={!editing}
          />
        </div>

        <div>
          <label className="block text-gray-700 font-semibold mb-1">
            Chronique de Sant√©
          </label>
          <QuillEditor
            value={healthData.healthChronicle}
            onChange={(value) => handleInputChange("healthChronicle", value)}
            readOnly={!editing}
          />
        </div>

        <div className="flex justify-end space-x-2">
          {!editing ? (
            <button className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600" onClick={() => setEditing(true)}>
              Modifier
            </button>
          ) : (
            <>
              <button className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600" onClick={handleSave}>
                Enregistrer
              </button>
              <button className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600" onClick={handleCancel}>
                Annuler
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default PatientHealthData;
import { useEffect, useState } from "react";
import {
  getPatientContacts,
  addContact,
  updateContact,
  deleteContact,
} from "../../../api/contactAPI.js";

const PatientReferences = ({ patient }) => {
  const [contacts, setContacts] = useState([]);
  const [editing, setEditing] = useState(null);
  const [isNew, setIsNew] = useState(false);
  const [formType, setFormType] = useState("reference"); // Pour savoir dans quel tableau afficher le formulaire

  const [form, setForm] = useState({
    firstName: "",
    lastName: "",
    relation: "",
    inami: "",
    phone: "",
    email: "",
    comment: "",
  });

  useEffect(() => {
    if (patient?.id) loadContacts();
  }, [patient]);

  const loadContacts = async () => {
    try {
      const data = await getPatientContacts(patient.id);
      setContacts(data);
    } catch (err) {
      console.error("Erreur chargement contacts:", err);
    }
  };

  const startEdit = (contact = null, type = "reference") => {
    setFormType(type);
    if (contact) {
      setForm(contact);
      setEditing(contact.id);
      setIsNew(false);
    } else {
      setForm({
        firstName: "",
        lastName: "",
        relation: "",
        inami: "",
        phone: "",
        email: "",
        comment: "",
      });
      setEditing(null);
      setIsNew(true);
    }
  };

  const cancelEdit = () => {
    setEditing(null);
    setIsNew(false);
    setForm({});
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const saveContact = async () => {
    const contactData = { ...form, type: formType };

    try {
      if (isNew) {
        await addContact(patient.id, contactData);
      } else {
        await updateContact(editing, contactData);
      }
      await loadContacts();
      cancelEdit();
    } catch (err) {
      console.error("Erreur sauvegarde contact:", err);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm("Supprimer ce contact ?")) {
      try {
        await deleteContact(id);
        await loadContacts();
      } catch (err) {
        console.error("Erreur suppression contact:", err);
      }
    }
  };

  const references = contacts.filter((c) => c.type === "reference");
  const personals = contacts.filter((c) => c.type === "personal");

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-2xl font-bold mb-6 text-center text-gray-800">
        R√©f√©rences et Contacts
      </h3>

      {/* Formulaire affich√© en haut du bon tableau */}
      {(editing !== null || isNew) && (
        <div className="bg-gray-100 p-4 rounded mb-6 space-y-2">
          <input name="firstName" value={form.firstName || ""} onChange={handleChange} placeholder="Pr√©nom" className="w-full p-2 border rounded" />
          <input name="lastName" value={form.lastName || ""} onChange={handleChange} placeholder="Nom" className="w-full p-2 border rounded" />
          {formType === "personal" && (
            <input name="relation" value={form.relation || ""} onChange={handleChange} placeholder="Relation" className="w-full p-2 border rounded" />
          )}
          {formType === "reference" && (
            <input name="inami" value={form.inami || ""} onChange={handleChange} placeholder="INAMI" className="w-full p-2 border rounded" />
          )}
          <input name="phone" value={form.phone || ""} onChange={handleChange} placeholder="T√©l√©phone" className="w-full p-2 border rounded" />
          <input name="email" value={form.email || ""} onChange={handleChange} placeholder="Email" className="w-full p-2 border rounded" />
          <textarea name="comment" value={form.comment || ""} onChange={handleChange} placeholder="Commentaire" className="w-full p-2 border rounded" />

          <div className="flex justify-end space-x-2 mt-2">
            <button onClick={saveContact} className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">Enregistrer</button>
            <button onClick={cancelEdit} className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">Annuler</button>
          </div>
        </div>
      )}

      {/* R√©f√©rences */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-2">
          <h4 className="text-lg font-semibold text-gray-700">R√©f√©rences et Contacts</h4>
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => startEdit(null, "reference")}>
            Ajouter R√©f√©rence
          </button>
        </div>
        <table className="w-full border">
          <thead className="bg-gray-200">
            <tr>
              <th className="p-2">Nom</th>
              <th className="p-2">Pr√©nom</th>
              <th className="p-2">Type</th>
              <th className="p-2">INAMI</th>
              <th className="p-2">T√©l√©phone</th>
              <th className="p-2">Email</th>
              <th className="p-2">Action</th>
            </tr>
          </thead>
          <tbody>
            {references.map((c) => (
              <tr key={c.id} className="border-t">
                <td className="p-2">{c.lastName}</td>
                <td className="p-2">{c.firstName}</td>
                <td className="p-2">{c.type}</td>
                <td className="p-2">{c.inami}</td>
                <td className="p-2">{c.phone}</td>
                <td className="p-2">{c.email}</td>
                <td className="p-2">
                  <button className="text-blue-600" onClick={() => startEdit(c, "reference")}>‚úèÔ∏è</button>
                  <button className="text-red-600 ml-2" onClick={() => handleDelete(c.id)}>üóëÔ∏è</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Contacts personnels */}
      <div>
        <div className="flex justify-between items-center mb-2">
          <h4 className="text-lg font-semibold text-gray-700">Contacts Personnels</h4>
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => startEdit(null, "personal")}>
            Ajouter Contact Personnel
          </button>
        </div>
        <table className="w-full border">
          <thead className="bg-gray-200">
            <tr>
              <th className="p-2">Nom</th>
              <th className="p-2">Pr√©nom</th>
              <th className="p-2">Relation</th>
              <th className="p-2">T√©l√©phone</th>
              <th className="p-2">Email</th>
              <th className="p-2">Commentaire</th>
              <th className="p-2">Action</th>
            </tr>
          </thead>
          <tbody>
            {personals.map((c) => (
              <tr key={c.id} className="border-t">
                <td className="p-2">{c.lastName}</td>
                <td className="p-2">{c.firstName}</td>
                <td className="p-2">{c.relation}</td>
                <td className="p-2">{c.phone}</td>
                <td className="p-2">{c.email}</td>
                <td className="p-2">{c.comment}</td>
                <td className="p-2">
                  <button className="text-blue-600" onClick={() => startEdit(c, "personal")}>‚úèÔ∏è</button>
                  <button className="text-red-600 ml-2" onClick={() => handleDelete(c.id)}>üóëÔ∏è</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default PatientReferences;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientDiagnosis = ({ motif, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [diagnostic, setDiagnostic] = useState(motif?.diagnostic || "");

  useEffect(() => {
    setDiagnostic(motif?.diagnostic || "");
  }, [motif]);

  const handleSave = async () => {
    if (!motif) return;

    const updatedMotif = {
      ...motif,
      diagnostic,
    };

    try {
      await updateMotif(updatedMotif);
      setEditing(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde du diagnostic :", error);
    }
  };

  const handleCancel = () => {
    setEditing(false);
    setDiagnostic(motif?.diagnostic || "");
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg h-full">
      <h4 className="text-md font-semibold mb-4">Diagnostic</h4>

      {/* ‚úÖ Ajout d'un conteneur propre pour QuillEditor */}
      <div className="border rounded-lg p-2">
        <QuillEditor
          value={diagnostic}
          onChange={setDiagnostic}
          readOnly={!editing}
          className="min-h-[150px] max-h-64 overflow-auto"
        />
      </div>

      <div className="flex space-x-2 mt-4">
        {editing ? (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        ) : (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => setEditing(true)}>
            Modifier
          </button>
        )}
      </div>
    </div>
  );
};

export default PatientDiagnosis;
import React, { useState } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientInterventions = ({ motif, updateMotif }) => {
  const [editingIndex, setEditingIndex] = useState(null);
  const [newIntervention, setNewIntervention] = useState({
    date: "",
    texte: "",
  });
  const [showForm, setShowForm] = useState(false);

  const handleInputChange = (field, value) => {
    setNewIntervention((prev) => ({ ...prev, [field]: value }));
  };

  const handleSaveIntervention = async () => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: [
        ...(motif.compteRenduInterventions || []),
        newIntervention,
      ],
    };

    try {
      await updateMotif(updatedMotif);
      setNewIntervention({ date: "", texte: "" });
      setShowForm(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de l'intervention :", error);
    }
  };

  const handleEditIntervention = (index) => {
    setEditingIndex(index);
    setNewIntervention(motif.compteRenduInterventions[index]);
    setShowForm(true);
  };

  const handleSaveEditIntervention = async () => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: motif.compteRenduInterventions.map((intervention, index) =>
        index === editingIndex ? newIntervention : intervention
      ),
    };

    try {
      await updateMotif(updatedMotif);
      setEditingIndex(null);
      setNewIntervention({ date: "", texte: "" });
      setShowForm(false);
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de l'intervention :", error);
    }
  };

  const handleDeleteIntervention = async (index) => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: motif.compteRenduInterventions.filter((_, i) => i !== index),
    };

    try {
      await updateMotif(updatedMotif);
    } catch (error) {
      console.error("Erreur lors de la suppression de l'intervention :", error);
    }
  };

  const handleCancel = () => {
    setEditingIndex(null);
    setNewIntervention({ date: "", texte: "" });
    setShowForm(false);
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-md font-semibold mb-4">Compte Rendu des Interventions</h4>

      <button
        className="mb-4 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
        onClick={() => {
          setShowForm(true);
          setEditingIndex(null);
          setNewIntervention({ date: "", texte: "" });
        }}
      >
        Ajouter une intervention
      </button>

      {showForm && (
        <div className="mb-4 border p-4 rounded-lg">
          <input
            type="date"
            className="w-full mb-2 border rounded-lg p-2"
            placeholder="Date de l'intervention"
            value={newIntervention.date}
            onChange={(e) => handleInputChange("date", e.target.value)}
          />
          <QuillEditor
            value={newIntervention.texte}
            onChange={(value) => handleInputChange("texte", value)}
            readOnly={false}
          />
          <div className="flex space-x-2 mt-4">
            {editingIndex !== null ? (
              <>
                <button
                  className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                  onClick={handleSaveEditIntervention}
                >
                  Enregistrer
                </button>
                <button
                  className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600"
                  onClick={handleCancel}
                >
                  Annuler
                </button>
              </>
            ) : (
              <button
                className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                onClick={handleSaveIntervention}
              >
                Ajouter
              </button>
            )}
          </div>
        </div>
      )}

      <div className="mt-4">
        {motif.compteRenduInterventions?.length > 0 ? (
          <ul className="space-y-2">
            {motif.compteRenduInterventions.map((intervention, index) => (
              <li key={index} className="border-b py-2">
                <div className="flex justify-between items-center">
                  <div>
                    <p><strong>Date:</strong> {intervention.date || "Non sp√©cifi√©e"}</p>
                    <div dangerouslySetInnerHTML={{ __html: intervention.texte }} />
                  </div>
                  <div className="flex space-x-2">
                    <button
                      className="text-yellow-500 hover:underline"
                      onClick={() => handleEditIntervention(index)}
                    >
                      ‚úèÔ∏è
                    </button>
                    <button
                      className="text-red-500 hover:underline"
                      onClick={() => handleDeleteIntervention(index)}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        ) : (
          <p className="text-gray-500">Aucune intervention enregistr√©e.</p>
        )}
      </div>
    </div>
  );
};

export default PatientInterventions;
import React, { useState } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientObjectives = ({ motif, updateMotif }) => {
  const [selectedLongTermObjective, setSelectedLongTermObjective] = useState(null);
  const [newLongTermObjective, setNewLongTermObjective] = useState({
    titre: "",
  });
  const [newShortTermObjective, setNewShortTermObjective] = useState({
    titre: "",
    dateDebut: "",
    dateFin: "",
    description: "",
    statut: "ouvert",
  });
  const [showShortTermForm, setShowShortTermForm] = useState(false);
  const [editingLongTermObjective, setEditingLongTermObjective] = useState(null);
  const [editingShortTermObjective, setEditingShortTermObjective] = useState(null);

  const handleSelectLongTermObjective = (objective) => {
    setSelectedLongTermObjective(objective);
    setShowShortTermForm(false);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewShortTermObjective((prev) => ({ ...prev, [name]: value }));
  };

  const handleLongTermInputChange = (e) => {
    const { name, value } = e.target;
    setNewLongTermObjective((prev) => ({ ...prev, [name]: value }));
  };

  const handleSaveShortTermObjective = async () => {
    if (!selectedLongTermObjective) return;

    const updatedMotif = {
      ...motif,
      objectifsCourtTerme: [
        ...(motif.objectifsCourtTerme || []),
        {
          ...newShortTermObjective,
          longTermObjectiveId: selectedLongTermObjective.id,
        },
      ],
    };

    try {
      await updateMotif(updatedMotif);
      setNewShortTermObjective({
        titre: "",
        dateDebut: "",
        dateFin: "",
        description: "",
        statut: "ouvert",
      });
      setShowShortTermForm(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de l'objectif √† court terme :", error);
    }
  };

  const handleSaveLongTermObjective = async () => {
    if (!newLongTermObjective.titre.trim()) return;

    const updatedMotif = {
      ...motif,
      objectifsLongTerme: [
        ...(motif.objectifsLongTerme || []),
        {
          ...newLongTermObjective,
          id: Date.now().toString(), // G√©n√©rer un ID unique pour l'objectif √† long terme
        },
      ],
    };

    try {
      await updateMotif(updatedMotif);
      setNewLongTermObjective({ titre: "" });
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de l'objectif √† long terme :", error);
    }
  };

  const handleEditLongTermObjective = (objective) => {
    setEditingLongTermObjective(objective);
    setNewLongTermObjective({ titre: objective.titre });
  };

  const handleSaveEditLongTermObjective = async () => {
    const updatedMotif = {
      ...motif,
      objectifsLongTerme: motif.objectifsLongTerme.map((obj) =>
        obj.id === editingLongTermObjective.id ? { ...obj, titre: newLongTermObjective.titre } : obj
      ),
    };

    try {
      await updateMotif(updatedMotif);
      setEditingLongTermObjective(null);
      setNewLongTermObjective({ titre: "" });
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de l'objectif √† long terme :", error);
    }
  };

  const handleDeleteLongTermObjective = async (objectiveId) => {
    const updatedMotif = {
      ...motif,
      objectifsLongTerme: motif.objectifsLongTerme.filter((obj) => obj.id !== objectiveId),
      objectifsCourtTerme: motif.objectifsCourtTerme.filter((obj) => obj.longTermObjectiveId !== objectiveId),
    };

    try {
      await updateMotif(updatedMotif);
      setSelectedLongTermObjective(null);
    } catch (error) {
      console.error("Erreur lors de la suppression de l'objectif √† long terme :", error);
    }
  };

  const handleEditShortTermObjective = (objective) => {
    setEditingShortTermObjective(objective);
    setNewShortTermObjective({
      titre: objective.titre,
      dateDebut: objective.dateDebut,
      dateFin: objective.dateFin,
      description: objective.description,
      statut: objective.statut,
    });
    setShowShortTermForm(true);
  };

  const handleSaveEditShortTermObjective = async () => {
    const updatedMotif = {
      ...motif,
      objectifsCourtTerme: motif.objectifsCourtTerme.map((obj) =>
        obj === editingShortTermObjective ? { ...newShortTermObjective, longTermObjectiveId: selectedLongTermObjective.id } : obj
      ),
    };

    try {
      await updateMotif(updatedMotif);
      setEditingShortTermObjective(null);
      setNewShortTermObjective({
        titre: "",
        dateDebut: "",
        dateFin: "",
        description: "",
        statut: "ouvert",
      });
      setShowShortTermForm(false);
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de l'objectif √† court terme :", error);
    }
  };

  const handleDeleteShortTermObjective = async (objective) => {
    const updatedMotif = {
      ...motif,
      objectifsCourtTerme: motif.objectifsCourtTerme.filter((obj) => obj !== objective),
    };

    try {
      await updateMotif(updatedMotif);
    } catch (error) {
      console.error("Erreur lors de la suppression de l'objectif √† court terme :", error);
    }
  };

  return (
    <div className="flex space-x-4">
      {/* Liste des objectifs √† long terme */}
      <div className="w-1/3 bg-gray-100 p-4 rounded-lg shadow">
        <h4 className="text-lg font-semibold mb-3">Objectifs Long Terme</h4>
        <div className="mb-4">
          <input
            type="text"
            placeholder="Titre de l'objectif √† long terme"
            value={newLongTermObjective.titre}
            onChange={handleLongTermInputChange}
            name="titre"
            className="w-full p-2 border rounded-lg mb-2"
          />
          {editingLongTermObjective ? (
            <>
              <button
                className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                onClick={handleSaveEditLongTermObjective}
              >
                Enregistrer
              </button>
              <button
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 ml-2"
                onClick={() => setEditingLongTermObjective(null)}
              >
                Annuler
              </button>
            </>
          ) : (
            <button
              className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
              onClick={handleSaveLongTermObjective}
            >
              Ajouter
            </button>
          )}
        </div>
        <ul className="space-y-2">
          {motif.objectifsLongTerme?.map((objective, index) => (
            <li
              key={index}
              className={`cursor-pointer p-2 rounded-lg ${
                selectedLongTermObjective?.id === objective.id ? "bg-blue-500 text-white" : "bg-gray-200"
              } hover:bg-blue-300`}
              onClick={() => handleSelectLongTermObjective(objective)}
            >
              <div className="flex justify-between items-center">
                <strong>{objective.titre}</strong>
                <div className="flex space-x-2">
                  <button
                    className="text-yellow-500 hover:underline"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleEditLongTermObjective(objective);
                    }}
                  >
                    ‚úèÔ∏è
                  </button>
                  <button
                    className="text-red-500 hover:underline"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteLongTermObjective(objective.id);
                    }}
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>
            </li>
          ))}
        </ul>
      </div>

      {/* Formulaire pour cr√©er un objectif √† court terme */}
      <div className="w-2/3 bg-white p-4 rounded-lg shadow">
        {selectedLongTermObjective ? (
          <>
            <div className="flex justify-between items-center mb-4">
              <h4 className="text-lg font-semibold">Objectifs √† Court Terme pour "{selectedLongTermObjective.titre}"</h4>
              <button
                className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
                onClick={() => {
                  setShowShortTermForm(true);
                  setEditingShortTermObjective(null);
                  setNewShortTermObjective({
                    titre: "",
                    dateDebut: "",
                    dateFin: "",
                    description: "",
                    statut: "ouvert",
                  });
                }}
              >
                Ajouter
              </button>
            </div>
            {showShortTermForm ? (
              <>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Titre :</label>
                  <input
                    type="text"
                    name="titre"
                    value={newShortTermObjective.titre}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Date D√©but :</label>
                  <input
                    type="date"
                    name="dateDebut"
                    value={newShortTermObjective.dateDebut}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Date Fin :</label>
                  <input
                    type="date"
                    name="dateFin"
                    value={newShortTermObjective.dateFin}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Description :</label>
                  <QuillEditor
                    value={newShortTermObjective.description}
                    onChange={(value) => handleInputChange({ target: { name: "description", value } })}
                    readOnly={false}
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Statut :</label>
                  <select
                    name="statut"
                    value={newShortTermObjective.statut}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  >
                    <option value="ouvert">Ouvert</option>
                    <option value="ferm√©">Ferm√©</option>
                  </select>
                </div>
                {editingShortTermObjective ? (
                  <>
                    <button
                      className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                      onClick={handleSaveEditShortTermObjective}
                    >
                      Enregistrer
                    </button>
                    <button
                      className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 ml-2"
                      onClick={() => {
                        setEditingShortTermObjective(null);
                        setShowShortTermForm(false);
                      }}
                    >
                      Annuler
                    </button>
                  </>
                ) : (
                  <button
                    className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                    onClick={handleSaveShortTermObjective}
                  >
                    Enregistrer
                  </button>
                )}
              </>
            ) : (
              <ul className="space-y-2">
                {motif.objectifsCourtTerme
                  ?.filter((obj) => obj.longTermObjectiveId === selectedLongTermObjective.id)
                  .map((objective, index) => (
                    <li key={index} className="p-2 rounded-lg bg-gray-200">
                      <div className="flex justify-between items-center">
                        <div>
                          <strong>{objective.titre}</strong>
                          <p>Date D√©but: {objective.dateDebut}</p>
                          <p>Date Fin: {objective.dateFin}</p>
                          <p>Description: <span dangerouslySetInnerHTML={{ __html: objective.description }} /></p>
                          <p>Statut: {objective.statut}</p>
                        </div>
                        <div className="flex space-x-2">
                          <button
                            className="text-yellow-500 hover:underline"
                            onClick={() => handleEditShortTermObjective(objective)}
                          >
                            ‚úèÔ∏è
                          </button>
                          <button
                            className="text-red-500 hover:underline"
                            onClick={() => handleDeleteShortTermObjective(objective)}
                          >
                            üóëÔ∏è
                          </button>
                        </div>
                      </div>
                    </li>
                  ))}
              </ul>
            )}
          </>
        ) : (
          <p className="text-gray-500">S√©lectionnez un objectif √† long terme pour cr√©er un objectif √† court terme.</p>
        )}
      </div>
    </div>
  );
};

export default PatientObjectives;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";
import { updateMotifIntervention } from "../../../firebase/patientsFirestore.js"; // üîπ V√©rifie que cet import est correct

const PatientSituation = ({ motif, patientId }) => {
  const [editing, setEditing] = useState(false);
  const [newSituation, setNewSituation] = useState({
    personne: motif?.situationPersonnelle?.personne || "",
    occupation: motif?.situationPersonnelle?.occupation || "",
    environnement: motif?.situationPersonnelle?.environnement || "",
  });

  useEffect(() => {
    setNewSituation({
      personne: motif?.situationPersonnelle?.personne || "",
      occupation: motif?.situationPersonnelle?.occupation || "",
      environnement: motif?.situationPersonnelle?.environnement || "",
    });
  }, [motif]);

  // ‚úÖ Active le mode √©dition
  const handleEdit = () => {
    setEditing(true);
  };

  // ‚ùå Annule l'√©dition et restaure les valeurs initiales
  const handleCancel = () => {
    setEditing(false);
    setNewSituation({
      personne: motif?.situationPersonnelle?.personne || "",
      occupation: motif?.situationPersonnelle?.occupation || "",
      environnement: motif?.situationPersonnelle?.environnement || "",
    });
  };

  // ‚úèÔ∏è Met √† jour localement les valeurs pendant la saisie
  const handleInputChange = (field, value) => {
    setNewSituation((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    if (!motif || !patientId) {
      console.error("‚ùå patientId ou motif est undefined !");
      return;
    }
  
    const updatedMotif = {
      ...motif,
      situationPersonnelle: {
        personne: newSituation.personne || "",
        occupation: newSituation.occupation || "",
        environnement: newSituation.environnement || "",
      },
    };
  
    console.log("üì§ Tentative d'enregistrement :", patientId, motif.id, updatedMotif);
  
    try {
      const success = await updateMotifIntervention(patientId, motif.id, updatedMotif);
  
      if (success) {
        console.log("‚úÖ Mise √† jour r√©ussie !");
        
        // üõë Ajout : Mise √† jour du `state` pour rafra√Æchir imm√©diatement l'affichage
        setNewSituation(updatedMotif.situationPersonnelle);
        
        // üõë Ajout : Mise √† jour du motif actuel
        motif.situationPersonnelle = updatedMotif.situationPersonnelle;
  
        setEditing(false);
      } else {
        console.error("‚ùå Mise √† jour √©chou√©e.");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour :", error);
    }
  };
  

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-lg font-semibold mb-4">Situation Personnelle</h4>

      {/* ‚úÖ √âditeur pour "Personne" */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Personne :</label>
        <QuillEditor
          value={newSituation.personne}
          onChange={(value) => handleInputChange("personne", value)}
          readOnly={!editing}
        />
      </div>

      {/* ‚úÖ √âditeur pour "Occupation" */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Occupation :</label>
        <QuillEditor
          value={newSituation.occupation}
          onChange={(value) => handleInputChange("occupation", value)}
          readOnly={!editing}
        />
      </div>

      {/* ‚úÖ √âditeur pour "Environnement" */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Environnement :</label>
        <QuillEditor
          value={newSituation.environnement}
          onChange={(value) => handleInputChange("environnement", value)}
          readOnly={!editing}
        />
      </div>

      {/* ‚úÖ Boutons Modifier / Enregistrer / Annuler */}
      <div className="flex space-x-2">
        {!editing ? (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={handleEdit}>
            Modifier
          </button>
        ) : (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default PatientSituation;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientSummary = ({ motif, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [synthese, setSynthese] = useState(motif?.synthese || "");

  useEffect(() => {
    setSynthese(motif?.synthese || "");
  }, [motif]);

  const handleSave = async () => {
    if (!motif) return;

    const updatedMotif = {
      ...motif,
      synthese,
    };

    try {
      await updateMotif(updatedMotif);
      setEditing(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de la synth√®se :", error);
    }
  };

  const handleCancel = () => {
    setEditing(false);
    setSynthese(motif?.synthese || "");
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg h-full">
      <h4 className="text-md font-semibold mb-4">Synth√®se</h4>

      <div className="border rounded-lg p-2">
        <QuillEditor
          value={synthese}
          onChange={setSynthese}
          readOnly={!editing}
          className="min-h-[150px] max-h-64 overflow-auto"
        />
      </div>

      <div className="flex space-x-2 mt-4">
        {editing ? (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        ) : (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => setEditing(true)}>
            Modifier
          </button>
        )}
      </div>
    </div>
  );
};

export default PatientSummary;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";
import { updateMotifIntervention } from "../../../firebase/patientsFirestore.js";

const PatientTherapeutic = ({ motif, patientId, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [therapeuticData, setTherapeuticData] = useState({
    assesments: motif?.perspectiveTherapeutique?.assesments || "",
    syntheseEvaluation: motif?.perspectiveTherapeutique?.syntheseEvaluation || "",
    restrictionsSouhaits: motif?.perspectiveTherapeutique?.restrictionsSouhaits || "",
    diagnosticOccupationnel: motif?.perspectiveTherapeutique?.diagnosticOccupationnel || "",
  });

  useEffect(() => {
    setTherapeuticData({
      assesments: motif?.perspectiveTherapeutique?.assesments || "",
      syntheseEvaluation: motif?.perspectiveTherapeutique?.syntheseEvaluation || "",
      restrictionsSouhaits: motif?.perspectiveTherapeutique?.restrictionsSouhaits || "",
      diagnosticOccupationnel: motif?.perspectiveTherapeutique?.diagnosticOccupationnel || "",
    });
  }, [motif]);

  const handleEdit = () => {
    setEditing(true);
  };

  const handleCancel = () => {
    setEditing(false);
    setTherapeuticData({
      assesments: motif?.perspectiveTherapeutique?.assesments || "",
      syntheseEvaluation: motif?.perspectiveTherapeutique?.syntheseEvaluation || "",
      restrictionsSouhaits: motif?.perspectiveTherapeutique?.restrictionsSouhaits || "",
      diagnosticOccupationnel: motif?.perspectiveTherapeutique?.diagnosticOccupationnel || "",
    });
  };

  const handleInputChange = (field, value) => {
    setTherapeuticData((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    if (!motif || !patientId) {
      console.error("‚ùå patientId ou motif est undefined !");
      return;
    }

    const updatedMotif = {
      ...motif,
      perspectiveTherapeutique: {
        assesments: therapeuticData.assesments || "",
        syntheseEvaluation: therapeuticData.syntheseEvaluation || "",
        restrictionsSouhaits: therapeuticData.restrictionsSouhaits || "",
        diagnosticOccupationnel: therapeuticData.diagnosticOccupationnel || "",
      },
    };

    console.log("üì§ Sauvegarde des donn√©es th√©rapeutiques :", patientId, updatedMotif);

    try {
      await updateMotifIntervention(patientId, motif.id, updatedMotif);
      console.log("‚úÖ Mise √† jour r√©ussie !");
      setEditing(false);
      updateMotif(updatedMotif); // Update the parent component's state
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour :", error);
    }
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-lg font-semibold mb-4">Perspective Th√©rapeutique</h4>

      <div className="mb-4 p-3 border border-gray-300 bg-gray-100 rounded-lg">
        <h5 className="text-md font-semibold text-gray-700">Batteries Code CIF</h5>
        <p className="text-gray-600">{therapeuticData.assesments || "Non d√©fini"}</p>
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Synth√®se de l'√©valuation :</label>
        <QuillEditor
          value={therapeuticData.syntheseEvaluation}
          onChange={(value) => handleInputChange("syntheseEvaluation", value)}
          readOnly={!editing}
        />
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Restrictions de participation :</label>
        <QuillEditor
          value={therapeuticData.restrictionsSouhaits}
          onChange={(value) => handleInputChange("restrictionsSouhaits", value)}
          readOnly={!editing}
        />
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Diagnostic Occupationnel :</label>
        <QuillEditor
          value={therapeuticData.diagnosticOccupationnel}
          onChange={(value) => handleInputChange("diagnosticOccupationnel", value)}
          readOnly={!editing}
        />
      </div>

      <div className="flex space-x-2">
        {!editing ? (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={handleEdit}>
            Modifier
          </button>
        ) : (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default PatientTherapeutic;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientDiagnosis = ({ motif, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [diagnostic, setDiagnostic] = useState(motif?.diagnostic || "");

  useEffect(() => {
    setDiagnostic(motif?.diagnostic || "");
  }, [motif]);

  const handleSave = async () => {
    if (!motif) return;

    const updatedMotif = {
      ...motif,
      diagnostic,
    };

    try {
      await updateMotif(updatedMotif);
      setEditing(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde du diagnostic :", error);
    }
  };

  const handleCancel = () => {
    setEditing(false);
    setDiagnostic(motif?.diagnostic || "");
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg h-full">
      <h4 className="text-md font-semibold mb-4">Diagnostic</h4>

      {/* ‚úÖ Ajout d'un conteneur propre pour QuillEditor */}
      <div className="border rounded-lg p-2">
        <QuillEditor
          value={diagnostic}
          onChange={setDiagnostic}
          readOnly={!editing}
          className="min-h-[150px] max-h-64 overflow-auto"
        />
      </div>

      <div className="flex space-x-2 mt-4">
        {editing ? (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        ) : (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => setEditing(true)}>
            Modifier
          </button>
        )}
      </div>
    </div>
  );
};

export default PatientDiagnosis;
import React, { useState } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientInterventions = ({ motif, updateMotif }) => {
  const [editingIndex, setEditingIndex] = useState(null);
  const [newIntervention, setNewIntervention] = useState({
    date: "",
    texte: "",
  });
  const [showForm, setShowForm] = useState(false);

  const handleInputChange = (field, value) => {
    setNewIntervention((prev) => ({ ...prev, [field]: value }));
  };

  const handleSaveIntervention = async () => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: [
        ...(motif.compteRenduInterventions || []),
        newIntervention,
      ],
    };

    try {
      await updateMotif(updatedMotif);
      setNewIntervention({ date: "", texte: "" });
      setShowForm(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de l'intervention :", error);
    }
  };

  const handleEditIntervention = (index) => {
    setEditingIndex(index);
    setNewIntervention(motif.compteRenduInterventions[index]);
    setShowForm(true);
  };

  const handleSaveEditIntervention = async () => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: motif.compteRenduInterventions.map((intervention, index) =>
        index === editingIndex ? newIntervention : intervention
      ),
    };

    try {
      await updateMotif(updatedMotif);
      setEditingIndex(null);
      setNewIntervention({ date: "", texte: "" });
      setShowForm(false);
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de l'intervention :", error);
    }
  };

  const handleDeleteIntervention = async (index) => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: motif.compteRenduInterventions.filter((_, i) => i !== index),
    };

    try {
      await updateMotif(updatedMotif);
    } catch (error) {
      console.error("Erreur lors de la suppression de l'intervention :", error);
    }
  };

  const handleCancel = () => {
    setEditingIndex(null);
    setNewIntervention({ date: "", texte: "" });
    setShowForm(false);
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-md font-semibold mb-4">Compte Rendu des Interventions</h4>

      <button
        className="mb-4 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
        onClick={() => {
          setShowForm(true);
          setEditingIndex(null);
          setNewIntervention({ date: "", texte: "" });
        }}
      >
        Ajouter une intervention
      </button>

      {showForm && (
        <div className="mb-4 border p-4 rounded-lg">
          <input
            type="date"
            className="w-full mb-2 border rounded-lg p-2"
            placeholder="Date de l'intervention"
            value={newIntervention.date}
            onChange={(e) => handleInputChange("date", e.target.value)}
          />
          <QuillEditor
            value={newIntervention.texte}
            onChange={(value) => handleInputChange("texte", value)}
            readOnly={false}
          />
          <div className="flex space-x-2 mt-4">
            {editingIndex !== null ? (
              <>
                <button
                  className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                  onClick={handleSaveEditIntervention}
                >
                  Enregistrer
                </button>
                <button
                  className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600"
                  onClick={handleCancel}
                >
                  Annuler
                </button>
              </>
            ) : (
              <button
                className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                onClick={handleSaveIntervention}
              >
                Ajouter
              </button>
            )}
          </div>
        </div>
      )}

      <div className="mt-4">
        {motif.compteRenduInterventions?.length > 0 ? (
          <ul className="space-y-2">
            {motif.compteRenduInterventions.map((intervention, index) => (
              <li key={index} className="border-b py-2">
                <div className="flex justify-between items-center">
                  <div>
                    <p><strong>Date:</strong> {intervention.date || "Non sp√©cifi√©e"}</p>
                    <div dangerouslySetInnerHTML={{ __html: intervention.texte }} />
                  </div>
                  <div className="flex space-x-2">
                    <button
                      className="text-yellow-500 hover:underline"
                      onClick={() => handleEditIntervention(index)}
                    >
                      ‚úèÔ∏è
                    </button>
                    <button
                      className="text-red-500 hover:underline"
                      onClick={() => handleDeleteIntervention(index)}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        ) : (
          <p className="text-gray-500">Aucune intervention enregistr√©e.</p>
        )}
      </div>
    </div>
  );
};

export default PatientInterventions;
import React, { useEffect, useState } from "react";
import QuillEditor from "../../QuillEditor.js";
import { createLongTermObjective, createShortTermObjective } from "../../../api/objectiveAPI.js";

const PatientObjectives = ({ motif }) => {
  const [longObjectives, setLongObjectives] = useState([]);
  const [selectedLongObjective, setSelectedLongObjective] = useState(null);

  const [newLongTitle, setNewLongTitle] = useState("");
  const [newShortObjective, setNewShortObjective] = useState({
    title: "",
    startDate: "",
    endDate: "",
    description: "",
    status: "ouvert",
  });

  const [showShortTermForm, setShowShortTermForm] = useState(false);

  const fetchObjectives = async () => {
    try {
      const res = await fetch(`http://localhost:3001/objectives/${motif.id}/objectives`, {
        credentials: "include",
      });
      const data = await res.json();
      setLongObjectives(data?.longTermObjectives || []);
    } catch (err) {
      console.error("Erreur chargement objectifs", err);
    }
  };

  useEffect(() => {
    if (motif?.id) fetchObjectives();
  }, [motif]);

  const handleAddLongTermObjective = async () => {
    if (!newLongTitle.trim()) return;
    try {
      await createLongTermObjective(motif.id, {
        title: newLongTitle,
        startDate: new Date().toISOString(),
      });
      setNewLongTitle("");
      fetchObjectives();
    } catch (err) {
      console.error("Erreur ajout objectif long terme", err);
    }
  };

  const handleAddShortTermObjective = async () => {
    if (!selectedLongObjective) return;
    try {
      await createShortTermObjective(selectedLongObjective.id, newShortObjective);
      setNewShortObjective({
        title: "",
        startDate: "",
        endDate: "",
        description: "",
        status: "ouvert",
      });
      setShowShortTermForm(false); // Fermer apr√®s ajout
      fetchObjectives();
    } catch (err) {
      console.error("Erreur ajout objectif court terme", err);
    }
  };

  const renderShortTermForm = () => (
    <>
      <input
        type="text"
        name="title"
        value={newShortObjective.title}
        onChange={(e) => setNewShortObjective({ ...newShortObjective, title: e.target.value })}
        placeholder="Titre"
        className="w-full p-2 border rounded-lg"
      />
      <input
        type="date"
        name="startDate"
        value={newShortObjective.startDate}
        onChange={(e) => setNewShortObjective({ ...newShortObjective, startDate: e.target.value })}
        className="w-full p-2 border rounded-lg"
      />
      <input
        type="date"
        name="endDate"
        value={newShortObjective.endDate}
        onChange={(e) => setNewShortObjective({ ...newShortObjective, endDate: e.target.value })}
        className="w-full p-2 border rounded-lg"
      />
      <QuillEditor
        value={newShortObjective.description}
        onChange={(value) => setNewShortObjective({ ...newShortObjective, description: value })}
        readOnly={false}
      />
      <select
        name="status"
        value={newShortObjective.status}
        onChange={(e) => setNewShortObjective({ ...newShortObjective, status: e.target.value })}
        className="w-full p-2 border rounded-lg"
      >
        <option value="ouvert">Ouvert</option>
        <option value="ferm√©">Ferm√©</option>
      </select>

      <button
        className="bg-blue-600 text-white px-4 py-2 rounded-lg"
        onClick={handleAddShortTermObjective}
      >
        Enregistrer
      </button>
    </>
  );

  return (
    <div className="flex space-x-4">
      {/* Objectifs long terme */}
      <div className="w-1/3 bg-gray-100 p-4 rounded-lg shadow">
        <h4 className="text-lg font-semibold mb-3">Objectifs Long Terme</h4>

        <input
          type="text"
          value={newLongTitle}
          onChange={(e) => setNewLongTitle(e.target.value)}
          placeholder="Titre..."
          className="w-full p-2 border rounded-lg mb-2"
        />
        <button
          className="bg-green-500 text-white px-4 py-2 rounded-lg w-full mb-4"
          onClick={handleAddLongTermObjective}
        >
          Ajouter
        </button>

        <ul className="space-y-2">
          {longObjectives.map((obj) => (
            <li
              key={obj.id}
              onClick={() => setSelectedLongObjective(obj)}
              className={`cursor-pointer p-2 rounded-lg ${
                selectedLongObjective?.id === obj.id ? "bg-blue-500 text-white" : "bg-gray-200"
              }`}
            >
              {obj.title}
            </li>
          ))}
        </ul>
      </div>

      {/* Objectifs court terme */}
      <div className="w-2/3 bg-white p-4 rounded-lg shadow">
        {selectedLongObjective ? (
          <>
            {selectedLongObjective.shortTermObjectives?.length === 0 ? (
              <>
                <h4 className="text-lg font-semibold mb-3">
                  Objectifs Court Terme pour "{selectedLongObjective.title}"
                </h4>
                <div className="space-y-4 mb-6">
                  {renderShortTermForm()}
                </div>
              </>
            ) : (
              <>
                <div className="flex justify-between items-center mb-4">
                  <h4 className="text-lg font-semibold">
                    Objectifs Court Terme pour "{selectedLongObjective.title}"
                  </h4>
                  <button
                    className="bg-blue-500 text-white px-4 py-2 rounded-lg"
                    onClick={() => setShowShortTermForm(!showShortTermForm)}
                  >
                    {showShortTermForm ? "Annuler" : "Ajouter"}
                  </button>
                </div>

                <ul className="space-y-2 mb-4">
                  {selectedLongObjective.shortTermObjectives.map((obj) => (
                    <li key={obj.id} className="p-3 bg-gray-100 rounded shadow-sm">
                      <div className="font-semibold">{obj.title}</div>
                      <div className="text-sm text-gray-600">
                        {obj.status} | Du {obj.startDate?.slice(0, 10)} au {obj.endDate?.slice(0, 10) || "..."}
                      </div>
                      {obj.description && (
                        <div
                          className="mt-2 text-sm prose max-w-none"
                          dangerouslySetInnerHTML={{ __html: obj.description }}
                        />
                      )}
                    </li>
                  ))}
                </ul>


                {showShortTermForm && (
                  <div className="space-y-4">
                    {renderShortTermForm()}
                  </div>
                )}
              </>
            )}
          </>
        ) : (
          <p className="text-gray-500">S√©lectionnez un objectif long terme.</p>
        )}
      </div>
    </div>
  );
};

export default PatientObjectives;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientSituation = ({ motif, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [newSituation, setNewSituation] = useState({
    personne: motif?.situation?.personne || "",
    occupation: motif?.situation?.occupation || "",
    environnement: motif?.situation?.environnement || "",
  });

  useEffect(() => {
    setNewSituation({
      personne: motif?.situation?.personne || "",
      occupation: motif?.situation?.occupation || "",
      environnement: motif?.situation?.environnement || "",
    });
  }, [motif]);

  const handleInputChange = (field, value) => {
    setNewSituation((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    const updated = {
      ...motif,
      situation: newSituation,
    };
    await updateMotif(updated);
    setEditing(false);
  };

  const handleCancel = () => {
    setEditing(false);
    setNewSituation({
      personne: motif?.situation?.personne || "",
      occupation: motif?.situation?.occupation || "",
      environnement: motif?.situation?.environnement || "",
    });
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-lg font-semibold mb-4">Situation Personnelle</h4>

      {["personne", "occupation", "environnement"].map((field) => (
        <div key={field} className="mb-4">
          <label className="block text-sm font-medium text-gray-700 capitalize">{field} :</label>
          <QuillEditor
            value={newSituation[field]}
            onChange={(value) => handleInputChange(field, value)}
            readOnly={!editing}
          />
        </div>
      ))}

      <div className="flex space-x-2">
        {!editing ? (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg" onClick={() => setEditing(true)}>Modifier</button>
        ) : (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg" onClick={handleSave}>Enregistrer</button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg" onClick={handleCancel}>Annuler</button>
          </>
        )}
      </div>
    </div>
  );
};

export default PatientSituation;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientSummary = ({ motif, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [synthese, setSynthese] = useState(motif?.synthese || "");

  useEffect(() => {
    setSynthese(motif?.synthese || "");
  }, [motif]);

  const handleSave = async () => {
    if (!motif) return;

    const updatedMotif = {
      ...motif,
      synthese,
    };

    try {
      await updateMotif(updatedMotif);
      setEditing(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de la synth√®se :", error);
    }
  };

  const handleCancel = () => {
    setEditing(false);
    setSynthese(motif?.synthese || "");
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg h-full">
      <h4 className="text-md font-semibold mb-4">Synth√®se</h4>

      <div className="border rounded-lg p-2">
        <QuillEditor
          value={synthese}
          onChange={setSynthese}
          readOnly={!editing}
          className="min-h-[150px] max-h-64 overflow-auto"
        />
      </div>

      <div className="flex space-x-2 mt-4">
        {editing ? (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        ) : (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => setEditing(true)}>
            Modifier
          </button>
        )}
      </div>
    </div>
  );
};

export default PatientSummary;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientTherapeutic = ({ motif, patientId, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [therapeuticData, setTherapeuticData] = useState({
    assesments: motif?.therapeutic?.assesments || "",
    syntheseEvaluation: motif?.therapeutic?.syntheseEvaluation || "",
    restrictionsSouhaits: motif?.therapeutic?.restrictionsSouhaits || "",
    diagnosticOccupationnel: motif?.therapeutic?.diagnosticOccupationnel || "",
  });

  useEffect(() => {
    setTherapeuticData({
      assesments: motif?.therapeutic?.assesments || "",
      syntheseEvaluation: motif?.therapeutic?.syntheseEvaluation || "",
      restrictionsSouhaits: motif?.therapeutic?.restrictionsSouhaits || "",
      diagnosticOccupationnel: motif?.therapeutic?.diagnosticOccupationnel || "",
    });
  }, [motif]);

  const handleInputChange = (field, value) => {
    setTherapeuticData((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    if (!motif || !patientId) {
      console.error("‚ùå patientId ou motif est undefined !");
      return;
    }

    const updatedMotif = {
      ...motif,
      therapeutic: {
        assesments: therapeuticData.assesments || "",
        syntheseEvaluation: therapeuticData.syntheseEvaluation || "",
        restrictionsSouhaits: therapeuticData.restrictionsSouhaits || "",
        diagnosticOccupationnel: therapeuticData.diagnosticOccupationnel || "",
      },
    };

    try {
      await updateMotif(updatedMotif);
      setEditing(false);
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour :", error);
    }
  };

  const handleCancel = () => {
    setEditing(false);
    setTherapeuticData({
      assesments: motif?.therapeutic?.assesments || "",
      syntheseEvaluation: motif?.therapeutic?.syntheseEvaluation || "",
      restrictionsSouhaits: motif?.therapeutic?.restrictionsSouhaits || "",
      diagnosticOccupationnel: motif?.therapeutic?.diagnosticOccupationnel || "",
    });
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-lg font-semibold mb-4">Perspective Th√©rapeutique</h4>

      {[
        { label: "Batteries Code CIF", field: "assesments" },
        { label: "Synth√®se de l'√©valuation", field: "syntheseEvaluation" },
        { label: "Restrictions de participation", field: "restrictionsSouhaits" },
        { label: "Diagnostic occupationnel", field: "diagnosticOccupationnel" },
      ].map(({ label, field }) => (
        <div key={field} className="mb-4">
          <label className="block text-sm font-medium text-gray-700">{label} :</label>
          <QuillEditor
            value={therapeuticData[field]}
            onChange={(value) => handleInputChange(field, value)}
            readOnly={!editing}
          />
        </div>
      ))}

      <div className="flex space-x-2">
        {!editing ? (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg" onClick={() => setEditing(true)}>Modifier</button>
        ) : (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg" onClick={handleSave}>Enregistrer</button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg" onClick={handleCancel}>Annuler</button>
          </>
        )}
      </div>
    </div>
  );
};

export default PatientTherapeutic;
import { db } from "./firebaseConfig.js";
import { collection, doc, setDoc, addDoc, getDocs } from "firebase/firestore";

// üîπ Ajouter une activit√©
export const addActivity = async (activityData) => {
  try {
    const docRef = await addDoc(collection(db, "activites"), activityData);
    console.log("Activit√© ajout√©e avec ID :", docRef.id);
  } catch (error) {
    console.error("Erreur lors de l'ajout de l'activit√© :", error);
  }
};

// üîπ R√©cup√©rer toutes les activit√©s
export const getAllActivities = async () => {
  try {
    const activitiesSnap = await getDocs(collection(db, "activites"));
    return activitiesSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des activit√©s :", error);
  }
};
import { db } from "./firebaseConfig.js";
import { collection, doc, setDoc, addDoc, getDocs } from "firebase/firestore";

// üîπ Ajouter un rendez-vous
export const addAppointment = async (appointmentData) => {
  try {
    const docRef = await addDoc(collection(db, "rendezvous"), appointmentData);
    console.log("Rendez-vous ajout√© avec ID :", docRef.id);
  } catch (error) {
    console.error("Erreur lors de l'ajout du rendez-vous :", error);
  }
};

// üîπ R√©cup√©rer tous les rendez-vous
export const getAllAppointments = async () => {
  try {
    const appointmentsSnap = await getDocs(collection(db, "rendezvous"));
    return appointmentsSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des rendez-vous :", error);
  }
};
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

const firebaseConfig = {
  apiKey: "API_KEY",
  authDomain: "ergogo-88fd0.firebaseapp.com",
  projectId: "ergogo-88fd0",
  storageBucket: "ergogo-88fd0.firebasestorage.app",
  messagingSenderId: "1070148585931",
  appId: "1:1070148585931:web:448db2fcc2bad9ec4a4e4e"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

export { db };
import { db } from "./firebaseConfig.js";
import { collection, doc, addDoc, getDocs, updateDoc, deleteDoc } from "firebase/firestore";

// üîπ Ajouter une note √† un patient
export const addNoteToPatient = async (patientId, noteData) => {
  try {
    const docRef = await addDoc(collection(db, `patients/${patientId}/notes`), noteData);
    return { id: docRef.id, ...noteData };
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ajout de la note :", error);
    return null;
  }
};

// üîπ R√©cup√©rer les notes d'un patient
export const getPatientNotes = async (patientId) => {
  try {
    const snapshot = await getDocs(collection(db, `patients/${patientId}/notes`));
    return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des notes :", error);
    return [];
  }
};

// üîπ Mettre √† jour une note
export const updateNote = async (patientId, noteId, updatedData) => {
  try {
    await updateDoc(doc(db, `patients/${patientId}/notes/${noteId}`), updatedData);
    console.log("‚úÖ Note mise √† jour avec succ√®s !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour de la note :", error);
  }
};

// üîπ Supprimer une note
export const deleteNote = async (patientId, noteId) => {
  try {
    await deleteDoc(doc(db, `patients/${patientId}/notes/${noteId}`));
    console.log("‚úÖ Note supprim√©e avec succ√®s !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de la note :", error);
  }
};
import { db } from "./firebaseConfig.js";
import { collection, doc, addDoc, getDoc, getDocs, deleteDoc, updateDoc } from "firebase/firestore";

// üîπ Ajouter un patient
export const addPatient = async (patientData) => {
  try {
    const docRef = await addDoc(collection(db, "patients"), patientData);
    console.log("‚úÖ Patient ajout√© avec ID :", docRef.id);
    return docRef.id;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ajout du patient :", error);
  }
};

// üîπ R√©cup√©rer tous les patients
export const getAllPatients = async () => {
  try {
    const patientsSnap = await getDocs(collection(db, "patients"));
    return patientsSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des patients :", error);
  }
};

// üîπ R√©cup√©rer un patient par ID
export const getPatient = async (patientId) => {
  try {
    const patientDoc = await getDoc(doc(db, "patients", patientId));
    return patientDoc.exists() ? { id: patientDoc.id, ...patientDoc.data() } : null;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration du patient :", error);
  }
};

// üîπ Supprimer un patient
export const deletePatient = async (patientId) => {
  try {
    await deleteDoc(doc(db, "patients", patientId));
    console.log("‚úÖ Patient supprim√© avec succ√®s.");
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression du patient :", error);
  }
};

// üîπ Mettre √† jour un patient
export const updatePatient = async (patientId, updatedData) => {
  if (!patientId) {
    console.error("‚ùå Erreur: patientId est undefined !");
    return false;
  }

  // üî• Correction : Remplace `undefined` par `null`
  const sanitizeObject = (obj) => {
    return Object.keys(obj).reduce((acc, key) => {
      acc[key] = obj[key] === undefined ? null : obj[key];
      return acc;
    }, {});
  };

  const cleanedData = sanitizeObject(updatedData);

  console.log(`üì§ Mise √† jour Firestore : patients/${patientId}`);
  console.log("üì§ Donn√©es envoy√©es :", cleanedData);

  try {
    await updateDoc(doc(db, `patients/${patientId}`), cleanedData);
    console.log("‚úÖ Mise √† jour r√©ussie !");
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour Firestore :", error);
    return false;
  }
};

// üîπ Ajouter un motif d'intervention pour un patient
export const addMotifIntervention = async (patientId, motifData) => {
  try {
    const docRef = await addDoc(collection(db, `patients/${patientId}/motifsIntervention`), motifData);
    return { id: docRef.id, ...motifData };
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ajout du motif :", error);
    return null;
  }
};

// üîπ R√©cup√©rer tous les motifs d'intervention d'un patient
export const getMotifsIntervention = async (patientId) => {
  try {
    const snapshot = await getDocs(collection(db, `patients/${patientId}/motifsIntervention`));
    return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des motifs :", error);
    return [];
  }
};

// üîπ Mettre √† jour un motif d'intervention
export const updateMotifIntervention = async (patientId, motifId, updatedData) => {
  if (!patientId || !motifId) {
    console.error("‚ùå Erreur: patientId ou motifId est undefined !");
    return false;
  }

  // üî• Correction : Remplace `undefined` par `null`
  const sanitizeObject = (obj) => {
    return Object.keys(obj).reduce((acc, key) => {
      acc[key] = obj[key] === undefined ? null : obj[key];
      return acc;
    }, {});
  };

  const cleanedData = sanitizeObject(updatedData);

  console.log(`üì§ Mise √† jour Firestore : patients/${patientId}/motifsIntervention/${motifId}`);
  console.log("üì§ Donn√©es envoy√©es :", cleanedData);

  try {
    await updateDoc(doc(db, `patients/${patientId}/motifsIntervention/${motifId}`), cleanedData);
    console.log("‚úÖ Mise √† jour r√©ussie !");
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour Firestore :", error);
    return false;
  }
};
import { db } from "./firebaseConfig.js";
import { doc, setDoc, getDoc } from "firebase/firestore";

// üîπ Ajouter un utilisateur
export const addUser = async (userId, userData) => {
  try {
    await setDoc(doc(db, "utilisateurs", userId), userData);
    console.log("Utilisateur ajout√© !");
  } catch (error) {
    console.error("Erreur lors de l'ajout de l'utilisateur :", error);
  }
};

// üîπ R√©cup√©rer un utilisateur
export const getUser = async (userId) => {
  try {
    const userDoc = await getDoc(doc(db, "utilisateurs", userId));
    return userDoc.exists() ? userDoc.data() : null;
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration de l'utilisateur :", error);
  }
};
import React, { useState } from 'react';
import ActivityList from '../components/activities/ActivityList.js';
import ActivityForm from '../components/activities/ActivityForm.js';
import ActivityFilters from '../components/activities/ActivityFilters.js';
import Toast from '../components/Toast.js'; 

const ActivitiesPage = () => {
  const [refresh, setRefresh] = useState(false);
  const [filters, setFilters] = useState({ name: '', description: '', objectives: [] });
  const [toastMessage, setToastMessage] = useState('');

  const triggerRefresh = () => {
    setRefresh(prev => !prev);
  };

  const showToast = (message) => {
    setToastMessage(message);
    setTimeout(() => setToastMessage(''), 3000); 
  };

  return (
    <div className="h-screen flex flex-col overflow-hidden">
      {/* En-t√™te fixe */}
      <div className="p-6 border-b bg-white">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <h1 className="text-3xl font-bold">Activit√©s th√©rapeutiques</h1>
          <ActivityForm onCreated={() => { triggerRefresh(); showToast("Activit√© ajout√©e !"); }} showToast={showToast} />
        </div>
      </div>

      {/* Corps scrollable */}
      <div className="flex-1 overflow-y-auto no-scrollbar">
        <div className="max-w-7xl mx-auto p-6 flex gap-6">
          {/* Filtres */}
          <div className="w-full max-w-xs">
            <div className="bg-white rounded shadow p-4 sticky top-28">
              <ActivityFilters filters={filters} setFilters={setFilters} onCreated={refresh} />
            </div>
          </div>

          {/* Liste scrollable */}
          <div className="flex-1 min-h-0 overflow-y-auto no-scrollbar">
            <ActivityList
              filters={filters}
              refresh={refresh}
              onEditActivity={(activity) => {
                console.log("Modifier activit√© :", activity);
              }}
            />
          </div>
        </div>
      </div>

      <Toast message={toastMessage} />
    </div>
  );
};

export default ActivitiesPage;
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { createPatient } from "../api/patientAPI.js";
import PatientForm from "../components/PatientDetails/PatientForm.js";

const AddPatientPage = () => {
  const [newPatient, setNewPatient] = useState({});
  const navigate = useNavigate();

  // üîß Fonction pour nettoyer et formater les donn√©es avant envoi
  const sanitizePatientData = (data) => ({
    ...data,
    birthdate: data.birthdate
      ? new Date(data.birthdate + "T00:00:00.000Z").toISOString()
      : null,
    childrenCount:
      data.childrenCount !== "" && !isNaN(data.childrenCount)
        ? parseInt(data.childrenCount, 10)
        : null,
  });

  const handleAddPatient = async () => {
    try {
      const preparedData = sanitizePatientData(newPatient);
      await createPatient(preparedData);
      navigate("/patients");
    } catch (err) {
      console.error("Erreur lors de l'ajout du patient :", err);
      alert("Une erreur est survenue lors de l'ajout du patient.");
    }
  };

  const handleChange = (e) => {
    setNewPatient({ ...newPatient, [e.target.name]: e.target.value });
  };

  return (
    <PatientForm
      patientData={newPatient}
      handleChange={handleChange}
      handleSubmit={handleAddPatient}
      isEditing={false}
    />
  );
};

export default AddPatientPage;
import React from 'react';
import Calendar from '../components/Calendar.js';

const CalendarPage = () => {
  return (
    <div className="w-full flex-grow flex flex-col items-center">
      <div className="w-full h-full">
        <Calendar />
      </div>
    </div>
  );
};

export default CalendarPage;
// src/pages/LoginPage.js
import { useState } from "react";
import { useNavigate } from "react-router-dom";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const res = await fetch("http://localhost:3001/auth/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify({ email, password }),
    });

    if (res.ok) {
      alert("Connexion r√©ussie !");
      navigate("/"); // √† adapter selon ta route
    } else {
      alert("√âchec de la connexion. V√©rifie tes identifiants.");
    }
  };

  return (
    <div className="flex items-center justify-center h-screen bg-gray-100">
      <div className="bg-white shadow-lg rounded-lg p-8 w-full max-w-md">
        <h2 className="text-2xl font-bold mb-6 text-center text-gray-800">
          Connexion √† Ergogo
        </h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-gray-700 font-semibold mb-1">
              Email
            </label>
            <input
              type="email"
              className="w-full border p-2 rounded-lg"
              placeholder="Adresse email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          <div>
            <label className="block text-gray-700 font-semibold mb-1">
              Mot de passe
            </label>
            <input
              type="password"
              className="w-full border p-2 rounded-lg"
              placeholder="Mot de passe"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>

          <button
            type="submit"
            className="w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition"
          >
            Se connecter
          </button>
        </form>
      </div>
    </div>
  );
}
import React from 'react';
import Patients from '../components/Patients.js';

const PatientsPage = () => {
  return (
    <div className="w-full flex-grow flex flex-col items-center">
      <div className="w-full max-w-4xl">
        <Patients />
      </div>
    </div>
  );
};

export default PatientsPage;
// src/pages/ReportsPage.js
import React from 'react';
import ReportBuilder from '../components/ReportBuilder.js';

const ReportsPage = () => {
  return (
    <div className="h-screen flex flex-col overflow-hidden">
      {/* En-t√™te fixe */}
      <div className="p-6 border-b bg-white">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <h1 className="text-3xl font-bold">Rapports</h1>
        </div>
      </div>

      {/* Corps scrollable */}
      <div className="flex-1 overflow-y-auto no-scrollbar">
        <div className="max-w-7xl mx-auto p-6 flex gap-6">
          {/* Liste scrollable */}
          <div className="flex-1 min-h-0 overflow-y-auto no-scrollbar">
            <ReportBuilder />
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReportsPage;
