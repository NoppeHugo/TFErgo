import React, { useState, useRef, useEffect } from 'react';
import { FiMoreVertical } from 'react-icons/fi';
import ActivityFileViewer from './ActivityFileViewer.js';

const ActivityCard = ({ activity, onEdit, onDelete, onOpen }) => {
  const [menuOpen, setMenuOpen] = useState(false);
  const menuRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setMenuOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div
      className="relative bg-white rounded-2xl border border-gray-200 shadow hover:shadow-lg transition cursor-pointer flex flex-col justify-between p-6"
      onClick={() => onOpen(activity)}
    >
      <div className="absolute top-2 right-2 z-20" ref={menuRef} onClick={(e) => e.stopPropagation()}>
        <button
          onClick={() => setMenuOpen(prev => !prev)}
          className="text-gray-500 hover:text-gray-800 p-1 rounded-full hover:bg-gray-100"
        >
          <FiMoreVertical size={18} />
        </button>
        {menuOpen && (
          <div className="absolute right-0 mt-2 bg-white border rounded-lg shadow-lg w-36 py-1 text-sm z-30">
            <button
              onClick={() => { setMenuOpen(false); onEdit(); }}
              className="w-full text-left px-4 py-2 hover:bg-purple-100"
            >
              Modifier
            </button>
            <button
              onClick={() => { setMenuOpen(false); onDelete(); }}
              className="w-full text-left px-4 py-2 text-red-600 hover:bg-red-100"
            >
              Supprimer
            </button>
          </div>
        )}
      </div>

      <h2 className="text-xl font-bold text-darkPurpleErgogo">{activity.name}</h2>
      <p className="text-gray-600 text-sm mt-1 whitespace-pre-line line-clamp-2">{activity.description}</p>

      {activity.link && (
        <a
          href={activity.link}
          target="_blank"
          rel="noopener noreferrer"
          className="text-darkPurpleErgogo text-sm underline mt-2 inline-block"
          onClick={(e) => e.stopPropagation()}
        >
          Lien externe
        </a>
      )}

      <div className="mt-3">
        <p className="text-sm font-semibold text-gray-700">Objectifs :</p>
        {activity.objectives?.length ? (
          <div className="flex flex-wrap gap-2 mt-1">
            {activity.objectives.map(o => (
              <span
                key={o.objective.id}
                className="text-xs px-2 py-1 bg-lightPurpleErgogo text-white rounded-full"
              >
                {o.objective.name}
              </span>
            ))}
          </div>
        ) : (
          <p className="text-sm text-gray-400">Aucun</p>
        )}
      </div>

      <div className="mt-3">
        <p className="text-sm font-semibold text-gray-700">Matériel :</p>
        {activity.materials?.length ? (
          <div className="flex flex-wrap gap-2 mt-1">
            {activity.materials.map(m => (
              <span
                key={m.material.id}
                className="text-xs px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full"
              >
                {m.material.name}
              </span>
            ))}
          </div>
        ) : (
          <p className="text-sm text-gray-400">Aucun</p>
        )}
      </div>

      <div className="mt-3">
        <p className="text-sm font-semibold text-gray-700">Fichiers :</p>
        <ActivityFileViewer files={activity.files} />
      </div>
    </div>
  );
};

export default ActivityCard;
import React, { useEffect, useState, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getActivityById, deleteActivity, updateActivity, uploadFileToActivity, deleteFile } from '../../api/activityAPI.js';
import { getGoals } from '../../api/goalAPI.js';
import { getMaterials } from '../../api/materialAPI.js';
import { FiArrowLeft, FiChevronLeft, FiChevronRight, FiX } from 'react-icons/fi';
import Select from 'react-select';
import MaterialSelect from './MaterialSelect.js';

const ActivityDetailsPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [activity, setActivity] = useState(null);
  const [editing, setEditing] = useState(false);

  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [link, setLink] = useState('');
  const [selectedGoals, setSelectedGoals] = useState([]);
  const [goals, setGoals] = useState([]);
  const [existingImages, setExistingImages] = useState([]);
  const [newImages, setNewImages] = useState([]);
  const [selectedMaterials, setSelectedMaterials] = useState([]);
  const [dragging, setDragging] = useState(false);
  const [startX, setStartX] = useState(0);
  const [scrollLeft, setScrollLeft] = useState(0);

  const imagesContainerRef = useRef(null);

  useEffect(() => {
    const fetchData = async () => {
      const res = await getActivityById(id);
      const act = res.data;
      setActivity(act);
      setName(act.name);
      setDescription(act.description);
      setLink(act.link);
      setExistingImages(act.files?.filter((f) => f.fileType.startsWith('image/')) || []);
      setSelectedGoals(act.objectives.map((o) => ({ value: o.objective.id, label: o.objective.name })));
      const materialsRes = await getMaterials();
      const mappedMaterials = act.materials.map((m) => ({ value: m.material.id, label: m.material.name }));
      setSelectedMaterials(mappedMaterials);
      setGoals(materialsRes.data);
    };
    fetchData();
  }, [id]);

  const handleDelete = async () => {
    if (window.confirm('Supprimer cette activité ?')) {
      await deleteActivity(activity.id);
      navigate('/activities');
    }
  };

  const handleUpdate = async (e) => {
    e.preventDefault();
    await updateActivity(activity.id, {
      name,
      description,
      link,
      objectiveIds: selectedGoals.map((o) => o.value),
      materialIds: selectedMaterials.map((m) => m.value),
    });

    for (const file of newImages) {
      const reader = new FileReader();
      await new Promise((resolve) => {
        reader.onloadend = async () => {
          await uploadFileToActivity(activity.id, {
            fileUrl: reader.result,
            fileType: file.type,
            fileName: file.name,
          });
          resolve();
        };
        reader.readAsDataURL(file);
      });
    }

    setEditing(false);
    const updated = await getActivityById(id);
    setActivity(updated.data);
    setExistingImages(updated.data.files?.filter((f) => f.fileType.startsWith('image/')) || []);
    setNewImages([]);
  };

  const handleRemoveImage = async (fileId) => {
    if (window.confirm('Supprimer cette image ?')) {
      await deleteFile(fileId);
      setExistingImages((prev) => prev.filter((img) => img.id !== fileId));
    }
  };

  const handleAddImages = (e) => {
    const files = Array.from(e.target.files);
    setNewImages((prev) => [...prev, ...files]);
  };

  const handleMouseDown = (e) => {
    setDragging(true);
    setStartX(e.pageX - imagesContainerRef.current.offsetLeft);
    setScrollLeft(imagesContainerRef.current.scrollLeft);
  };

  const handleMouseMove = (e) => {
    if (!dragging) return;
    e.preventDefault();
    const x = e.pageX - imagesContainerRef.current.offsetLeft;
    const walk = (x - startX) * 2; // Vitesse de défilement
    imagesContainerRef.current.scrollLeft = scrollLeft - walk;
  };

  const handleMouseUp = () => {
    setDragging(false);
  };

  const handleTouchStart = (e) => {
    setDragging(true);
    setStartX(e.touches[0].pageX - imagesContainerRef.current.offsetLeft);
    setScrollLeft(imagesContainerRef.current.scrollLeft);
  };

  const handleTouchMove = (e) => {
    if (!dragging) return;
    const x = e.touches[0].pageX - imagesContainerRef.current.offsetLeft;
    const walk = (x - startX) * 2;
    imagesContainerRef.current.scrollLeft = scrollLeft - walk;
  };

  const handleTouchEnd = () => {
    setDragging(false);
  };

  if (!activity) return <p className="text-center mt-10">Chargement...</p>;

  return (
    <div className="w-full min-h-screen bg-white px-4 md:px-12 py-8 overflow-x-hidden">
      <div className="max-w-5xl mx-auto relative">
        <button
          onClick={() => navigate(-1)}
          className="absolute left-0 top-0 text-gray-600 hover:text-black flex items-center gap-2"
        >
          <FiArrowLeft size={20} /> Retour
        </button>

        {!editing ? (
          <>
            <div className="text-center">
              <h2 className="text-3xl font-bold text-purple-700 mb-2">{activity.name}</h2>
              <p className="text-gray-700 whitespace-pre-line mb-4">{activity.description}</p>
              {activity.link && (
                <a href={activity.link} target="_blank" rel="noopener noreferrer" className="text-purple-600 underline text-sm">
                  Lien externe
                </a>
              )}
            </div>

            <div className="my-6">
              <p className="text-sm font-semibold text-gray-700 mb-1">Objectifs :</p>
              {activity.objectives?.length ? (
                <div className="flex flex-wrap gap-2">
                  {activity.objectives.map((o) => (
                    <span key={o.objective.id} className="text-xs px-2 py-1 bg-purple-100 text-purple-800 rounded-full">
                      {o.objective.name}
                    </span>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-gray-400">Aucun</p>
              )}
            </div>

            <div className="my-6">
              <p className="text-sm font-semibold text-gray-700 mb-1">Matériel :</p>
              {activity.materials?.length ? (
                <div className="flex flex-wrap gap-2">
                  {activity.materials.map((m) => (
                    <span key={m.material.id} className="text-xs px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full">
                      {m.material.name}
                    </span>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-gray-400">Aucun</p>
              )}
            </div>

            {existingImages.length > 0 && (
              <div
                ref={imagesContainerRef}
                className="flex overflow-x-auto gap-4 mt-8 pb-4 cursor-grab active:cursor-grabbing"
                onMouseDown={handleMouseDown}
                onMouseMove={handleMouseMove}
                onMouseUp={handleMouseUp}
                onMouseLeave={handleMouseUp}
                onTouchStart={handleTouchStart}
                onTouchMove={handleTouchMove}
                onTouchEnd={handleTouchEnd}
              >
                {existingImages.map((file, index) => (
                  <div key={file.id} className="flex-shrink-0 w-[300px] h-[300px] bg-gray-100 rounded overflow-hidden shadow">
                    <img src={file.fileUrl} alt={`Image ${index + 1}`} className="w-full h-full object-cover" />
                  </div>
                ))}
              </div>
            )}

            <div className="flex justify-end gap-4 mt-8">
              <button onClick={() => setEditing(true)} className="text-blue-600 hover:underline">Modifier</button>
              <button onClick={handleDelete} className="text-red-600 hover:underline">Supprimer</button>
            </div>
          </>
        ) : (
          <form onSubmit={handleUpdate} className="bg-white p-6 rounded border shadow space-y-4 mt-6">
            <h2 className="text-xl font-semibold text-purple-700">Modifier l’activité</h2>

            <input type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="Nom" className="w-full border px-3 py-2 rounded" />
            <textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder="Description" rows={3} className="w-full border px-3 py-2 rounded" />
            <input type="text" value={link} onChange={(e) => setLink(e.target.value)} placeholder="Lien externe" className="w-full border px-3 py-2 rounded" />

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Objectifs :</label>
              <Select options={goals.map((g) => ({ value: g.id, label: g.name }))} isMulti value={selectedGoals} onChange={setSelectedGoals} />
            </div>

            <MaterialSelect selectedMaterials={selectedMaterials} setSelectedMaterials={setSelectedMaterials} />

            <div className="grid grid-cols-2 md:grid-cols-3 gap-3 mt-4">
              {existingImages.map((img) => (
                <div key={img.id} className="relative">
                  <img src={img.fileUrl} alt="fichier activité" className="w-full h-[120px] object-cover rounded" />
                  <button type="button" onClick={() => handleRemoveImage(img.id)} className="absolute top-1 right-1 bg-white/70 hover:bg-white text-red-600 rounded-full p-1">
                    <FiX size={18} />
                  </button>
                </div>
              ))}
            </div>

            <div className="mt-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">Ajouter des images :</label>
              <input type="file" multiple accept="image/*" onChange={handleAddImages} />
              {newImages.length > 0 && <p className="text-sm text-gray-500 mt-1">{newImages.length} image(s) sélectionnée(s)</p>}
            </div>

            <div className="flex gap-4 mt-4">
              <button type="submit" className="bg-dark2GreenErgogo hover:bg-green-700 text-white px-4 py-2 rounded transition">Enregistrer</button>
              <button type="button" onClick={() => setEditing(false)} className="text-gray-600 hover:underline">Annuler</button>
            </div>
          </form>
        )}
      </div>
    </div>
  );
};

export default ActivityDetailsPage;
import React from 'react';

const ActivityFileViewer = ({ files }) => {
  if (!files || files.length === 0) return null;

  const imageFiles = files.filter(f => f.fileType.startsWith('image/'));
  const otherFiles = files.filter(f => !f.fileType.startsWith('image/'));
  const visibleImages = imageFiles.slice(0, 3);
  const extraCount = imageFiles.length > 3 ? imageFiles.length - 3 : 0;

  return (
    <div className="mt-2 space-y-2">
      {imageFiles.length > 0 && (
        <div className="grid grid-cols-2 gap-2">
          {visibleImages.slice(0, 2).map((file) => (
            <div key={file.id} className="relative aspect-square overflow-hidden rounded">
              <img
                src={file.fileUrl}
                alt="Image activité"
                className="w-full h-full object-cover"
              />
            </div>
          ))}
          {visibleImages[2] && (
            <div className="col-span-2 relative h-[100px] overflow-hidden rounded">
              <img
                src={visibleImages[2].fileUrl}
                alt="Image activité"
                className="w-full h-full object-cover"
              />
              {extraCount > 0 && (
                <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center text-white text-lg font-bold">
                  +{extraCount}
                </div>
              )}
            </div>
          )}
        </div>
      )}

      {otherFiles.length > 0 && (
        <div className="space-y-1">
          {otherFiles.map((file) => {
            if (file.fileType === 'application/pdf') {
              return <iframe key={file.id} src={file.fileUrl} className="w-full h-32 rounded" />;
            }
            if (file.fileType.startsWith('audio/')) {
              return <audio key={file.id} controls src={file.fileUrl} className="w-full" />;
            }
            if (file.fileType.startsWith('video/')) {
              return <video key={file.id} controls src={file.fileUrl} className="w-full" />;
            }
            return null;
          })}
        </div>
      )}
    </div>
  );
};

export default ActivityFileViewer;
import React, { useEffect, useState } from 'react';
import { getGoals } from '../../api/goalAPI.js';

const ActivityFilters = ({ filters, setFilters, onCreated }) => {
  const [goals, setGoals] = useState([]);
  const [error, setError] = useState('');
  const [fade, setFade] = useState(false);
  const [removingIndex, setRemovingIndex] = useState(null);

  const loadGoals = () => {
    getGoals().then(res => setGoals(res.data));
  };

  useEffect(() => {
    loadGoals();
  }, [onCreated]);

  const handleChangeObjective = (index, value) => {
    const updated = [...filters.objectives];
    updated[index] = Number(value);
    setFilters({ ...filters, objectives: updated });
    setError('');
  };

  const handleAddObjectiveField = () => {
    if (filters.objectives.includes(null)) {
      setError("Veuillez remplir l'objectif précédent avant d'en ajouter un autre.");
      setFade(false);
      setTimeout(() => setFade(true), 2500);
      setTimeout(() => setError(''), 3000);
      return;
    }
    setFilters({ ...filters, objectives: [...filters.objectives, null] });
    setError('');
    setFade(false);
  };

  const handleRemoveObjective = (index) => {
    setRemovingIndex(index);
    setTimeout(() => {
      const updated = [...filters.objectives];
      updated.splice(index, 1);
      setFilters({ ...filters, objectives: updated });
      setRemovingIndex(null);
    }, 300);
    setError('');
  };

  return (
    <div className="flex flex-col gap-6 transition-all duration-500 ease-in-out">
      
      {/* Barre de recherche */}
      <div className="flex flex-col gap-3">
        <input
          type="text"
          placeholder="Rechercher par nom"
          className="border border-gray-300 rounded-lg px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-lightPurpleErgogo"
          value={filters.name}
          onChange={(e) => setFilters({ ...filters, name: e.target.value })}
        />
        <input
          type="text"
          placeholder="Rechercher par description"
          className="border border-gray-300 rounded-lg px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-lightPurpleErgogo"
          value={filters.description}
          onChange={(e) => setFilters({ ...filters, description: e.target.value })}
        />
      </div>

      {/* Objectifs */}
      <div className="flex flex-col gap-3">
        <label className="text-sm font-semibold text-gray-700">
          Filtrer par objectifs :
        </label>
        {filters.objectives.map((id, index) => (
          <div
            key={index}
            className={`flex items-center gap-2 transition-all ${
              removingIndex === index ? 'animate-fade-out' : 'animate-fade-in'
            }`}
          >
            <select
              className="flex-grow border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-lightPurpleErgogo"
              value={id || ''}
              onChange={(e) => handleChangeObjective(index, e.target.value)}
            >
              <option value="">Objectif {index + 1}</option>
              {goals.map(goal => (
                <option key={goal.id} value={goal.id}>
                  {goal.name}
                </option>
              ))}
            </select>
            <button
              onClick={() => handleRemoveObjective(index)}
              className="text-red-500 hover:text-red-700 text-xl font-bold"
              title="Supprimer"
            >
              &times;
            </button>
          </div>
        ))}

        {/* Message d'erreur animé */}
        {error && (
          <div
            className={`bg-red-100 border border-red-300 text-red-700 text-xs rounded-lg px-3 py-2 transition-opacity duration-500 ease-in-out animate-fade-in ${
              fade ? 'opacity-0' : 'opacity-100'
            }`}
          >
            {error}
          </div>
        )}

        <button
          onClick={handleAddObjectiveField}
          type="button"
          className="mt-2 text-sm text-darkPurpleErgogo hover:underline"
        >
          + Ajouter un objectif
        </button>
      </div>
      
    </div>
  );
};

export default ActivityFilters;
import React, { useState, useEffect } from 'react';
import Select from 'react-select';
import { createActivity, uploadFileToActivity } from '../../api/activityAPI.js';
import { getGoals, createGoal } from '../../api/goalAPI.js';
import MaterialSelect from './MaterialSelect.js';

const ActivityForm = ({ onCreated, showToast }) => {
  const [visible, setVisible] = useState(false);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [link, setLink] = useState('');
  const [selectedGoals, setSelectedGoals] = useState([]);
  const [goals, setGoals] = useState([]);
  const [files, setFiles] = useState([]);
  const [newGoalName, setNewGoalName] = useState('');
  const [errors, setErrors] = useState({});
  const [fadeErrors, setFadeErrors] = useState(false);
  const [goalError, setGoalError] = useState('');
  const [fadeGoalError, setFadeGoalError] = useState(false);
  const [selectedMaterials, setSelectedMaterials] = useState([]);

  const loadGoals = () => {
    getGoals().then(res => {
      const sorted = res.data.sort((a, b) => a.name.localeCompare(b.name));
      setGoals(sorted);
    });
  };

  useEffect(() => {
    loadGoals();
  }, []);

  const goalOptions = goals.map(goal => ({ value: goal.id, label: goal.name }));

  const handleFileChange = (e) => setFiles([...e.target.files]);

  const validate = () => {
    const newErrors = {};
    if (!name.trim()) newErrors.name = 'Le nom est requis.';
    if (selectedGoals.length === 0) newErrors.goals = 'Veuillez sélectionner au moins un objectif.';
    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const validationErrors = validate();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      setFadeErrors(false);
      setTimeout(() => setFadeErrors(true), 2500);
      setTimeout(() => setErrors({}), 3000);
      return;
    }

    const newActivity = await createActivity({
      therapistId: 1, // ⚠️ Remplacer par l’ID du thérapeute connecté
      name,
      description,
      link,
      objectiveIds: selectedGoals.map(g => g.value),
      materialIds: selectedMaterials.map(m => m.value),
    });

    const activityId = newActivity.data.id;

    const uploads = files.map((file) => {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = async () => {
          await uploadFileToActivity(activityId, {
            fileUrl: reader.result,
            fileType: file.type,
            fileName: file.name,
          });
          resolve();
        };
        reader.readAsDataURL(file);
      });
    });

    await Promise.all(uploads);

    showToast && showToast("Activité ajoutée !");
    onCreated();

    setName('');
    setDescription('');
    setLink('');
    setSelectedGoals([]);
    setFiles([]);
    setVisible(false);
    setErrors({});
  };

  const handleAddGoal = async (e) => {
    e.preventDefault();
    if (!newGoalName.trim()) {
      setGoalError("Veuillez écrire un objectif avant de l’ajouter.");
      setFadeGoalError(false);
      setTimeout(() => setFadeGoalError(true), 2500);
      setTimeout(() => setGoalError(''), 3000);
      return;
    }
    await createGoal({ name: newGoalName });
    setNewGoalName('');
    loadGoals();
    onCreated();
    showToast && showToast("Objectif ajouté !");
  };

  if (!visible) {
    return (
      <div className="flex gap-4 flex-wrap">
        <form onSubmit={handleAddGoal} className="flex flex-col gap-1">
          <div className="flex items-center gap-2">
            <input
              type="text"
              value={newGoalName}
              onChange={(e) => setNewGoalName(e.target.value)}
              placeholder="Nouvel objectif"
              className="border px-2 py-1 rounded text-sm shadow-sm"
            />
            <button
              type="submit"
              className="bg-dark2GreenErgogo hover:bg-greenErgogo/90 text-white px-3 py-1 rounded text-sm transition"
            >
              + Objectif
            </button>
          </div>
          {goalError && (
            <div
              className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${
                fadeGoalError ? 'opacity-0' : 'opacity-100'
              }`}
            >
              {goalError}
            </div>
          )}
        </form>

        <button
          onClick={() => setVisible(true)}
          className="bg-lightPurpleErgogo hover:bg-violetErgogo/90 text-white px-3 py-1 rounded text-sm transition"
        >
          + Ajouter une activité
        </button>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="bg-white p-6 rounded border shadow space-y-4 animate-fade-in w-full">
      <div className="flex flex-col gap-1">
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Nom de l’activité"
          className="w-full border px-3 py-2 rounded"
        />
        {errors.name && (
          <div className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${fadeErrors ? 'opacity-0' : 'opacity-100'}`}>
            {errors.name}
          </div>
        )}
      </div>

      <textarea
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        placeholder="Description"
        className="w-full border px-3 py-2 rounded"
        rows={3}
      />

      <input
        type="text"
        value={link}
        onChange={(e) => setLink(e.target.value)}
        placeholder="Lien externe"
        className="w-full border px-3 py-2 rounded"
      />

      <div className="flex flex-col gap-1">
        <label className="block text-sm font-medium text-gray-700">Objectifs liés :</label>
        <Select
          options={goalOptions}
          isMulti
          value={selectedGoals}
          onChange={setSelectedGoals}
          className="text-sm"
          placeholder="Sélectionner des objectifs"
        />
        {errors.goals && (
          <div className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${fadeErrors ? 'opacity-0' : 'opacity-100'}`}>
            {errors.goals}
          </div>
        )}
      </div>

      <MaterialSelect
        selectedMaterials={selectedMaterials}
        setSelectedMaterials={setSelectedMaterials}
        showToast={showToast}
      />

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Fichiers :</label>
        <input type="file" multiple onChange={handleFileChange} />
      </div>

      <div className="flex gap-4 pt-2">
        <button
          type="submit"
          className="bg-dark2GreenErgogo hover:bg-green-700 text-white px-4 py-2 rounded transition"
        >
          Créer
        </button>
        <button
          type="button"
          onClick={() => setVisible(false)}
          className="text-gray-600 hover:underline"
        >
          Annuler
        </button>
      </div>
    </form>
  );
};

export default ActivityForm;
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { searchActivities, deleteActivity } from '../../api/activityAPI.js';
import ActivityCard from './ActivityCard.js';
import EditActivityForm from './EditActivityForm.js';

const ActivityList = ({ filters, refresh }) => {
  const [activities, setActivities] = useState([]);
  const [editingActivity, setEditingActivity] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    searchActivities({
      name: filters.name || '',
      description: filters.description || '',
      objectives: filters.objectives?.join(',') || '',
    }).then(res => setActivities(res.data));
  }, [filters, refresh]);

  const handleDelete = async (id) => {
    if (window.confirm("Supprimer cette activité ?")) {
      await deleteActivity(id);
      setActivities(prev => prev.filter(a => a.id !== id));
    }
  };

  const handleUpdated = () => {
    setEditingActivity(null);
    searchActivities({
      name: filters.name || '',
      description: filters.description || '',
      objectives: filters.objectives?.join(',') || '',
    }).then(res => setActivities(res.data));
  };

  return (
    <>
      {editingActivity ? (
        <div className="mb-6">
          <EditActivityForm
            activity={editingActivity}
            onClose={() => setEditingActivity(null)}
            onUpdated={handleUpdated}
          />
        </div>
      ) : (
        <div className="columns-1 sm:columns-2 gap-6 space-y-6">
          {activities.map(activity => (
            <div key={activity.id} className="break-inside-avoid">
              <ActivityCard
                activity={activity}
                onEdit={() => setEditingActivity(activity)}
                onDelete={() => handleDelete(activity.id)}
                onOpen={() => navigate(`/activities/${activity.id}`)}
              />
            </div>
          ))}
        </div>
      )}
    </>
  );
};

export default ActivityList;
import React, { useState, useEffect } from 'react';
import Select from 'react-select';
import { updateActivity, uploadFileToActivity, deleteFile } from '../../api/activityAPI.js';
import { getGoals } from '../../api/goalAPI.js';
import { FiX } from 'react-icons/fi';
import MaterialSelect from './MaterialSelect.js';
import { getMaterials } from '../../api/materialAPI.js';


const EditActivityForm = ({ activity, onClose, onUpdated }) => {
  const [name, setName] = useState(activity.name || '');
  const [description, setDescription] = useState(activity.description || '');
  const [link, setLink] = useState(activity.link || '');
  const [selectedGoals, setSelectedGoals] = useState([]);
  const [goals, setGoals] = useState([]);
  const [existingImages, setExistingImages] = useState(
    activity.files?.filter(f => f.fileType.startsWith('image/')) || []
  );
  const [newImages, setNewImages] = useState([]);
  const [materials, setMaterials] = useState([]);
  const [selectedMaterials, setSelectedMaterials] = useState([]);

  useEffect(() => {
    getGoals().then(res => {
      setGoals(res.data);
      const mapped = activity.objectives.map(o => ({
        value: o.objective.id,
        label: o.objective.name,
      }));
      setSelectedGoals(mapped);
    });
    getMaterials().then(res => {
      const mapped = activity.materials.map(m => ({
        value: m.material.id,
        label: m.material.name,
      }));
      setSelectedMaterials(mapped);
      setMaterials(res.data);
    });
  }, [activity]);

  const handleImageRemove = async (fileId) => {
    if (window.confirm('Supprimer cette image ?')) {
      await deleteFile(fileId);
      setExistingImages(prev => prev.filter(img => img.id !== fileId));
    }
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    setNewImages(prev => [...prev, ...files]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    await updateActivity(activity.id, {
      name,
      description,
      link,
      objectiveIds: selectedGoals.map(o => o.value),
      materialIds: selectedMaterials.map(m => m.value),
    });

    // Upload en base64 comme pour la création
    const uploads = newImages.map((file) => {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = async () => {
          await uploadFileToActivity(activity.id, {
            fileUrl: reader.result,
            fileType: file.type,
            fileName: file.name,
          });
          resolve();
        };
        reader.readAsDataURL(file);
      });
    });
    await Promise.all(uploads);

    setNewImages([]);
    onUpdated();
    onClose();
  };

  return (
    <form onSubmit={handleSubmit} className="bg-white p-6 rounded border shadow space-y-4 animate-fade-in">
      <h2 className="text-xl font-semibold text-purple-700">Modifier l’activité</h2>

      <input
        type="text"
        value={name}
        onChange={e => setName(e.target.value)}
        placeholder="Nom"
        className="w-full border px-3 py-2 rounded"
      />

      <textarea
        value={description}
        onChange={e => setDescription(e.target.value)}
        placeholder="Description"
        rows={3}
        className="w-full border px-3 py-2 rounded"
      />

      <input
        type="text"
        value={link}
        onChange={e => setLink(e.target.value)}
        placeholder="Lien externe"
        className="w-full border px-3 py-2 rounded"
      />

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Objectifs :</label>
        <Select
          options={goals.map(g => ({ value: g.id, label: g.name }))}
          isMulti
          value={selectedGoals}
          onChange={setSelectedGoals}
          className="text-sm"
        />
      </div>

      <MaterialSelect
        selectedMaterials={selectedMaterials}
        setSelectedMaterials={setSelectedMaterials}
      />

      {existingImages.length > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
          {existingImages.map((img) => (
            <div key={img.id} className="relative">
              <img src={img.fileUrl} alt="fichier activité" className="w-full h-[120px] object-cover rounded" />
              <button
                type="button"
                onClick={() => handleImageRemove(img.id)}
                className="absolute top-1 right-1 bg-white/70 hover:bg-white text-red-600 rounded-full p-1"
              >
                <FiX size={18} />
              </button>
            </div>
          ))}
        </div>
      )}

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Ajouter des images :</label>
        <input
          type="file"
          multiple
          accept="image/*"
          onChange={handleImageUpload}
          className="text-sm"
        />
        {newImages.length > 0 && (
          <p className="text-sm text-gray-500 mt-1">{newImages.length} image(s) sélectionnée(s)</p>
        )}
      </div>

      <div className="flex gap-4">
        <button
          type="submit"
          className="bg-dark2GreenErgogo hover:bg-green-700 text-white px-4 py-2 rounded transition"
        >
          Enregistrer
        </button>
        <button
          type="button"
          onClick={onClose}
          className="text-gray-600 hover:underline"
        >
          Annuler
        </button>
      </div>
    </form>
  );
};

export default EditActivityForm;
import React, { useEffect, useState } from 'react';
import { getGoals, updateGoal, deleteGoal } from '../../api/goalAPI.js';
import { FiEdit2, FiTrash, FiCheck, FiX } from 'react-icons/fi';

const GoalList = ({ showToast }) => {
  const [goals, setGoals] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [editName, setEditName] = useState('');

  const loadGoals = async () => {
    const res = await getGoals();
    const sorted = res.data.sort((a, b) => a.name.localeCompare(b.name));
    setGoals(sorted);
  };

  useEffect(() => {
    loadGoals();
  }, []);

  const startEditing = (goal) => {
    setEditingId(goal.id);
    setEditName(goal.name);
  };

  const cancelEditing = () => {
    setEditingId(null);
    setEditName('');
  };

  const saveEdit = async (id) => {
    if (!editName.trim()) return;
    await updateGoal(id, { name: editName });
    setEditingId(null);
    setEditName('');
    await loadGoals();
    showToast && showToast('Objectif modifié !');
  };

  const handleDelete = async (id) => {
    if (window.confirm('Supprimer cet objectif ?')) {
      await deleteGoal(id);
      await loadGoals();
      showToast && showToast('Objectif supprimé !');
    }
  };

  return (
    <div className="space-y-2">
      {goals.map((g) => (
        <div key={g.id} className="flex items-center justify-between bg-gray-50 p-2 rounded shadow-sm">
          {editingId === g.id ? (
            <div className="flex items-center w-full gap-2">
              <input
                value={editName}
                onChange={(e) => setEditName(e.target.value)}
                className="border px-2 py-1 rounded w-full text-sm"
                autoFocus
              />
              <button onClick={() => saveEdit(g.id)} className="text-green-600 text-sm">
                <FiCheck size={18} />
              </button>
              <button onClick={cancelEditing} className="text-gray-500 text-sm">
                <FiX size={18} />
              </button>
            </div>
          ) : (
            <>
              <span className="text-sm">{g.name}</span>
              <div className="flex items-center gap-2">
                <button
                  onClick={() => startEditing(g)}
                  className="text-blue-500 hover:text-blue-700"
                  title="Modifier"
                >
                  <FiEdit2 size={18} />
                </button>
                <button
                  onClick={() => handleDelete(g.id)}
                  className="text-red-500 hover:text-red-700"
                  title="Supprimer"
                >
                  <FiTrash size={18} />
                </button>
              </div>
            </>
          )}
        </div>
      ))}
    </div>
  );
};

export default GoalList;
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { FiArrowLeft } from 'react-icons/fi';
import GoalList from './GoalList.js';
import MaterialList from './MaterialList.js';

const ManageGoalsAndMaterialsPage = () => {
  const navigate = useNavigate();

  return (
    <div className="h-screen bg-gray-50 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Bouton retour */}
        <button
          onClick={() => navigate(-1)}
          className="flex items-center gap-2 text-darkPurpleErgogo hover:text-purple-700 mb-6"
        >
          <FiArrowLeft size={20} /> Retour
        </button>

        {/* Contenu 2 colonnes */}
        <div className="flex gap-6">

          {/* Colonne Objectifs */}
          <div className="flex-1 bg-white rounded-2xl shadow p-6 overflow-y-auto h-[calc(100vh-100px)]">
            <h2 className="text-2xl font-semibold text-darkPurpleErgogo mb-4">Objectifs</h2>
            <GoalList />
          </div>

          {/* Colonne Matériel */}
          <div className="flex-1 bg-white rounded-2xl shadow p-6 overflow-y-auto h-[calc(100vh-100px)]">
            <h2 className="text-2xl font-semibold text-darkPurpleErgogo mb-4">Matériel</h2>
            <MaterialList />
          </div>

        </div>
      </div>
    </div>
  );
};

export default ManageGoalsAndMaterialsPage;
import React, { useEffect, useState } from 'react';
import { getMaterials, updateMaterial, deleteMaterial } from '../../api/materialAPI.js';
import { FiEdit2, FiTrash, FiCheck, FiX } from 'react-icons/fi';

const MaterialList = ({ showToast }) => {
  const [materials, setMaterials] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [editName, setEditName] = useState('');

  const loadMaterials = async () => {
    const res = await getMaterials();
    const sorted = res.data.sort((a, b) => a.name.localeCompare(b.name));
    setMaterials(sorted);
  };

  useEffect(() => {
    loadMaterials();
  }, []);

  const startEditing = (material) => {
    setEditingId(material.id);
    setEditName(material.name);
  };

  const cancelEditing = () => {
    setEditingId(null);
    setEditName('');
  };

  const saveEdit = async (id) => {
    if (!editName.trim()) return;
    await updateMaterial(id, { name: editName });
    setEditingId(null);
    setEditName('');
    await loadMaterials();
    showToast && showToast('Matériel modifié !');
  };

  const handleDelete = async (id) => {
    if (window.confirm('Supprimer ce matériel ?')) {
      await deleteMaterial(id);
      await loadMaterials();
      showToast && showToast('Matériel supprimé !');
    }
  };

  return (
    <div className="space-y-2">
      {materials.map((m) => (
        <div key={m.id} className="flex items-center justify-between bg-gray-50 p-2 rounded shadow-sm">
          {editingId === m.id ? (
            <div className="flex items-center w-full gap-2">
              <input
                value={editName}
                onChange={(e) => setEditName(e.target.value)}
                className="border px-2 py-1 rounded w-full text-sm"
                autoFocus
              />
              <button onClick={() => saveEdit(m.id)} className="text-green-600 text-sm">
                <FiCheck size={18} />
              </button>
              <button onClick={cancelEditing} className="text-gray-500 text-sm">
                <FiX size={18} />
              </button>
            </div>
          ) : (
            <>
              <span className="text-sm">{m.name}</span>
              <div className="flex items-center gap-2">
                <button
                  onClick={() => startEditing(m)}
                  className="text-blue-500 hover:text-blue-700"
                  title="Modifier"
                >
                  <FiEdit2 size={18} />
                </button>
                <button
                  onClick={() => handleDelete(m.id)}
                  className="text-red-500 hover:text-red-700"
                  title="Supprimer"
                >
                  <FiTrash size={18} />
                </button>
              </div>
            </>
          )}
        </div>
      ))}
    </div>
  );
};

export default MaterialList;
import React, { useEffect, useState } from 'react';
import Select from 'react-select';
import { getMaterials, createMaterial } from '../../api/materialAPI.js';

const MaterialSelect = ({ selectedMaterials, setSelectedMaterials, showToast }) => {
  const [materials, setMaterials] = useState([]);
  const [newMaterialName, setNewMaterialName] = useState('');
  const [error, setError] = useState('');

  const loadMaterials = async () => {
    const res = await getMaterials();
    const sorted = res.data.sort((a, b) => a.name.localeCompare(b.name));
    setMaterials(sorted);
  };

  useEffect(() => {
    loadMaterials();
  }, []);

  const handleAddMaterial = async () => {
    if (!newMaterialName.trim()) {
      setError('Nom requis');
      return;
    }
    try {
      await createMaterial({ name: newMaterialName });
      setNewMaterialName('');
      await loadMaterials();
      showToast && showToast('Matériel ajouté !');
    } catch {
      setError('Erreur lors de l’ajout');
    }
  };

  return (
    <div className="mt-4 space-y-4">
      <div>
        <label className="text-sm font-medium text-gray-700">Matériel requis :</label>
        <Select
          options={materials.map((m) => ({ value: m.id, label: m.name }))}
          isMulti
          value={selectedMaterials}
          onChange={setSelectedMaterials}
          isSearchable
          className="mt-1"
        />
      </div>

      <div className="flex items-center gap-2">
        <input
          type="text"
          value={newMaterialName}
          onChange={(e) => setNewMaterialName(e.target.value)}
          placeholder="Nouveau matériel"
          className="border px-2 py-1 rounded text-sm flex-1"
        />
        <button
          type="button"
          onClick={handleAddMaterial}
          className="bg-dark2GreenErgogo text-white px-3 py-1 rounded text-sm"
        >
          + Matériel
        </button>
      </div>
      {error && <p className="text-sm text-red-500">{error}</p>}
    </div>
  );
};

export default MaterialSelect;
