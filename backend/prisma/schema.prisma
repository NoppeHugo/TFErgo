generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Therapist {
  id           Int    @id @default(autoincrement())
  name         String
  email        String @unique
  passwordHash String

  patients     Patient[]
  appointments Appointment[]
  activities   Activity[]
  notes        Note[]
  reports      Report[]
}

model Patient {
  id            Int       @id @default(autoincrement())
  therapistId   Int
  therapist     Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  firstName     String?
  lastName      String?
  niss          String?   @unique
  title         String?
  sex           String?
  language      String?
  birthdate     DateTime?
  nationality   String?
  address       String?
  phone1        String?
  phone2        String?
  email         String?
  familyDoctor  String?
  profession    String?
  childrenCount Int?
  billingInfo   String?
  residenceZone String?
  maritalStatus String?
  createdAt     DateTime  @default(now())

  medicalDiagnosis String?
  medicalHistory   String?
  healthChronicle  String?

  appointments        Appointment[]
  interventionReasons InterventionReason[]
  diagnostics         Diagnostic[]
  interventionReports InterventionReport[]
  syntheses           Synthesis[]
  notes               Note[]
  contacts            Contact[]
  reports             Report[]
  EvaluationItem      EvaluationItem[]
}

model Appointment {
  id            Int      @id @default(autoincrement())
  therapistId   Int
  patientId     Int
  title         String
  date          DateTime
  duration      Int
  imageUrl      String?
  description   String?
  sessionReport String?
  createdAt     DateTime @default(now())

  therapist  Therapist             @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  patient    Patient               @relation(fields: [patientId], references: [id], onDelete: Cascade)
  activities AppointmentActivity[]
  feedbacks  AppointmentFeedback[]
}

model AppointmentActivity {
  appointmentId Int
  activityId    Int

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  activity    Activity    @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@id([appointmentId, activityId])
}

model EvaluationItem {
  id        Int                   @id @default(autoincrement())
  title     String
  patientId Int
  patient   Patient               @relation(fields: [patientId], references: [id])
  isClosed  Boolean               @default(false)
  createdAt DateTime              @default(now())
  feedbacks AppointmentFeedback[]
}

model AppointmentFeedback {
  id               Int            @id @default(autoincrement())
  appointmentId    Int
  appointment      Appointment    @relation(fields: [appointmentId], references: [id])
  evaluationItemId Int
  evaluationItem   EvaluationItem @relation(fields: [evaluationItemId], references: [id])
  rating           Int
  comment          String?
}

model Activity {
  id          Int      @id @default(autoincrement())
  therapistId Int
  name        String
  description String?
  link        String?
  createdAt   DateTime @default(now())

  therapist                  Therapist                    @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  objectives                 ActivityObjectiveLink[]
  images                     ActivityImage[]
  files                      ActivityFile[]
  appointmentLinks           AppointmentActivity[]
  ShortTermObjectiveActivity ShortTermObjectiveActivity[]
  materials                  MaterialLink[]
}

model ActivityObjective {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  activityLinks ActivityObjectiveLink[]
}

model ActivityObjectiveLink {
  activityId  Int
  objectiveId Int

  activity  Activity          @relation(fields: [activityId], references: [id], onDelete: Cascade)
  objective ActivityObjective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)

  @@id([activityId, objectiveId])
}

model ActivityImage {
  id         Int    @id @default(autoincrement())
  activityId Int
  imageUrl   String

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model ActivityFile {
  id         Int    @id @default(autoincrement())
  activityId Int
  fileUrl    String // base64 ou chemin VPS (Ã  adapter plus tard)
  fileType   String // "pdf", "audio", "video", "image", etc.
  fileName   String

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model Material {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  activities MaterialLink[]
}

model MaterialLink {
  activityId Int
  materialId Int

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@id([activityId, materialId])
}

model InterventionReason {
  id          Int      @id @default(autoincrement())
  patientId   Int
  title       String
  description String?
  createdAt   DateTime @default(now())

  diagnostic    String?
  synthese      String?
  situation     Json?
  therapeutic   Json?
  interventions Json?
  objectives    Json?

  groupeCible      String?
  age              String?
  batteriesCodeCIF String?

  compteRenduInterventions Json?

  patient            Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientRecords     PatientRecord[]
  longTermObjectives LongTermObjective[]
}

model PatientRecord {
  id                     Int      @id @default(autoincrement())
  interventionReasonId   Int
  summary                String?
  personalSituation      Json?
  therapeuticPerspective Json?
  createdAt              DateTime @default(now())

  interventionReason InterventionReason @relation(fields: [interventionReasonId], references: [id], onDelete: Cascade)
}

model LongTermObjective {
  id                   Int       @id @default(autoincrement())
  interventionReasonId Int // <- nouveau champ
  title                String
  startDate            DateTime
  endDate              DateTime?
  status               String    @default("ouvert")
  createdAt            DateTime  @default(now())

  interventionReason  InterventionReason   @relation(fields: [interventionReasonId], references: [id], onDelete: Cascade)
  shortTermObjectives ShortTermObjective[]
}

model ShortTermObjective {
  id                   Int       @id @default(autoincrement())
  longTermObjectiveId  Int
  title                String
  startDate            DateTime
  endDate              DateTime?
  status               String    @default("ouvert")
  description          String?   
  createdAt            DateTime  @default(now())

  longTermObjective    LongTermObjective            @relation(fields: [longTermObjectiveId], references: [id], onDelete: Cascade)
  activities           ShortTermObjectiveActivity[]
}


model ShortTermObjectiveActivity {
  shortTermObjectiveId Int
  activityId           Int

  shortTermObjective ShortTermObjective @relation(fields: [shortTermObjectiveId], references: [id], onDelete: Cascade)
  activity           Activity           @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@id([shortTermObjectiveId, activityId])
}

model Diagnostic {
  id             Int      @id @default(autoincrement())
  patientId      Int
  diagnosticText String
  createdAt      DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model InterventionReport {
  id               Int      @id @default(autoincrement())
  patientId        Int
  date             DateTime @default(now())
  interventionText String

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Synthesis {
  id            Int      @id @default(autoincrement())
  patientId     Int
  synthesisText String
  createdAt     DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Report {
  id            Int      @id @default(autoincrement())
  patientId     Int
  therapistId   Int
  reportDate    DateTime @default(now())
  reportContent String

  patient   Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Note {
  id          Int      @id @default(autoincrement())
  patientId   Int
  therapistId Int
  title       String?
  description String
  noteDate    DateTime @default(now())

  patient   Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model Contact {
  id        Int     @id @default(autoincrement())
  patientId Int
  type      String
  firstName String?
  lastName  String?
  relation  String?
  inami     String?
  phone     String?
  email     String?
  comment   String?

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}
