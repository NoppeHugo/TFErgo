import React, { useState } from 'react';
import { FiMoreVertical } from 'react-icons/fi';
import ActivityFileViewer from './ActivityFileViewer.js';

const ActivityCard = ({ activity, onEdit, onDelete, onOpen }) => {
  const [menuOpen, setMenuOpen] = useState(false);

  return (
    <div
      className="relative bg-white rounded shadow-sm p-4 border hover:shadow-md transition cursor-pointer"
      onClick={() => onOpen(activity)}
    >
      {/* Menu bouton 3 points */}
      <div className="absolute top-2 right-2 z-20" onClick={(e) => e.stopPropagation()}>
        <button
          onClick={() => setMenuOpen(prev => !prev)}
          className="text-gray-500 hover:text-gray-800"
        >
          <FiMoreVertical size={18} />
        </button>
        {menuOpen && (
          <div className="absolute right-0 mt-1 bg-white border rounded shadow w-32 z-30 animate-fade-in">
            <button
              onClick={() => { setMenuOpen(false); onEdit(); }}
              className="block w-full text-left px-4 py-2 text-sm hover:bg-purple-100"
            >
              Modifier
            </button>
            <button
              onClick={() => { setMenuOpen(false); onDelete(); }}
              className="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50"
            >
              Supprimer
            </button>
          </div>
        )}
      </div>

      <h2 className="text-xl font-bold text-purple-700">{activity.name}</h2>
      <p className="text-gray-600 text-sm mt-1 whitespace-pre-line">{activity.description}</p>

      {activity.link && (
        <a
          href={activity.link}
          className="text-purple-600 text-sm underline mt-2 inline-block"
          target="_blank"
          rel="noopener noreferrer"
          onClick={e => e.stopPropagation()}
        >
          Lien externe
        </a>
      )}

      <div className="mt-3">
        <p className="text-sm font-semibold text-gray-700">Objectifs :</p>
        {activity.objectives?.length ? (
          <div className="flex flex-wrap gap-2 mt-1">
            {activity.objectives.map(o => (
              <span
                key={o.objective.id}
                className="text-xs px-2 py-1 bg-purple-100 text-purple-800 rounded-full"
              >
                {o.objective.name}
              </span>
            ))}
          </div>
        ) : (
          <p className="text-sm text-gray-400">Aucun</p>
        )}
      </div>

      <div className="mt-3">
        <p className="text-sm font-semibold text-gray-700">Fichiers :</p>
        {activity.files?.length ? activity.files.map(file => (
          <ActivityFileViewer key={file.id} file={file} />
        )) : <p className="text-sm text-gray-400">Aucun fichier</p>}
      </div>
    </div>
  );
};

export default ActivityCard;
import React from 'react';

const ActivityFileViewer = ({ file }) => {
  const isImage = file.fileType.startsWith('image/');
  const isPdf = file.fileType === 'application/pdf';
  const isAudio = file.fileType.startsWith('audio/');
  const isVideo = file.fileType.startsWith('video/');

  return (
    <div className="mt-2">
      <p className="text-sm font-medium text-gray-700">{file.fileName}</p>
      {isImage && <img src={file.fileUrl} alt={file.fileName} className="max-w-full h-auto" />}
      {isPdf && <iframe src={file.fileUrl} title={file.fileName} className="w-full h-64" />}
      {isAudio && <audio controls src={file.fileUrl} className="w-full" />}
      {isVideo && <video controls src={file.fileUrl} className="w-full" />}
    </div>
  );
};

export default ActivityFileViewer;
import React, { useEffect, useState } from 'react';
import { getGoals } from '../../api/goalAPI.js';

const ActivityFilters = ({ filters, setFilters, onCreated }) => {
  const [goals, setGoals] = useState([]);
  const [error, setError] = useState('');
  const [fade, setFade] = useState(false);
  const [removingIndex, setRemovingIndex] = useState(null);

  const loadGoals = () => {
    getGoals().then(res => setGoals(res.data));
  };

  useEffect(() => {
    loadGoals();
  }, [onCreated]);

  const handleChangeObjective = (index, value) => {
    const updated = [...filters.objectives];
    updated[index] = Number(value);
    setFilters({ ...filters, objectives: updated });
    setError('');
  };

  const handleAddObjectiveField = () => {
    if (filters.objectives.includes(null)) {
      setError("Veuillez remplir l'objectif précédent avant d'en ajouter un autre.");
      setFade(false);
      setTimeout(() => setFade(true), 2500);
      setTimeout(() => setError(''), 3000);
      return;
    }
    setFilters({ ...filters, objectives: [...filters.objectives, null] });
    setError('');
    setFade(false);
  };

  const handleRemoveObjective = (index) => {
    setRemovingIndex(index);
    setTimeout(() => {
      const updated = [...filters.objectives];
      updated.splice(index, 1);
      setFilters({ ...filters, objectives: updated });
      setRemovingIndex(null);
    }, 300); // Durée de l’animation
    setError('');
  };

  return (
    <div className="flex flex-col gap-4 transition-all duration-500 ease-in-out">
      {/* Nom & Description */}
      <div className="flex flex-col gap-2">
        <input
          type="text"
          placeholder="Rechercher par nom"
          className="border px-3 py-2 rounded w-full text-sm"
          value={filters.name}
          onChange={(e) => setFilters({ ...filters, name: e.target.value })}
        />
        <input
          type="text"
          placeholder="Rechercher par description"
          className="border px-3 py-2 rounded w-full text-sm"
          value={filters.description}
          onChange={(e) => setFilters({ ...filters, description: e.target.value })}
        />
      </div>

      {/* Objectifs */}
      <div>
        <label className="text-sm font-semibold text-gray-700 mb-1 block">
          Filtrer par objectifs :
        </label>
        <div className="flex flex-col gap-2">
          {filters.objectives.map((id, index) => (
            <div
              key={index}
              className={`flex items-center gap-2 ${
                removingIndex === index ? 'animate-fade-out' : 'animate-fade-in'
              }`}
            >
              <select
                className="border px-2 py-1 rounded flex-grow text-sm"
                value={id || ''}
                onChange={(e) => handleChangeObjective(index, e.target.value)}
              >
                <option value="">Objectif {index + 1}</option>
                {goals.map(goal => (
                  <option key={goal.id} value={goal.id}>
                    {goal.name}
                  </option>
                ))}
              </select>
              <button
                onClick={() => handleRemoveObjective(index)}
                className="text-red-500 text-lg hover:text-red-700"
                title="Supprimer ce filtre"
              >
                −
              </button>
            </div>
          ))}

          {/* Message d'erreur animé */}
          {error && (
            <div
              className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 mt-1 transition-opacity duration-500 ease-in-out animate-fade-in ${
                fade ? 'opacity-0' : 'opacity-100'
              }`}
            >
              {error}
            </div>
          )}

          <button
            onClick={handleAddObjectiveField}
            type="button"
            className="text-blue-600 text-sm hover:underline mt-1"
          >
            + Ajouter un objectif
          </button>
        </div>
      </div>
    </div>
  );
};

export default ActivityFilters;
import React, { useState, useEffect } from 'react';
import Select from 'react-select';
import { createActivity, uploadFileToActivity } from '../../api/activityAPI.js';
import { getGoals, createGoal } from '../../api/goalAPI.js';

const ActivityForm = ({ onCreated, showToast }) => {
  const [visible, setVisible] = useState(false);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [link, setLink] = useState('');
  const [selectedGoals, setSelectedGoals] = useState([]);
  const [goals, setGoals] = useState([]);
  const [files, setFiles] = useState([]);
  const [newGoalName, setNewGoalName] = useState('');
  const [errors, setErrors] = useState({});
  const [fadeErrors, setFadeErrors] = useState(false);
  const [goalError, setGoalError] = useState('');
  const [fadeGoalError, setFadeGoalError] = useState(false);

  const loadGoals = () => {
    getGoals().then(res => setGoals(res.data));
  };

  useEffect(() => {
    loadGoals();
  }, []);

  const goalOptions = goals.map(goal => ({ value: goal.id, label: goal.name }));

  const handleFileChange = (e) => setFiles([...e.target.files]);

  const validate = () => {
    const newErrors = {};
    if (!name.trim()) newErrors.name = 'Le nom est requis.';
    if (selectedGoals.length === 0) newErrors.goals = 'Veuillez sélectionner au moins un objectif.';
    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const validationErrors = validate();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      setFadeErrors(false);
      setTimeout(() => setFadeErrors(true), 2500);
      setTimeout(() => setErrors({}), 3000);
      return;
    }

    const newActivity = await createActivity({
      therapistId: 1,
      name,
      description,
      link,
      objectiveIds: selectedGoals.map(g => g.value),
    });

    const activityId = newActivity.data.id;

    const uploads = files.map((file) => {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = async () => {
          await uploadFileToActivity(activityId, {
            fileUrl: reader.result,
            fileType: file.type,
            fileName: file.name,
          });
          resolve();
        };
        reader.readAsDataURL(file);
      });
    });

    await Promise.all(uploads);

    showToast && showToast("Activité ajoutée !");
    onCreated();

    // Reset
    setName('');
    setDescription('');
    setLink('');
    setSelectedGoals([]);
    setFiles([]);
    setVisible(false);
    setErrors({});
  };

  const handleAddGoal = async () => {
    if (!newGoalName.trim()) {
      setGoalError("Veuillez écrire un objectif avant de l’ajouter.");
      setFadeGoalError(false);
      setTimeout(() => setFadeGoalError(true), 2500);
      setTimeout(() => setGoalError(''), 3000);
      return;
    }
    await createGoal({ name: newGoalName });
    setNewGoalName('');
    loadGoals();
    onCreated();
    showToast && showToast("Objectif ajouté !");
  };

  if (!visible) {
    return (
      <div className="flex gap-4 flex-wrap">
        <div className="flex flex-col gap-1">
          <div className="flex items-center gap-2">
            <input
              type="text"
              value={newGoalName}
              onChange={(e) => setNewGoalName(e.target.value)}
              placeholder="Nouvel objectif"
              className="border px-2 py-1 rounded text-sm shadow-sm"
            />
            <button
              onClick={handleAddGoal}
              className="bg-greenErgogo hover:bg-greenErgogo/90 text-white px-3 py-1 rounded text-sm transition"
            >
              + Objectif
            </button>
          </div>
          {goalError && (
            <div
              className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${
                fadeGoalError ? 'opacity-0' : 'opacity-100'
              }`}
            >
              {goalError}
            </div>
          )}
        </div>

        <button
          onClick={() => setVisible(true)}
          className="bg-violetErgogo hover:bg-violetErgogo/90 text-white px-3 py-1 rounded text-sm transition"
        >
          + Ajouter une activité
        </button>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="bg-white p-6 rounded border shadow space-y-4 animate-fade-in w-full">
      <div className="flex flex-col gap-1">
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Nom de l’activité"
          className="w-full border px-3 py-2 rounded"
        />
        {errors.name && (
          <div className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${fadeErrors ? 'opacity-0' : 'opacity-100'}`}>
            {errors.name}
          </div>
        )}
      </div>

      <textarea
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        placeholder="Description"
        className="w-full border px-3 py-2 rounded"
        rows={3}
      />
      <input
        type="text"
        value={link}
        onChange={(e) => setLink(e.target.value)}
        placeholder="Lien externe"
        className="w-full border px-3 py-2 rounded"
      />

      <div className="flex flex-col gap-1">
        <label className="block text-sm font-medium text-gray-700">Objectifs liés :</label>
        <Select
          options={goalOptions}
          isMulti
          value={selectedGoals}
          onChange={setSelectedGoals}
          className="text-sm"
          placeholder="Sélectionner des objectifs"
        />
        {errors.goals && (
          <div className={`bg-purple-100 border border-purple-300 text-purple-700 text-sm rounded px-3 py-2 animate-fade-in transition-opacity duration-500 ease-in-out ${fadeErrors ? 'opacity-0' : 'opacity-100'}`}>
            {errors.goals}
          </div>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Fichiers :</label>
        <input type="file" multiple onChange={handleFileChange} />
      </div>

      <div className="flex gap-4 pt-2">
        <button
          type="submit"
          className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition"
        >
          Créer
        </button>
        <button
          type="button"
          onClick={() => setVisible(false)}
          className="text-gray-600 hover:underline"
        >
          Annuler
        </button>
      </div>
    </form>
  );
};

export default ActivityForm;
import React, { useEffect, useState } from 'react';
import { searchActivities, deleteActivity } from '../../api/activityAPI.js';
import ActivityCard from './ActivityCard.js';
import EditActivityForm from './EditActivityForm.js';
import FullscreenActivityView from './FullscreenActivityView.js';

const ActivityList = ({ filters, refresh }) => {
  const [activities, setActivities] = useState([]);
  const [editingActivity, setEditingActivity] = useState(null);
  const [fullscreenActivity, setFullscreenActivity] = useState(null); // 👈 NEW

  useEffect(() => {
    searchActivities({
      name: filters.name || '',
      description: filters.description || '',
      objectives: filters.objectives?.join(',') || '',
    }).then(res => setActivities(res.data));
  }, [filters, refresh]);

  const handleDelete = async (id) => {
    if (window.confirm("Supprimer cette activité ?")) {
      await deleteActivity(id);
      setActivities(prev => prev.filter(a => a.id !== id));
    }
  };

  const handleUpdated = () => {
    setEditingActivity(null);
    searchActivities({
      name: filters.name || '',
      description: filters.description || '',
      objectives: filters.objectives?.join(',') || '',
    }).then(res => setActivities(res.data));
  };

  return (
    <>
      {editingActivity ? (
        <div className="mb-6">
          <EditActivityForm
            activity={editingActivity}
            onClose={() => setEditingActivity(null)}
            onUpdated={handleUpdated}
          />
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
          {activities.map(activity => (
            <ActivityCard
              key={activity.id}
              activity={activity}
              onEdit={() => setEditingActivity(activity)}
              onDelete={() => handleDelete(activity.id)}
              onOpen={setFullscreenActivity} // 👈 NEW
            />
          ))}
        </div>
      )}

      {/* Vue plein écran si sélectionnée */}
      {fullscreenActivity && (
        <FullscreenActivityView
          activity={fullscreenActivity}
          onClose={() => setFullscreenActivity(null)}
        />
      )}
    </>
  );
};

export default ActivityList;
import React, { useState, useEffect } from 'react';
import Select from 'react-select';
import { updateActivity } from '../../api/activityAPI.js';
import { getGoals } from '../../api/goalAPI.js';

const EditActivityForm = ({ activity, onClose, onUpdated }) => {
  const [name, setName] = useState(activity.name || '');
  const [description, setDescription] = useState(activity.description || '');
  const [link, setLink] = useState(activity.link || '');
  const [selectedGoals, setSelectedGoals] = useState([]);
  const [goals, setGoals] = useState([]);

  useEffect(() => {
    getGoals().then(res => {
      setGoals(res.data);
      const mapped = activity.objectives.map(o => ({
        value: o.objective.id,
        label: o.objective.name,
      }));
      setSelectedGoals(mapped);
    });
  }, [activity]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    await updateActivity(activity.id, {
      name,
      description,
      link,
      objectiveIds: selectedGoals.map(o => o.value),
    });

    onUpdated(); // Rafraîchir la liste
    onClose();   // Fermer le formulaire
  };

  return (
    <form onSubmit={handleSubmit} className="bg-white p-6 rounded border shadow space-y-4 animate-fade-in">
      <h2 className="text-xl font-semibold text-purple-700">Modifier l’activité</h2>

      <input
        type="text"
        value={name}
        onChange={e => setName(e.target.value)}
        placeholder="Nom"
        className="w-full border px-3 py-2 rounded"
      />

      <textarea
        value={description}
        onChange={e => setDescription(e.target.value)}
        placeholder="Description"
        rows={3}
        className="w-full border px-3 py-2 rounded"
      />

      <input
        type="text"
        value={link}
        onChange={e => setLink(e.target.value)}
        placeholder="Lien externe"
        className="w-full border px-3 py-2 rounded"
      />

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Objectifs :</label>
        <Select
          options={goals.map(g => ({ value: g.id, label: g.name }))}
          isMulti
          value={selectedGoals}
          onChange={setSelectedGoals}
          className="text-sm"
        />
      </div>

      <div className="flex gap-4">
        <button
          type="submit"
          className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition"
        >
          Enregistrer
        </button>
        <button
          type="button"
          onClick={onClose}
          className="text-gray-600 hover:underline"
        >
          Annuler
        </button>
      </div>
    </form>
  );
};

export default EditActivityForm;
import React from 'react';
import ActivityFileViewer from './ActivityFileViewer.js';

const FullscreenActivityView = ({ activity, onClose }) => {
  if (!activity) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50">
      <div className="bg-white max-w-3xl w-full rounded-lg p-6 relative overflow-y-auto max-h-[90vh]">
        <button
          onClick={onClose}
          className="absolute top-3 right-4 text-gray-500 hover:text-black text-xl font-bold"
        >
          ✕
        </button>

        <h2 className="text-2xl font-bold text-purple-700 mb-2">{activity.name}</h2>
        <p className="text-gray-700 whitespace-pre-line mb-4">{activity.description}</p>

        {activity.link && (
          <a
            href={activity.link}
            className="text-purple-600 text-sm underline mb-4 block"
            target="_blank"
            rel="noopener noreferrer"
          >
            Lien externe
          </a>
        )}

        <div className="mb-4">
          <p className="text-sm font-semibold text-gray-700">Objectifs :</p>
          {activity.objectives?.length ? (
            <div className="flex flex-wrap gap-2 mt-1">
              {activity.objectives.map(o => (
                <span
                  key={o.objective.id}
                  className="text-xs px-2 py-1 bg-purple-100 text-purple-800 rounded-full"
                >
                  {o.objective.name}
                </span>
              ))}
            </div>
          ) : (
            <p className="text-sm text-gray-400">Aucun</p>
          )}
        </div>

        <div>
          <p className="text-sm font-semibold text-gray-700">Fichiers :</p>
          {activity.files?.length ? activity.files.map(file => (
            <ActivityFileViewer key={file.id} file={file} />
          )) : <p className="text-sm text-gray-400">Aucun fichier</p>}
        </div>
      </div>
    </div>
  );
};

export default FullscreenActivityView;
