import { db } from "./firebaseConfig.js";
import { collection, doc, setDoc, addDoc, getDocs } from "firebase/firestore";

// üîπ Ajouter une activit√©
export const addActivity = async (activityData) => {
  try {
    const docRef = await addDoc(collection(db, "activites"), activityData);
    console.log("Activit√© ajout√©e avec ID :", docRef.id);
  } catch (error) {
    console.error("Erreur lors de l'ajout de l'activit√© :", error);
  }
};

// üîπ R√©cup√©rer toutes les activit√©s
export const getAllActivities = async () => {
  try {
    const activitiesSnap = await getDocs(collection(db, "activites"));
    return activitiesSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des activit√©s :", error);
  }
};
import { db } from "./firebaseConfig.js";
import { collection, doc, setDoc, addDoc, getDocs } from "firebase/firestore";

// üîπ Ajouter un rendez-vous
export const addAppointment = async (appointmentData) => {
  try {
    const docRef = await addDoc(collection(db, "rendezvous"), appointmentData);
    console.log("Rendez-vous ajout√© avec ID :", docRef.id);
  } catch (error) {
    console.error("Erreur lors de l'ajout du rendez-vous :", error);
  }
};

// üîπ R√©cup√©rer tous les rendez-vous
export const getAllAppointments = async () => {
  try {
    const appointmentsSnap = await getDocs(collection(db, "rendezvous"));
    return appointmentsSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des rendez-vous :", error);
  }
};
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

const firebaseConfig = {
  apiKey: "API_KEY",
  authDomain: "ergogo-88fd0.firebaseapp.com",
  projectId: "ergogo-88fd0",
  storageBucket: "ergogo-88fd0.firebasestorage.app",
  messagingSenderId: "1070148585931",
  appId: "1:1070148585931:web:448db2fcc2bad9ec4a4e4e"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

export { db };
import { db } from "./firebaseConfig.js";
import { collection, doc, addDoc, getDocs, updateDoc, deleteDoc } from "firebase/firestore";

// üîπ Ajouter une note √† un patient
export const addNoteToPatient = async (patientId, noteData) => {
  try {
    const docRef = await addDoc(collection(db, `patients/${patientId}/notes`), noteData);
    return { id: docRef.id, ...noteData };
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ajout de la note :", error);
    return null;
  }
};

// üîπ R√©cup√©rer les notes d'un patient
export const getPatientNotes = async (patientId) => {
  try {
    const snapshot = await getDocs(collection(db, `patients/${patientId}/notes`));
    return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des notes :", error);
    return [];
  }
};

// üîπ Mettre √† jour une note
export const updateNote = async (patientId, noteId, updatedData) => {
  try {
    await updateDoc(doc(db, `patients/${patientId}/notes/${noteId}`), updatedData);
    console.log("‚úÖ Note mise √† jour avec succ√®s !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour de la note :", error);
  }
};

// üîπ Supprimer une note
export const deleteNote = async (patientId, noteId) => {
  try {
    await deleteDoc(doc(db, `patients/${patientId}/notes/${noteId}`));
    console.log("‚úÖ Note supprim√©e avec succ√®s !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de la note :", error);
  }
};
import { db } from "./firebaseConfig.js";
import { collection, doc, addDoc, getDoc, getDocs, deleteDoc, updateDoc } from "firebase/firestore";

// üîπ Ajouter un patient
export const addPatient = async (patientData) => {
  try {
    const docRef = await addDoc(collection(db, "patients"), patientData);
    console.log("‚úÖ Patient ajout√© avec ID :", docRef.id);
    return docRef.id;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ajout du patient :", error);
  }
};

// üîπ R√©cup√©rer tous les patients
export const getAllPatients = async () => {
  try {
    const patientsSnap = await getDocs(collection(db, "patients"));
    return patientsSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des patients :", error);
  }
};

// üîπ R√©cup√©rer un patient par ID
export const getPatient = async (patientId) => {
  try {
    const patientDoc = await getDoc(doc(db, "patients", patientId));
    return patientDoc.exists() ? { id: patientDoc.id, ...patientDoc.data() } : null;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration du patient :", error);
  }
};

// üîπ Supprimer un patient
export const deletePatient = async (patientId) => {
  try {
    await deleteDoc(doc(db, "patients", patientId));
    console.log("‚úÖ Patient supprim√© avec succ√®s.");
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression du patient :", error);
  }
};

// üîπ Mettre √† jour un patient
export const updatePatient = async (patientId, updatedData) => {
  if (!patientId) {
    console.error("‚ùå Erreur: patientId est undefined !");
    return false;
  }

  // üî• Correction : Remplace `undefined` par `null`
  const sanitizeObject = (obj) => {
    return Object.keys(obj).reduce((acc, key) => {
      acc[key] = obj[key] === undefined ? null : obj[key];
      return acc;
    }, {});
  };

  const cleanedData = sanitizeObject(updatedData);

  console.log(`üì§ Mise √† jour Firestore : patients/${patientId}`);
  console.log("üì§ Donn√©es envoy√©es :", cleanedData);

  try {
    await updateDoc(doc(db, `patients/${patientId}`), cleanedData);
    console.log("‚úÖ Mise √† jour r√©ussie !");
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour Firestore :", error);
    return false;
  }
};

// üîπ Ajouter un motif d'intervention pour un patient
export const addMotifIntervention = async (patientId, motifData) => {
  try {
    const docRef = await addDoc(collection(db, `patients/${patientId}/motifsIntervention`), motifData);
    return { id: docRef.id, ...motifData };
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ajout du motif :", error);
    return null;
  }
};

// üîπ R√©cup√©rer tous les motifs d'intervention d'un patient
export const getMotifsIntervention = async (patientId) => {
  try {
    const snapshot = await getDocs(collection(db, `patients/${patientId}/motifsIntervention`));
    return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des motifs :", error);
    return [];
  }
};

// üîπ Mettre √† jour un motif d'intervention
export const updateMotifIntervention = async (patientId, motifId, updatedData) => {
  if (!patientId || !motifId) {
    console.error("‚ùå Erreur: patientId ou motifId est undefined !");
    return false;
  }

  // üî• Correction : Remplace `undefined` par `null`
  const sanitizeObject = (obj) => {
    return Object.keys(obj).reduce((acc, key) => {
      acc[key] = obj[key] === undefined ? null : obj[key];
      return acc;
    }, {});
  };

  const cleanedData = sanitizeObject(updatedData);

  console.log(`üì§ Mise √† jour Firestore : patients/${patientId}/motifsIntervention/${motifId}`);
  console.log("üì§ Donn√©es envoy√©es :", cleanedData);

  try {
    await updateDoc(doc(db, `patients/${patientId}/motifsIntervention/${motifId}`), cleanedData);
    console.log("‚úÖ Mise √† jour r√©ussie !");
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour Firestore :", error);
    return false;
  }
};
import { db } from "./firebaseConfig.js";
import { doc, setDoc, getDoc } from "firebase/firestore";

// üîπ Ajouter un utilisateur
export const addUser = async (userId, userData) => {
  try {
    await setDoc(doc(db, "utilisateurs", userId), userData);
    console.log("Utilisateur ajout√© !");
  } catch (error) {
    console.error("Erreur lors de l'ajout de l'utilisateur :", error);
  }
};

// üîπ R√©cup√©rer un utilisateur
export const getUser = async (userId) => {
  try {
    const userDoc = await getDoc(doc(db, "utilisateurs", userId));
    return userDoc.exists() ? userDoc.data() : null;
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration de l'utilisateur :", error);
  }
};
