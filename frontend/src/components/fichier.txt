import React, { useState } from "react";
import { motion } from "framer-motion";

const Calendar = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const today = new Date();

  const generateCalendarDays = (date) => {
    const startOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);
    const endOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);

    const startDayOfWeek = startOfMonth.getDay();
    const prevMonthDays = [];
    const startDatePrevMonth = new Date(startOfMonth);
    startDatePrevMonth.setDate(startDatePrevMonth.getDate() - (startDayOfWeek || 7) + 1);
    for (let i = 0; i < (startDayOfWeek || 7) - 1; i++) {
      prevMonthDays.push(new Date(startDatePrevMonth.setDate(startDatePrevMonth.getDate() + 1)));
    }

    const currentMonthDays = [];
    for (let i = 1; i <= endOfMonth.getDate(); i++) {
      currentMonthDays.push(new Date(date.getFullYear(), date.getMonth(), i));
    }

    const nextMonthDays = [];
    const remainingDays = 42 - (prevMonthDays.length + currentMonthDays.length);
    const startDateNextMonth = new Date(endOfMonth);
    startDateNextMonth.setDate(startDateNextMonth.getDate() + 1);
    for (let i = 0; i < remainingDays; i++) {
      nextMonthDays.push(new Date(startDateNextMonth.setDate(startDateNextMonth.getDate() + 1)));
    }

    return [...prevMonthDays, ...currentMonthDays, ...nextMonthDays];
  };

  const calendarDays = generateCalendarDays(currentDate);

  const handleMonthChange = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setMonth(currentDate.getMonth() + direction);
    setCurrentDate(newDate);
  };

  const resetToToday = () => {
    setCurrentDate(today);
  };

  return (
    <motion.div 
      className="p-6 bg-white rounded-lg shadow-md w-full h-full"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0, transition: { duration: 0.3 } }}
    >
      <div className="flex justify-between items-center mb-4">
        <button
          className="text-[#A294F9] font-bold hover:underline"
          onClick={() => handleMonthChange(-1)}
        >
          &lt; Mois précédent
        </button>
        <h2
          className="text-2xl font-bold text-gray-800 cursor-pointer hover:text-[#A294F9]"
          onClick={resetToToday}
        >
          {currentDate.toLocaleDateString("fr-FR", { month: "long", year: "numeric" })}
        </h2>
        <button
          className="text-[#A294F9] font-bold hover:underline"
          onClick={() => handleMonthChange(1)}
        >
          Mois suivant &gt;
        </button>
      </div>

      {/* Jours de la semaine */}
      <div className="grid grid-cols-7 text-center font-bold text-gray-600 text-xs sm:text-base">
        {["Lun", "Mar", "Mer", "Jeu", "Ven", "Sam", "Dim"].map((day) => (
          <div key={day}>{day}</div>
        ))}
      </div>

      {/* Jours du calendrier */}
      <div className="grid grid-cols-7 gap-2 mt-2">
        {calendarDays.map((day, index) => {
          const isCurrentMonth = day.getMonth() === currentDate.getMonth();
          const isToday =
            day.getDate() === today.getDate() &&
            day.getMonth() === today.getMonth() &&
            day.getFullYear() === today.getFullYear();

          return (
            <motion.div
              key={index}
              className={`p-2 text-center rounded-lg text-xs sm:text-base cursor-pointer transition-all ${
                isToday
                  ? "bg-[#A294F9] text-white font-bold"
                  : isCurrentMonth
                  ? "bg-white text-gray-800 border border-gray-300"
                  : "bg-gray-100 text-gray-400"
              } hover:bg-blue-100`}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              {day.getDate()}
            </motion.div>
          );
        })}
      </div>
    </motion.div>
  );
};

export default Calendar;
import React, { useEffect, useState } from 'react'
import { Link, useNavigate } from 'react-router-dom'

const Header = () => {
  const [therapist, setTherapist] = useState(null)
  const [menuOpen, setMenuOpen] = useState(false)
  const navigate = useNavigate()

  useEffect(() => {
    fetch('http://localhost:3001/auth/me', {
      credentials: 'include'
    })
      .then(res => res.ok ? res.json() : null)
      .then(data => {
        console.log(data)
        if (data) setTherapist(data)
      })
      .catch(() => {})
  }, [])

  const handleLogout = async () => {
    await fetch('http://localhost:3001/auth/logout', {
      method: 'POST',
      credentials: 'include'
    })
    navigate('/login')
  }

  return (
    <nav className="bg-[#A294F9] p-4 shadow-lg">
      <div className="container mx-auto flex justify-between items-center relative">
        <Link to="/" className="text-white text-3xl font-bold">
          ERGOGO
        </Link>

        <ul className="flex space-x-8 mx-auto">
          <li><Link to="/calendrier" className="text-white text-3xl hover:scale-125 transition">Calendrier</Link></li>
          <li><Link to="/patients" className="text-white text-3xl hover:scale-125 transition">Patients</Link></li>
          <li><Link to="/activities" className="text-white text-3xl hover:scale-125 transition">Activités</Link></li>
          <li><Link to="/reports" className="text-white text-3xl hover:scale-125 transition">Rapports</Link></li>
        </ul>

        {/* Nom du thérapeute + menu de déconnexion */}
        {therapist && (
          <div className="relative">
            <button
              onClick={() => setMenuOpen(!menuOpen)}
              className="text-white font-semibold px-4 py-2 rounded hover:bg-[#8d7cf9] transition"
            >
              {therapist.name}
              
            </button>

            {menuOpen && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded shadow-lg z-10">
                <button
                  onClick={handleLogout}
                  className="block w-full text-left px-4 py-2 text-gray-800 hover:bg-gray-100"
                >
                  Se déconnecter
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </nav>
  )
}

export default Header
import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { getPatient, deletePatient, updatePatient } from "../firebase/patientsFirestore.js";
import PatientDetailsTab from "./PatientDetails/PatientDetailsTab.js";
import PatientNotesTab from "./PatientDetails/PatientNotesTab.js";
import PatientDataTab from "./PatientDetails/PatientDataTab.js";
import PatientFileTab from "./PatientDetails/PatientFileTab.js";

const PatientDetails = () => {
  const { patientId } = useParams();
  const [patient, setPatient] = useState(null);
  const [activeTab, setActiveTab] = useState("details");
  const [updatedPatient, setUpdatedPatient] = useState({});
  const [isEditing, setIsEditing] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchPatientData = async () => {
      setLoading(true);
      try {
        console.log("Récupération du patient :", patientId);
        const data = await getPatient(patientId);
        if (data) {
          console.log("Patient chargé :", data);
          setPatient({ id: patientId, ...data });
          setUpdatedPatient({ id: patientId, ...data }); // Synchronisation pour l'édition
        } else {
          console.error("Erreur : aucun patient trouvé");
        }
      } catch (error) {
        console.error("Erreur lors du chargement :", error);
      }
      setLoading(false);
    };
    fetchPatientData();
  }, [patientId]);

  const handleDelete = async () => {
    const confirmDelete = window.confirm("Êtes-vous sûr de vouloir supprimer ce patient ?");
    if (!confirmDelete) return;

    try {
      await deletePatient(patientId);
      navigate("/patients");
    } catch (error) {
      console.error("Erreur lors de la suppression du patient :", error);
    }
  };

  const handleUpdate = async () => {
    try {
      await updatePatient(patientId, updatedPatient);
      const updatedData = await getPatient(patientId);
      setPatient(updatedData);
      setIsEditing(false);
    } catch (error) {
      console.error("Erreur lors de la mise à jour du patient :", error);
    }
  };

  const handleChange = (e) => {
    setUpdatedPatient({ ...updatedPatient, [e.target.name]: e.target.value });
  };

  if (loading) return <div>Chargement des données...</div>;
  if (!patient) return <div>Aucun patient trouvé.</div>;

  return (
    <div className="p-4 bg-white shadow-lg rounded-xl w-full h-full">
      <h2 className="text-xl font-bold">{patient.nom} {patient.prenom}</h2>
      <button className="bg-red-500 text-white px-2 py-1 rounded-lg hover:bg-red-600 text-sm" onClick={handleDelete}>
        Supprimer
      </button>

      <div className="flex space-x-4 mb-6">
        <button className={`py-2 px-4 rounded-lg ${activeTab === "details" ? "bg-blue-500 text-white" : "bg-gray-200"}`} onClick={() => setActiveTab("details")}>
          Détails
        </button>
        <button className={`py-2 px-4 rounded-lg ${activeTab === "carnet" ? "bg-blue-500 text-white" : "bg-gray-200"}`} onClick={() => setActiveTab("carnet")}>
          Carnet de notes
        </button>
        <button className={`py-2 px-4 rounded-lg ${activeTab === "donnees" ? "bg-blue-500 text-white" : "bg-gray-200"}`} onClick={() => setActiveTab("donnees")}>
          Données patient
        </button>
        <button className={`py-2 px-4 rounded-lg ${activeTab === "dossier" ? "bg-blue-500 text-white" : "bg-gray-200"}`} onClick={() => setActiveTab("dossier")}>
          Dossier patient
        </button>
      </div>

      <div className="transition-all duration-500 ease-in-out h-full overflow-y-auto">
        {activeTab === "details" && <PatientDetailsTab patient={patient} isEditing={isEditing} updatedPatient={updatedPatient} handleChange={handleChange} handleUpdate={handleUpdate} setIsEditing={setIsEditing} />}
        {activeTab === "carnet" && <PatientNotesTab patient={patient} />}
        {activeTab === "donnees" && <PatientDataTab patient={patient} />}
        {activeTab === "dossier" && <PatientFileTab patient={patient} />}
      </div>
    </div>
  );
};

export default PatientDetails;
import React from "react";
import { Outlet } from "react-router-dom";
import PatientSidebar from "../components/PatientSidebar.js";

const PatientLayout = () => {
  return (
    <div className="flex w-full h-full">
      {/* Sidebar avec liste des patients */}
      <div className="flex-shrink-0 w-64 h-full bg-gray-100 p-4 shadow-lg overflow-y-auto custom-scrollbar">
        <PatientSidebar />
      </div>

      {/* Contenu dynamique (détails, notes, données, dossier, etc.) */}
      <div className="flex-grow p-6 overflow-hidden">
        <Outlet />
      </div>
    </div>
  );
};

export default PatientLayout;
import { useEffect, useState } from "react";
import { getAllPatients } from "../firebase/patientsFirestore.js";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";

const Patients = () => {
  const [patients, setPatients] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchPatients = async () => {
      try {
        const patientsList = await getAllPatients();
        setPatients(patientsList);
      } catch (error) {
        console.error("Erreur lors de la récupération des patients :", error);
      }
    };

    fetchPatients();
  }, []);

  const goToPatientDetails = (patientId) => {
    navigate(`/patient/${patientId}`);
  };

  const goToAddPatientPage = () => {
    navigate("/add-patient");
  };

  return (
    <motion.div 
      className="p-4 bg-white shadow-lg rounded-xl w-full max-w-4xl h-[80vh] mt-4 overflow-y-auto custom-scrollbar"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0, transition: { duration: 0.3 } }}
    >
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">Liste des Patients</h2>
        <button 
          className="bg-[#A294F9] text-white px-4 py-2 rounded-lg hover:bg-[#8a7cf9]"
          onClick={goToAddPatientPage}
        >
          Ajouter un patient
        </button>
      </div>

      <ul className="space-y-2">
        {patients.map(patient => (
          <motion.li
            key={patient.id}
            className="cursor-pointer p-2 rounded-lg bg-gray-100 hover:bg-gray-200 flex justify-between items-center"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => goToPatientDetails(patient.id)}
          >
            <span>{patient.nom} {patient.prenom}</span>
          </motion.li>
        ))}
      </ul>
    </motion.div>
  );
};

export default Patients;
import React, { useEffect, useState } from "react";
import { getAllPatients } from "../firebase/patientsFirestore.js";
import { useNavigate, useParams, useLocation } from "react-router-dom";

const PatientSidebar = () => {
  const [patients, setPatients] = useState([]);
  const { patientId } = useParams();
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    const fetchPatients = async () => {
      const patientsList = await getAllPatients();
      setPatients(patientsList);
    };

    fetchPatients();
  }, []);

  const handlePatientChange = (newPatientId) => {
    if (!newPatientId || newPatientId === patientId) return;

    // Récupère l'onglet actif (ex: "/patient/michel/carnet")
    const currentPath = location.pathname;
    const pathParts = currentPath.split("/");
    const currentTab = pathParts.length > 3 ? `/${pathParts[3]}` : "";

    // Naviguer vers le même onglet pour le nouveau patient
    navigate(`/patient/${newPatientId}${currentTab}`);
  };

  return (
    <div className="h-full">
      <h3 className="text-lg font-bold mb-4">Liste des patients</h3>
      <ul className="space-y-2 h-96 overflow-y-auto custom-scrollbar">
        {patients.map((patient) => (
          <li
            key={patient.id}
            className={`p-2 rounded-lg cursor-pointer ${
              patient.id === patientId ? "bg-blue-500 text-white" : "bg-gray-200 hover:bg-blue-300"
            }`}
            onClick={() => handlePatientChange(patient.id)}
          >
            {patient.nom} {patient.prenom}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default PatientSidebar;
import React, { useEffect, useRef } from "react";
import Quill from "quill";
import "quill/dist/quill.snow.css";

const QuillEditor = ({ value, onChange, readOnly = false }) => {
  const editorRef = useRef(null);
  const quillInstance = useRef(null);

  useEffect(() => {
    if (!editorRef.current) return;

    // ⚠️ Supprime l'ancienne instance de Quill avant de recréer
    if (quillInstance.current) {
      quillInstance.current.root.innerHTML = value || "";
      quillInstance.current.enable(!readOnly); // Active/désactive l'édition
      return;
    }

    // ✅ Création de Quill avec une vraie barre d'outils
    quillInstance.current = new Quill(editorRef.current, {
      theme: "snow",
      readOnly: readOnly,
      modules: {
        toolbar: [
          [{ header: [1, 2, 3, false] }],
          ["bold", "italic", "underline", "strike"],
          [{ color: [] }, { background: [] }],
          [{ list: "ordered" }, { list: "bullet" }],
          [{ align: [] }],
          ["blockquote", "code-block"],
          ["link", "image", "video"],
          ["clean"],
        ],
      },
    });

    // ✅ Gérer les changements de texte
    quillInstance.current.on("text-change", () => {
      const newContent = quillInstance.current.root.innerHTML;
      onChange(newContent);
    });

    // ✅ Charger la valeur initiale
    quillInstance.current.root.innerHTML = value || "";

  }, [readOnly]);

  // ✅ Mettre à jour Quill si `value` change
  useEffect(() => {
    if (quillInstance.current && quillInstance.current.root.innerHTML !== value) {
      quillInstance.current.root.innerHTML = value || "";
    }
  }, [value]);

  return <div className="quill-editor" ref={editorRef} />;
};

export default QuillEditor;
import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'

export default function RequireAuth({ children }) {
  const [loading, setLoading] = useState(true)
  const navigate = useNavigate()

  useEffect(() => {
    fetch('http://localhost:3001/auth/me', {
      credentials: 'include'
    })
      .then(res => {
        if (!res.ok) navigate('/login')
        else setLoading(false)
      })
      .catch(() => navigate('/login'))
  }, [navigate])

  if (loading) return <div>Chargement...</div>

  return children
}
import React, { useState } from "react";
import PatientReferences from "./DataClient/PatientReferences.js";
import PatientHealthData from "./DataClient/PatientHealthData.js";
import { updatePatient } from "../../firebase/patientsFirestore.js";

const PatientDataTab = ({ patient }) => {
  const [activeSubTab, setActiveSubTab] = useState("references");
  const [updatedPatient, setUpdatedPatient] = useState({ ...patient });

  // Vérification du patientId
  console.log("📌 PatientDataTab reçoit :", patient);

  const handleChange = (e) => {
    setUpdatedPatient({ ...updatedPatient, [e.target.name]: e.target.value });
  };

  const handleSave = async () => {
    if (!patient?.id) {
      console.error("❌ ERREUR: patientId est undefined !");
      alert("Erreur : Impossible de sauvegarder, l'ID du patient est introuvable.");
      return;
    }

    try {
      await updatePatient(patient.id, updatedPatient);
      alert("Données mises à jour avec succès !");
    } catch (error) {
      console.error("Erreur lors de la mise à jour des données :", error);
      alert("Erreur lors de la mise à jour des données.");
    }
  };

  return (
    <div className="bg-white p-6 rounded-lg shadow-md h-full w-full max-w-8xl mx-auto">
      <h3 className="text-2xl font-bold mb-6 text-gray-800">Données Patient</h3>
      <div className="flex space-x-4 mb-6">
        <button
          className={`py-2 px-4 rounded-lg ${activeSubTab === "references" ? "bg-blue-500 text-white" : "bg-gray-200"}`}
          onClick={() => setActiveSubTab("references")}
        >
          Références et Contacts
        </button>
        <button
          className={`py-2 px-4 rounded-lg ${activeSubTab === "health" ? "bg-blue-500 text-white" : "bg-gray-200"}`}
          onClick={() => setActiveSubTab("health")}
        >
          Données de Santé
        </button>
      </div>

      <div className="transition-all duration-500 ease-in-out h-full overflow-y-auto">
        {activeSubTab === "references" && (
          <PatientReferences
            patient={updatedPatient}
            handleChange={handleChange}
            handleSave={handleSave}
          />
        )}
        {activeSubTab === "health" && (
          <PatientHealthData
            patient={updatedPatient}
            patientId={patient.id}  // ✅ Ajout du patientId ici
            handleChange={handleChange}
            handleSave={handleSave}
          />
        )}
      </div>
    </div>
  );
};

export default PatientDataTab;
import React from "react";
import PatientForm from "./PatientForm.js";

const PatientDetailsTab = ({ patient, isEditing, updatedPatient, handleChange, handleUpdate, setIsEditing }) => {
  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-2xl font-bold mb-6 text-gray-800">Détails du Patient</h3>

      {isEditing ? (
        <PatientForm
          patientData={updatedPatient}
          handleChange={handleChange}
          handleSubmit={handleUpdate}
          isEditing={true}
          setIsEditing={setIsEditing}
        />
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4 text-gray-700">
          <p><strong>NISS:</strong> {patient.niss}</p>
          <p><strong>Titre:</strong> {patient.titre}</p>
          <p><strong>Sexe:</strong> {patient.sexe}</p>
          <p><strong>Langue:</strong> {patient.langue}</p>
          <p><strong>Naissance:</strong> {patient.dateNaissance}</p>
          <p><strong>Nationalité:</strong> {patient.nationalite}</p>
          <p><strong>Adresse:</strong> {patient.adresse}</p>
          <p><strong>Téléphone 1:</strong> {patient.telephone1}</p>
          <p><strong>Téléphone 2:</strong> {patient.telephone2}</p>
          <p><strong>Email:</strong> {patient.email}</p>
          <p><strong>Mutuelle:</strong> {patient.mutuelle}</p>
          <p><strong>CT1/CT2:</strong> {patient.ct1_ct2}</p>
          <p><strong>Tiers Payant:</strong> {patient.tiersPayant}</p>
          <p><strong>Médecin de famille:</strong> {patient.medecinFamille}</p>
          <p><strong>Profession:</strong> {patient.profession}</p>
          <p><strong>Nombre d'enfants:</strong> {patient.nbrEnfants}</p>
          <p><strong>Facturer à:</strong> {patient.facturerA}</p>
          <p><strong>Zone de résidence:</strong> {patient.zoneResidence}</p>
          <p><strong>État civil:</strong> {patient.etatCivil}</p>
        </div>
      )}

      {/* 🟦 Bouton Modifier */}
      {!isEditing && (
        <div className="mt-6 flex justify-end">
          <button className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600" onClick={() => setIsEditing(true)}>
            Modifier
          </button>
        </div>
      )}
    </div>
  );
};

export default PatientDetailsTab;
import React, { useEffect, useState } from "react";
import { addMotifIntervention, getMotifsIntervention, updateMotifIntervention } from "../../firebase/patientsFirestore.js";
import PatientSituation from "./PatientFile/PatientSituation.js";
import PatientTherapeutic from "./PatientFile/PatientTherapeutic.js";
import PatientObjectives from "./PatientFile/PatientObjectives.js";
import PatientDiagnosis from "./PatientFile/PatientDiagnosis.js";
import PatientInterventions from "./PatientFile/PatientInterventions.js";
import PatientSummary from "./PatientFile/PatientSummary.js";

const PatientFileTab = ({ patient }) => {
  const [motifs, setMotifs] = useState([]);
  const [selectedMotif, setSelectedMotif] = useState(null);
  const [activeSubTab, setActiveSubTab] = useState("situation");
  const [newMotif, setNewMotif] = useState({ motifIntervention: "", groupeCible: "", age: "", batteriesCodeCIF: "" });

  useEffect(() => {
    if (!patient?.id) return;

    const fetchMotifs = async () => {
      const motifsList = await getMotifsIntervention(patient.id);
      setMotifs(motifsList);
    };

    fetchMotifs();
  }, [patient?.id]);

  const handleCreateMotif = async () => {
    if (!newMotif.motifIntervention.trim()) return;

    const addedMotif = await addMotifIntervention(patient.id, {
      ...newMotif,
      perspectiveTherapeutique: {
        assesments: "",
        syntheseEvaluation: "",
        restrictionsSouhaits: "",
      },
    });

    if (addedMotif) {
      setMotifs([...motifs, addedMotif]);
      setNewMotif({ motifIntervention: "", groupeCible: "", age: "", batteriesCodeCIF: "" });
    }
  };

  const handleSelectMotif = (motif) => {
    setSelectedMotif({
      ...motif,
      perspectiveTherapeutique: motif.perspectiveTherapeutique || {
        assesments: "",
        syntheseEvaluation: "",
        restrictionsSouhaits: "",
      },
    });
  };

  const handleUpdateMotifData = async (updatedMotif) => {
    if (!selectedMotif) return;
    console.log("🟢 Tentative de mise à jour du motif :", updatedMotif);
    try {
      await updateMotifIntervention(patient.id, selectedMotif.id, updatedMotif);
      console.log("✅ Motif mis à jour avec succès !");
      
      // 🔥 Mise à jour immédiate de la liste des motifs pour voir le changement sans refresh
      setMotifs((prevMotifs) =>
        prevMotifs.map((m) => (m.id === selectedMotif.id ? updatedMotif : m))
      );
      setSelectedMotif(updatedMotif);
    } catch (error) {
      console.error("❌ Erreur lors de la mise à jour du motif :", error);
    }
  };

  return (
    <div className="flex space-x-4">
      {/* Liste des motifs d’intervention */}
      <div className="w-1/6 bg-gray-100 p-4 rounded-lg shadow">
        <h4 className="text-lg font-semibold mb-3">Motifs d’intervention</h4>

        {/* Ajout d'un nouveau motif */}
        <div className="mb-4">
          <input
            type="text"
            placeholder="Motif d'intervention"
            value={newMotif.motifIntervention}
            onChange={(e) => setNewMotif({ ...newMotif, motifIntervention: e.target.value })}
            className="w-full p-2 border rounded-lg mb-2"
          />
          <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleCreateMotif}>
            Ajouter
          </button>
        </div>

        <ul className="space-y-2">
          {motifs.map((motif, index) => ( // 🔹 Ajout de l'index pour éviter l'erreur si `motif.id` est absent
            <li
              key={motif.id || index} // 🔹 Correction ici
              className={`cursor-pointer p-2 rounded-lg ${
                selectedMotif?.id === motif.id ? "bg-blue-500 text-white" : "bg-gray-200"
              } hover:bg-blue-300`}
              onClick={() => handleSelectMotif(motif)}
            >
              <strong>{motif.motifIntervention}</strong>
              <p className="text-sm">Groupe: {motif.groupeCible} | Âge: {motif.age}</p>
              <p className="text-xs">Batteries: {motif.batteriesCodeCIF}</p>
            </li>
          ))}
        </ul>
      </div>

      {/* Affichage des onglets du dossier patient */}
      <div className="w-5/6 bg-white p-4 rounded-lg shadow">
        {selectedMotif ? (
          <>
            <div className="flex space-x-2 mb-4">
              {["situation", "therapeutic", "objectives", "diagnosis", "interventions", "summary"].map((tab, index) => (
                <button
                  key={tab || index} // 🔹 Correction ici
                  className={`py-2 px-4 rounded-lg ${
                    activeSubTab === tab ? "bg-blue-500 text-white" : "bg-gray-200"
                  }`}
                  onClick={() => setActiveSubTab(tab)}
                >
                  {tab === "situation" ? "Situation Personnelle" : ""}
                  {tab === "therapeutic" ? "Perspective Thérapeutique" : ""}
                  {tab === "objectives" ? "Objectifs" : ""}
                  {tab === "diagnosis" ? "Diagnostic" : ""}
                  {tab === "interventions" ? "Compte Rendu" : ""}
                  {tab === "summary" ? "Synthèse" : ""}
                </button>
              ))}
            </div>

            {/* Affichage du sous-onglet sélectionné */}
            {activeSubTab === "situation" && <PatientSituation motif={selectedMotif} patientId={patient.id} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "therapeutic" && <PatientTherapeutic motif={selectedMotif} patientId={patient.id} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "objectives" && <PatientObjectives motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "diagnosis" && <PatientDiagnosis motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "interventions" && <PatientInterventions motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
            {activeSubTab === "summary" && <PatientSummary motif={selectedMotif} updateMotif={handleUpdateMotifData} />}
          </>
        ) : (
          <p className="text-gray-500 text-center">Sélectionnez un motif d’intervention.</p>
        )}
      </div>
    </div>
  );
};

export default PatientFileTab;
import React from "react";

const PatientForm = ({ patientData, handleChange, handleSubmit, isEditing, setIsEditing }) => {
  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h3 className="text-lg font-bold mb-4">{isEditing ? "Modifier le Patient" : "Ajouter un Patient"}</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <input type="text" name="nom" placeholder="Nom" value={patientData.nom || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="prenom" placeholder="Prénom" value={patientData.prenom || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="niss" placeholder="NISS" value={patientData.niss || ""} onChange={handleChange} className="border p-2 rounded" />
        
        <select name="titre" value={patientData.titre || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Titre</option>
          <option value="M.">M.</option>
          <option value="Mme">Mme</option>
          <option value="Dr">Dr</option>
        </select>

        <select name="sexe" value={patientData.sexe || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Sexe</option>
          <option value="Homme">Homme</option>
          <option value="Femme">Femme</option>
          <option value="Autre">Autre</option>
        </select>

        <input type="text" name="langue" placeholder="Langue" value={patientData.langue || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="date" name="dateNaissance" placeholder="Naissance" value={patientData.dateNaissance || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="nationalite" placeholder="Nationalité" value={patientData.nationalite || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="adresse" placeholder="Adresse" value={patientData.adresse || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="telephone1" placeholder="Téléphone 1" value={patientData.telephone1 || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="telephone2" placeholder="Téléphone 2" value={patientData.telephone2 || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="email" name="email" placeholder="Email" value={patientData.email || ""} onChange={handleChange} className="border p-2 rounded" />

        <select name="mutuelle" value={patientData.mutuelle || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Mutuelle</option>
          <option value="Mutualité chrétienne">Mutualité chrétienne</option>
          <option value="Solidaris">Solidaris</option>
          <option value="Autre">Autre</option>
        </select>

        <input type="text" name="ct1_ct2" placeholder="CT1/CT2" value={patientData.ct1_ct2 || ""} onChange={handleChange} className="border p-2 rounded" />

        <select name="tiersPayant" value={patientData.tiersPayant || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Tiers Payant</option>
          <option value="Oui">Oui</option>
          <option value="Non">Non</option>
        </select>

        <input type="text" name="medecinFamille" placeholder="Médecin de famille" value={patientData.medecinFamille || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="profession" placeholder="Profession" value={patientData.profession || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="number" name="nbrEnfants" placeholder="Nombre d'enfants" value={patientData.nbrEnfants || ""} onChange={handleChange} className="border p-2 rounded" />
        <input type="text" name="facturerA" placeholder="Facturer à" value={patientData.facturerA || ""} onChange={handleChange} className="border p-2 rounded" />

        <select name="zoneResidence" value={patientData.zoneResidence || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">Zone de résidence</option>
          <option value="Bruxelles">Bruxelles</option>
          <option value="Wallonie">Wallonie</option>
          <option value="Flandre">Flandre</option>
          <option value="Autre">Autre</option>
        </select>

        <select name="etatCivil" value={patientData.etatCivil || ""} onChange={handleChange} className="border p-2 rounded">
          <option value="">État civil</option>
          <option value="Célibataire">Célibataire</option>
          <option value="Marié(e)">Marié(e)</option>
          <option value="Divorcé(e)">Divorcé(e)</option>
          <option value="Veuf(ve)">Veuf(ve)</option>
        </select>
      </div>

      <div className="mt-4 flex space-x-4">
        <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSubmit}>
          {isEditing ? "Enregistrer" : "Ajouter"}
        </button>
        {isEditing && (
          <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={() => setIsEditing(false)}>
            Annuler
          </button>
        )}
      </div>
    </div>
  );
};

export default PatientForm;
import React, { useEffect, useState } from "react";
import { getPatientNotes, addNoteToPatient, updateNote, deleteNote } from "../../firebase/notesFirestore.js";

const PatientNotesTab = ({ patient }) => {
  const [notes, setNotes] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [newTitle, setNewTitle] = useState("");
  const [newText, setNewText] = useState("");
  const [loading, setLoading] = useState(false);
  const [editingNoteId, setEditingNoteId] = useState(null);
  const [editTitle, setEditTitle] = useState("");
  const [editText, setEditText] = useState("");

  useEffect(() => {
    if (!patient?.id) return;

    const fetchNotes = async () => {
      try {
        console.log("🔍 Récupération des notes pour le patient :", patient.id);
        const notesList = await getPatientNotes(patient.id);

        // S'assurer que notesList est bien un tableau et filtrer les notes invalides
        const validNotes = Array.isArray(notesList) ? notesList.filter(note => note && note.titre) : [];

        console.log("📜 Notes récupérées :", validNotes);
        setNotes(validNotes);
        
      } catch (error) {
        console.error("❌ Erreur lors du chargement des notes :", error);
        setNotes([]); // 🔹 Évite un état undefined
      }
    };

    fetchNotes();
  }, [patient?.id]);

  const handleAddNote = async () => {
    if (newTitle.trim() === "" || newText.trim() === "" || !patient?.id) return;

    setLoading(true);
    try {
      const noteData = {
        titre: newTitle,
        texte: newText || "Pas de texte",
        date: new Date().toISOString(),
      };

      await addNoteToPatient(patient.id, noteData);

      setNotes((prevNotes) => [...prevNotes, noteData]);
      setNewTitle("");
      setNewText("");
      setShowForm(false);
    } catch (error) {
      console.error("❌ Erreur lors de l'ajout de la note :", error);
    }
    setLoading(false);
  };

  const handleEdit = (note) => {
    setEditingNoteId(note.id);
    setEditTitle(note.titre);
    setEditText(note.texte);
  };

  const handleCancelEdit = () => {
    setEditingNoteId(null);
    setEditTitle("");
    setEditText("");
  };

  const handleSaveEdit = async (noteId) => {
    try {
      await updateNote(patient.id, noteId, { titre: editTitle, texte: editText });
      setNotes((prevNotes) =>
        prevNotes.map((note) =>
          note.id === noteId ? { ...note, titre: editTitle, texte: editText } : note
        )
      );
      setEditingNoteId(null);
    } catch (error) {
      console.error("❌ Erreur lors de la mise à jour de la note :", error);
    }
  };

  const handleDeleteNote = async (noteId) => {
    const confirmed = window.confirm("Êtes-vous sûr de vouloir supprimer cette note ?");
    if (!confirmed) return;

    try {
      await deleteNote(patient.id, noteId);
      setNotes((prevNotes) => prevNotes.filter((note) => note.id !== noteId));
    } catch (error) {
      console.error("❌ Erreur lors de la suppression de la note :", error);
    }
  };

  return (
    <div className="p-4 bg-white rounded-lg shadow">
      <h3 className="text-lg font-bold mb-2">Carnet de notes</h3>

      <button
        className="mb-4 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
        onClick={() => setShowForm(!showForm)}
      >
        {showForm ? "Annuler" : "Ajouter une note"}
      </button>

      {showForm && (
        <div className="mb-4 border p-4 rounded-lg bg-gray-100">
          <input
            type="text"
            className="w-full mb-2 border rounded-lg p-2"
            placeholder="Titre de la note"
            value={newTitle}
            onChange={(e) => setNewTitle(e.target.value)}
          />
          <textarea
            className="w-full mb-2 border rounded-lg p-2"
            placeholder="Écrire une note..."
            value={newText}
            onChange={(e) => setNewText(e.target.value)}
          />
          <button
            className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
            onClick={handleAddNote}
            disabled={loading}
          >
            {loading ? "Ajout..." : "Ajouter"}
          </button>
        </div>
      )}

      <div className="mt-4">
        {Array.isArray(notes) && notes.length > 0 ? (
          <ul className="space-y-2">
            {notes.map((note, index) => (
              <li key={index} className="border-b py-2">
                {editingNoteId === note.id ? (
                  <div className="mb-2">
                    <input
                      type="text"
                      className="w-full mb-2 border rounded-lg p-2"
                      value={editTitle}
                      onChange={(e) => setEditTitle(e.target.value)}
                    />
                    <textarea
                      className="w-full mb-2 border rounded-lg p-2"
                      value={editText}
                      onChange={(e) => setEditText(e.target.value)}
                    />
                    <div className="flex space-x-2">
                      <button
                        className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                        onClick={() => handleSaveEdit(note.id)}
                      >
                        Enregistrer
                      </button>
                      <button
                        className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600"
                        onClick={handleCancelEdit}
                      >
                        Annuler
                      </button>
                    </div>
                  </div>
                ) : (
                  <>
                    <div className="flex justify-between items-center">
                      <span className="text-lg font-semibold text-blue-600">{note?.titre || "Sans titre"}</span>
                      <span className="text-gray-500 text-sm">
                        {note?.date ? new Date(note.date).toLocaleDateString("fr-FR", {
                          day: "2-digit",
                          month: "short",
                          year: "numeric",
                        }) : "Date inconnue"}
                      </span>
                    </div>

                    <p className="text-gray-700 text-sm">{note?.texte || "Pas de texte"}</p>

                    <div className="flex space-x-2 mt-2">
                      <button
                        className="bg-yellow-500 text-white px-3 py-1 rounded-lg hover:bg-yellow-600"
                        onClick={() => handleEdit(note)}
                      >
                        Modifier
                      </button>
                      <button
                        className="bg-red-500 text-white px-3 py-1 rounded-lg hover:bg-red-600"
                        onClick={() => handleDeleteNote(note.id)}
                      >
                        Supprimer
                      </button>
                    </div>
                  </>
                )}
              </li>
            ))}
          </ul>
        ) : (
          <p className="text-gray-500">Aucune note pour ce patient.</p>
        )}
      </div>
    </div>
  );
};

export default PatientNotesTab;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";
import { updatePatient } from "../../../firebase/patientsFirestore.js";

const PatientHealthData = ({ patient, patientId, handleChange, handleSave }) => {
  const [editing, setEditing] = useState(false);
  const [healthData, setHealthData] = useState({
    diagnosticMedical: patient?.diagnosticMedical || "",
    antecedentsMedicaux: patient?.antecedentsMedicaux || "",
    chroniqueSante: patient?.chroniqueSante || "",
  });

  useEffect(() => {
    setHealthData({
      diagnosticMedical: patient?.diagnosticMedical || "",
      antecedentsMedicaux: patient?.antecedentsMedicaux || "",
      chroniqueSante: patient?.chroniqueSante || "",
    });
  }, [patient]);

  const handleEdit = () => {
    setEditing(true);
  };

  const handleCancel = () => {
    setEditing(false);
    setHealthData({
      diagnosticMedical: patient?.diagnosticMedical || "",
      antecedentsMedicaux: patient?.antecedentsMedicaux || "",
      chroniqueSante: patient?.chroniqueSante || "",
    });
  };

  const handleInputChange = (field, value) => {
    setHealthData((prev) => ({ ...prev, [field]: value }));
  };

  const handleSaveHealthData = async () => {
    if (!patientId) {
      console.error("❌ patientId est undefined !");
      alert("Erreur : Impossible de sauvegarder, l'ID du patient est introuvable.");
      return;
    }

    const updatedData = {
      diagnosticMedical: healthData.diagnosticMedical || "",
      antecedentsMedicaux: healthData.antecedentsMedicaux || "",
      chroniqueSante: healthData.chroniqueSante || "",
    };

    console.log("📤 Sauvegarde des données :", patientId, updatedData);

    try {
      await updatePatient(patientId, updatedData);
      console.log("✅ Mise à jour réussie !");
      handleSave(); // Rafraîchir les données
      setEditing(false);
    } catch (error) {
      console.error("❌ Erreur lors de la mise à jour :", error);
    }
  };

  return (
    <div className="h-full overflow-y-auto w-full bg-white p-6 rounded-lg shadow-md">
      <h4 className="text-lg font-semibold mb-4">Données de Santé</h4>
      <div className="space-y-4">
        <div>
          <label className="block text-gray-700 font-semibold">Diagnostic Médical</label>
          <input
            type="text"
            name="diagnosticMedical"
            placeholder="Diagnostic médical"
            value={healthData.diagnosticMedical}
            onChange={(e) => handleInputChange("diagnosticMedical", e.target.value)}
            className="border p-2 rounded w-full"
            disabled={!editing}
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 font-semibold">Antécédents Médicaux</label>
          <QuillEditor
            value={healthData.antecedentsMedicaux}
            onChange={(value) => handleInputChange("antecedentsMedicaux", value)}
            readOnly={!editing}
          />
        </div>

        <div className="mb-4">
          <label className="block text-gray-700 font-semibold">Chronique de Santé</label>
          <QuillEditor
            value={healthData.chroniqueSante}
            onChange={(value) => handleInputChange("chroniqueSante", value)}
            readOnly={!editing}
          />
        </div>

        <div className="flex space-x-2">
          {!editing ? (
            <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={handleEdit}>
              Modifier
            </button>
          ) : (
            <>
              <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSaveHealthData}>
                Enregistrer
              </button>
              <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
                Annuler
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default PatientHealthData;
import React, { useState } from "react";

const PatientReferences = ({ patient, handleChange, handleSave }) => {
  const [editingIndex, setEditingIndex] = useState(null);
  const [editingType, setEditingType] = useState(null);
  const [newEntry, setNewEntry] = useState({});

  // 🟢 Activer l'édition pour une entrée spécifique ou ajouter une nouvelle entrée
  const handleEdit = (index, type) => {
    setEditingIndex(index);
    setEditingType(type);

    if (index !== null) {
      setNewEntry(type === "references" ? patient.references[index] : patient.contacts[index]);
    } else {
      setNewEntry({
        dispensateurNom: "",
        dispensateurPrenom: "",
        dispensateurType: "",
        dispensateurINAMI: "",
        dispensateurTelephone: "",
        dispensateurEmail: "",
        contactNom: "",
        contactPrenom: "",
        contactRelation: "",
        contactTelephone: "",
        contactEmail: "",
        contactCommentaire: ""
      });
    }
  };

  // 🟢 Fermer le formulaire quand on clique sur "Annuler"
  const handleCancel = () => {
    setEditingIndex(null);
    setEditingType(null);
    setNewEntry({});
  };



  // 🟢 Gérer les changements dans le formulaire
  const handleEntryChange = (e) => {
    setNewEntry({ ...newEntry, [e.target.name]: e.target.value });
  };

  // 🟢 Enregistrer une nouvelle entrée ou modification
  const handleSaveEntry = (type) => {
    let updatedList = [...(patient[type] || [])];

    if (editingIndex !== null) {
      updatedList[editingIndex] = newEntry;
    } else {
      updatedList.push(newEntry);
    }

    handleChange({ target: { name: type, value: updatedList } });

    setEditingIndex(null);
    setEditingType(null);
    setNewEntry({});
    handleSave();
  };

  // 🟢 Supprimer une entrée avec confirmation
  const handleDelete = (index, type) => {
    if (window.confirm("Êtes-vous sûr de vouloir supprimer cette entrée ?")) {
      let updatedList = [...(patient[type] || [])];
      updatedList.splice(index, 1);
      handleChange({ target: { name: type, value: updatedList } });
      handleSave();
    }
  };

  return (
    <div className="h-full overflow-y-auto w-full bg-white p-6 rounded-lg shadow-md">
      <h4 className="text-2xl font-bold text-gray-800 mb-6 text-center">Références et Contacts</h4>

      <div className="flex-grow overflow-auto p-2">
        {/* 🟦 Tableau des Dispensateurs de soin */}
        <div className="relative mb-8">
          <h5 className="text-lg font-semibold text-gray-700 mb-3">Références et Contacts</h5>
          <button className="absolute top-0 right-0 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => handleEdit(null, "references")}>
            {editingType === "references" ? "Annuler" : "Ajouter"}
          </button>
          <table className="w-full border-collapse border border-gray-300">
            <thead>
              <tr className="bg-gray-200 text-left">
                <th className="border border-gray-300 px-4 py-2">Nom</th>
                <th className="border border-gray-300 px-4 py-2">Prénom</th>
                <th className="border border-gray-300 px-4 py-2">Type</th>
                <th className="border border-gray-300 px-4 py-2">INAMI</th>
                <th className="border border-gray-300 px-4 py-2">Téléphone</th>
                <th className="border border-gray-300 px-4 py-2">Email</th>
                <th className="border border-gray-300 px-4 py-2">Action</th>
              </tr>
            </thead>
            <tbody>
              {(patient.references || []).map((ref, index) => (
                <tr key={index} className="border border-gray-300">
                  <td className="px-4 py-2">{ref.dispensateurNom}</td>
                  <td className="px-4 py-2">{ref.dispensateurPrenom}</td>
                  <td className="px-4 py-2">{ref.dispensateurType}</td>
                  <td className="px-4 py-2">{ref.dispensateurINAMI}</td>
                  <td className="px-4 py-2">{ref.dispensateurTelephone}</td>
                  <td className="px-4 py-2">{ref.dispensateurEmail}</td>
                  <td className="px-4 py-2 flex items-center space-x-2">
                    <button className="text-blue-500 hover:underline" onClick={() => handleEdit(index, "references")}>✏️</button>
                    <button className="text-red-500 hover:underline" onClick={() => handleDelete(index, "references")}>🗑️</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {editingType === "references" && (
            <div className="mt-4 p-4 bg-gray-100 rounded">
              <input type="text" name="dispensateurNom" placeholder="Nom" value={newEntry.dispensateurNom || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="dispensateurPrenom" placeholder="Prénom" value={newEntry.dispensateurPrenom || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="dispensateurType" placeholder="Type" value={newEntry.dispensateurType || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="dispensateurINAMI" placeholder="INAMI" value={newEntry.dispensateurINAMI || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" />
              <input type="text" name="dispensateurTelephone" placeholder="Téléphone" value={newEntry.dispensateurTelephone || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="dispensateurEmail" placeholder="Email" value={newEntry.dispensateurEmail || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" />
              <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={() => handleSaveEntry("references")}>
                Enregistrer
              </button>
              <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 ml-2" onClick={handleCancel}>
                Annuler
              </button>
            </div>
          )}
        </div>

        {/* 🟦 Tableau des Autres Contacts */}
        <div className="relative">
          <h5 className="text-lg font-semibold text-gray-700 mb-3">Données Santé</h5>
          <button className="absolute top-0 right-0 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => handleEdit(null, "contacts")}>
            {editingType === "contacts" ? "Annuler" : "Ajouter"}
          </button>
          <table className="w-full border-collapse border border-gray-300">
            <thead>
              <tr className="bg-gray-200 text-left">
                <th className="border border-gray-300 px-4 py-2">Nom</th>
                <th className="border border-gray-300 px-4 py-2">Prénom</th>
                <th className="border border-gray-300 px-4 py-2">Relation</th>
                <th className="border border-gray-300 px-4 py-2">Téléphone</th>
                <th className="border border-gray-300 px-4 py-2">Email</th>
                <th className="border border-gray-300 px-4 py-2">Commentaire</th>
                <th className="border border-gray-300 px-4 py-2">Action</th>
              </tr>
            </thead>
            <tbody>
              {(patient.contacts || []).map((contact, index) => (
                <tr key={index} className="border border-gray-300">
                  <td className="px-4 py-2">{contact.contactNom}</td>
                  <td className="px-4 py-2">{contact.contactPrenom}</td>
                  <td className="px-4 py-2">{contact.contactRelation}</td>
                  <td className="px-4 py-2">{contact.contactTelephone}</td>
                  <td className="px-4 py-2">{contact.contactEmail}</td>
                  <td className="px-4 py-2 whitespace-pre-wrap break-words">{contact.contactCommentaire}</td>
                  <td className="px-4 py-2 flex items-center space-x-2">
                    <button className="text-blue-500 hover:underline" onClick={() => handleEdit(index, "contacts")}>✏️</button>
                    <button className="text-red-500 hover:underline" onClick={() => handleDelete(index, "contacts")}>🗑️</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {editingType === "contacts" && (
            <div className="mt-4 p-4 bg-gray-100 rounded">
              <input type="text" name="contactNom" placeholder="Nom" value={newEntry.contactNom || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="contactPrenom" placeholder="Prénom" value={newEntry.contactPrenom || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="contactRelation" placeholder="Relation" value={newEntry.contactRelation || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="contactTelephone" placeholder="Téléphone" value={newEntry.contactTelephone || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" required />
              <input type="text" name="contactEmail" placeholder="Email" value={newEntry.contactEmail || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" />
              <textarea name="contactCommentaire" placeholder="Commentaire" value={newEntry.contactCommentaire || ""} onChange={handleEntryChange} className="border p-2 rounded w-full mb-2" />
              <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={() => handleSaveEntry("contacts")}>
                Enregistrer
              </button>
              <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 ml-2" onClick={handleCancel}>
                Annuler
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default PatientReferences;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientDiagnosis = ({ motif, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [diagnostic, setDiagnostic] = useState(motif?.diagnostic || "");

  useEffect(() => {
    setDiagnostic(motif?.diagnostic || "");
  }, [motif]);

  const handleSave = async () => {
    if (!motif) return;

    const updatedMotif = {
      ...motif,
      diagnostic,
    };

    try {
      await updateMotif(updatedMotif);
      setEditing(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde du diagnostic :", error);
    }
  };

  const handleCancel = () => {
    setEditing(false);
    setDiagnostic(motif?.diagnostic || "");
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg h-full">
      <h4 className="text-md font-semibold mb-4">Diagnostic</h4>

      {/* ✅ Ajout d'un conteneur propre pour QuillEditor */}
      <div className="border rounded-lg p-2">
        <QuillEditor
          value={diagnostic}
          onChange={setDiagnostic}
          readOnly={!editing}
          className="min-h-[150px] max-h-64 overflow-auto"
        />
      </div>

      <div className="flex space-x-2 mt-4">
        {editing ? (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        ) : (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => setEditing(true)}>
            Modifier
          </button>
        )}
      </div>
    </div>
  );
};

export default PatientDiagnosis;
import React, { useState } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientInterventions = ({ motif, updateMotif }) => {
  const [editingIndex, setEditingIndex] = useState(null);
  const [newIntervention, setNewIntervention] = useState({
    date: "",
    texte: "",
  });
  const [showForm, setShowForm] = useState(false);

  const handleInputChange = (field, value) => {
    setNewIntervention((prev) => ({ ...prev, [field]: value }));
  };

  const handleSaveIntervention = async () => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: [
        ...(motif.compteRenduInterventions || []),
        newIntervention,
      ],
    };

    try {
      await updateMotif(updatedMotif);
      setNewIntervention({ date: "", texte: "" });
      setShowForm(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de l'intervention :", error);
    }
  };

  const handleEditIntervention = (index) => {
    setEditingIndex(index);
    setNewIntervention(motif.compteRenduInterventions[index]);
    setShowForm(true);
  };

  const handleSaveEditIntervention = async () => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: motif.compteRenduInterventions.map((intervention, index) =>
        index === editingIndex ? newIntervention : intervention
      ),
    };

    try {
      await updateMotif(updatedMotif);
      setEditingIndex(null);
      setNewIntervention({ date: "", texte: "" });
      setShowForm(false);
    } catch (error) {
      console.error("Erreur lors de la mise à jour de l'intervention :", error);
    }
  };

  const handleDeleteIntervention = async (index) => {
    const updatedMotif = {
      ...motif,
      compteRenduInterventions: motif.compteRenduInterventions.filter((_, i) => i !== index),
    };

    try {
      await updateMotif(updatedMotif);
    } catch (error) {
      console.error("Erreur lors de la suppression de l'intervention :", error);
    }
  };

  const handleCancel = () => {
    setEditingIndex(null);
    setNewIntervention({ date: "", texte: "" });
    setShowForm(false);
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-md font-semibold mb-4">Compte Rendu des Interventions</h4>

      <button
        className="mb-4 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
        onClick={() => {
          setShowForm(true);
          setEditingIndex(null);
          setNewIntervention({ date: "", texte: "" });
        }}
      >
        Ajouter une intervention
      </button>

      {showForm && (
        <div className="mb-4 border p-4 rounded-lg">
          <input
            type="date"
            className="w-full mb-2 border rounded-lg p-2"
            placeholder="Date de l'intervention"
            value={newIntervention.date}
            onChange={(e) => handleInputChange("date", e.target.value)}
          />
          <QuillEditor
            value={newIntervention.texte}
            onChange={(value) => handleInputChange("texte", value)}
            readOnly={false}
          />
          <div className="flex space-x-2 mt-4">
            {editingIndex !== null ? (
              <>
                <button
                  className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                  onClick={handleSaveEditIntervention}
                >
                  Enregistrer
                </button>
                <button
                  className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600"
                  onClick={handleCancel}
                >
                  Annuler
                </button>
              </>
            ) : (
              <button
                className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                onClick={handleSaveIntervention}
              >
                Ajouter
              </button>
            )}
          </div>
        </div>
      )}

      <div className="mt-4">
        {motif.compteRenduInterventions?.length > 0 ? (
          <ul className="space-y-2">
            {motif.compteRenduInterventions.map((intervention, index) => (
              <li key={index} className="border-b py-2">
                <div className="flex justify-between items-center">
                  <div>
                    <p><strong>Date:</strong> {intervention.date || "Non spécifiée"}</p>
                    <div dangerouslySetInnerHTML={{ __html: intervention.texte }} />
                  </div>
                  <div className="flex space-x-2">
                    <button
                      className="text-yellow-500 hover:underline"
                      onClick={() => handleEditIntervention(index)}
                    >
                      ✏️
                    </button>
                    <button
                      className="text-red-500 hover:underline"
                      onClick={() => handleDeleteIntervention(index)}
                    >
                      🗑️
                    </button>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        ) : (
          <p className="text-gray-500">Aucune intervention enregistrée.</p>
        )}
      </div>
    </div>
  );
};

export default PatientInterventions;
import React, { useState } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientObjectives = ({ motif, updateMotif }) => {
  const [selectedLongTermObjective, setSelectedLongTermObjective] = useState(null);
  const [newLongTermObjective, setNewLongTermObjective] = useState({
    titre: "",
  });
  const [newShortTermObjective, setNewShortTermObjective] = useState({
    titre: "",
    dateDebut: "",
    dateFin: "",
    description: "",
    statut: "ouvert",
  });
  const [showShortTermForm, setShowShortTermForm] = useState(false);
  const [editingLongTermObjective, setEditingLongTermObjective] = useState(null);
  const [editingShortTermObjective, setEditingShortTermObjective] = useState(null);

  const handleSelectLongTermObjective = (objective) => {
    setSelectedLongTermObjective(objective);
    setShowShortTermForm(false);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewShortTermObjective((prev) => ({ ...prev, [name]: value }));
  };

  const handleLongTermInputChange = (e) => {
    const { name, value } = e.target;
    setNewLongTermObjective((prev) => ({ ...prev, [name]: value }));
  };

  const handleSaveShortTermObjective = async () => {
    if (!selectedLongTermObjective) return;

    const updatedMotif = {
      ...motif,
      objectifsCourtTerme: [
        ...(motif.objectifsCourtTerme || []),
        {
          ...newShortTermObjective,
          longTermObjectiveId: selectedLongTermObjective.id,
        },
      ],
    };

    try {
      await updateMotif(updatedMotif);
      setNewShortTermObjective({
        titre: "",
        dateDebut: "",
        dateFin: "",
        description: "",
        statut: "ouvert",
      });
      setShowShortTermForm(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de l'objectif à court terme :", error);
    }
  };

  const handleSaveLongTermObjective = async () => {
    if (!newLongTermObjective.titre.trim()) return;

    const updatedMotif = {
      ...motif,
      objectifsLongTerme: [
        ...(motif.objectifsLongTerme || []),
        {
          ...newLongTermObjective,
          id: Date.now().toString(), // Générer un ID unique pour l'objectif à long terme
        },
      ],
    };

    try {
      await updateMotif(updatedMotif);
      setNewLongTermObjective({ titre: "" });
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de l'objectif à long terme :", error);
    }
  };

  const handleEditLongTermObjective = (objective) => {
    setEditingLongTermObjective(objective);
    setNewLongTermObjective({ titre: objective.titre });
  };

  const handleSaveEditLongTermObjective = async () => {
    const updatedMotif = {
      ...motif,
      objectifsLongTerme: motif.objectifsLongTerme.map((obj) =>
        obj.id === editingLongTermObjective.id ? { ...obj, titre: newLongTermObjective.titre } : obj
      ),
    };

    try {
      await updateMotif(updatedMotif);
      setEditingLongTermObjective(null);
      setNewLongTermObjective({ titre: "" });
    } catch (error) {
      console.error("Erreur lors de la mise à jour de l'objectif à long terme :", error);
    }
  };

  const handleDeleteLongTermObjective = async (objectiveId) => {
    const updatedMotif = {
      ...motif,
      objectifsLongTerme: motif.objectifsLongTerme.filter((obj) => obj.id !== objectiveId),
      objectifsCourtTerme: motif.objectifsCourtTerme.filter((obj) => obj.longTermObjectiveId !== objectiveId),
    };

    try {
      await updateMotif(updatedMotif);
      setSelectedLongTermObjective(null);
    } catch (error) {
      console.error("Erreur lors de la suppression de l'objectif à long terme :", error);
    }
  };

  const handleEditShortTermObjective = (objective) => {
    setEditingShortTermObjective(objective);
    setNewShortTermObjective({
      titre: objective.titre,
      dateDebut: objective.dateDebut,
      dateFin: objective.dateFin,
      description: objective.description,
      statut: objective.statut,
    });
    setShowShortTermForm(true);
  };

  const handleSaveEditShortTermObjective = async () => {
    const updatedMotif = {
      ...motif,
      objectifsCourtTerme: motif.objectifsCourtTerme.map((obj) =>
        obj === editingShortTermObjective ? { ...newShortTermObjective, longTermObjectiveId: selectedLongTermObjective.id } : obj
      ),
    };

    try {
      await updateMotif(updatedMotif);
      setEditingShortTermObjective(null);
      setNewShortTermObjective({
        titre: "",
        dateDebut: "",
        dateFin: "",
        description: "",
        statut: "ouvert",
      });
      setShowShortTermForm(false);
    } catch (error) {
      console.error("Erreur lors de la mise à jour de l'objectif à court terme :", error);
    }
  };

  const handleDeleteShortTermObjective = async (objective) => {
    const updatedMotif = {
      ...motif,
      objectifsCourtTerme: motif.objectifsCourtTerme.filter((obj) => obj !== objective),
    };

    try {
      await updateMotif(updatedMotif);
    } catch (error) {
      console.error("Erreur lors de la suppression de l'objectif à court terme :", error);
    }
  };

  return (
    <div className="flex space-x-4">
      {/* Liste des objectifs à long terme */}
      <div className="w-1/3 bg-gray-100 p-4 rounded-lg shadow">
        <h4 className="text-lg font-semibold mb-3">Objectifs Long Terme</h4>
        <div className="mb-4">
          <input
            type="text"
            placeholder="Titre de l'objectif à long terme"
            value={newLongTermObjective.titre}
            onChange={handleLongTermInputChange}
            name="titre"
            className="w-full p-2 border rounded-lg mb-2"
          />
          {editingLongTermObjective ? (
            <>
              <button
                className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                onClick={handleSaveEditLongTermObjective}
              >
                Enregistrer
              </button>
              <button
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 ml-2"
                onClick={() => setEditingLongTermObjective(null)}
              >
                Annuler
              </button>
            </>
          ) : (
            <button
              className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
              onClick={handleSaveLongTermObjective}
            >
              Ajouter
            </button>
          )}
        </div>
        <ul className="space-y-2">
          {motif.objectifsLongTerme?.map((objective, index) => (
            <li
              key={index}
              className={`cursor-pointer p-2 rounded-lg ${
                selectedLongTermObjective?.id === objective.id ? "bg-blue-500 text-white" : "bg-gray-200"
              } hover:bg-blue-300`}
              onClick={() => handleSelectLongTermObjective(objective)}
            >
              <div className="flex justify-between items-center">
                <strong>{objective.titre}</strong>
                <div className="flex space-x-2">
                  <button
                    className="text-yellow-500 hover:underline"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleEditLongTermObjective(objective);
                    }}
                  >
                    ✏️
                  </button>
                  <button
                    className="text-red-500 hover:underline"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteLongTermObjective(objective.id);
                    }}
                  >
                    🗑️
                  </button>
                </div>
              </div>
            </li>
          ))}
        </ul>
      </div>

      {/* Formulaire pour créer un objectif à court terme */}
      <div className="w-2/3 bg-white p-4 rounded-lg shadow">
        {selectedLongTermObjective ? (
          <>
            <div className="flex justify-between items-center mb-4">
              <h4 className="text-lg font-semibold">Objectifs à Court Terme pour "{selectedLongTermObjective.titre}"</h4>
              <button
                className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
                onClick={() => {
                  setShowShortTermForm(true);
                  setEditingShortTermObjective(null);
                  setNewShortTermObjective({
                    titre: "",
                    dateDebut: "",
                    dateFin: "",
                    description: "",
                    statut: "ouvert",
                  });
                }}
              >
                Ajouter
              </button>
            </div>
            {showShortTermForm ? (
              <>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Titre :</label>
                  <input
                    type="text"
                    name="titre"
                    value={newShortTermObjective.titre}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Date Début :</label>
                  <input
                    type="date"
                    name="dateDebut"
                    value={newShortTermObjective.dateDebut}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Date Fin :</label>
                  <input
                    type="date"
                    name="dateFin"
                    value={newShortTermObjective.dateFin}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Description :</label>
                  <QuillEditor
                    value={newShortTermObjective.description}
                    onChange={(value) => handleInputChange({ target: { name: "description", value } })}
                    readOnly={false}
                  />
                </div>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700">Statut :</label>
                  <select
                    name="statut"
                    value={newShortTermObjective.statut}
                    onChange={handleInputChange}
                    className="w-full p-2 border rounded-lg"
                  >
                    <option value="ouvert">Ouvert</option>
                    <option value="fermé">Fermé</option>
                  </select>
                </div>
                {editingShortTermObjective ? (
                  <>
                    <button
                      className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                      onClick={handleSaveEditShortTermObjective}
                    >
                      Enregistrer
                    </button>
                    <button
                      className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 ml-2"
                      onClick={() => {
                        setEditingShortTermObjective(null);
                        setShowShortTermForm(false);
                      }}
                    >
                      Annuler
                    </button>
                  </>
                ) : (
                  <button
                    className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                    onClick={handleSaveShortTermObjective}
                  >
                    Enregistrer
                  </button>
                )}
              </>
            ) : (
              <ul className="space-y-2">
                {motif.objectifsCourtTerme
                  ?.filter((obj) => obj.longTermObjectiveId === selectedLongTermObjective.id)
                  .map((objective, index) => (
                    <li key={index} className="p-2 rounded-lg bg-gray-200">
                      <div className="flex justify-between items-center">
                        <div>
                          <strong>{objective.titre}</strong>
                          <p>Date Début: {objective.dateDebut}</p>
                          <p>Date Fin: {objective.dateFin}</p>
                          <p>Description: <span dangerouslySetInnerHTML={{ __html: objective.description }} /></p>
                          <p>Statut: {objective.statut}</p>
                        </div>
                        <div className="flex space-x-2">
                          <button
                            className="text-yellow-500 hover:underline"
                            onClick={() => handleEditShortTermObjective(objective)}
                          >
                            ✏️
                          </button>
                          <button
                            className="text-red-500 hover:underline"
                            onClick={() => handleDeleteShortTermObjective(objective)}
                          >
                            🗑️
                          </button>
                        </div>
                      </div>
                    </li>
                  ))}
              </ul>
            )}
          </>
        ) : (
          <p className="text-gray-500">Sélectionnez un objectif à long terme pour créer un objectif à court terme.</p>
        )}
      </div>
    </div>
  );
};

export default PatientObjectives;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";
import { updateMotifIntervention } from "../../../firebase/patientsFirestore.js"; // 🔹 Vérifie que cet import est correct

const PatientSituation = ({ motif, patientId }) => {
  const [editing, setEditing] = useState(false);
  const [newSituation, setNewSituation] = useState({
    personne: motif?.situationPersonnelle?.personne || "",
    occupation: motif?.situationPersonnelle?.occupation || "",
    environnement: motif?.situationPersonnelle?.environnement || "",
  });

  useEffect(() => {
    setNewSituation({
      personne: motif?.situationPersonnelle?.personne || "",
      occupation: motif?.situationPersonnelle?.occupation || "",
      environnement: motif?.situationPersonnelle?.environnement || "",
    });
  }, [motif]);

  // ✅ Active le mode édition
  const handleEdit = () => {
    setEditing(true);
  };

  // ❌ Annule l'édition et restaure les valeurs initiales
  const handleCancel = () => {
    setEditing(false);
    setNewSituation({
      personne: motif?.situationPersonnelle?.personne || "",
      occupation: motif?.situationPersonnelle?.occupation || "",
      environnement: motif?.situationPersonnelle?.environnement || "",
    });
  };

  // ✏️ Met à jour localement les valeurs pendant la saisie
  const handleInputChange = (field, value) => {
    setNewSituation((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    if (!motif || !patientId) {
      console.error("❌ patientId ou motif est undefined !");
      return;
    }
  
    const updatedMotif = {
      ...motif,
      situationPersonnelle: {
        personne: newSituation.personne || "",
        occupation: newSituation.occupation || "",
        environnement: newSituation.environnement || "",
      },
    };
  
    console.log("📤 Tentative d'enregistrement :", patientId, motif.id, updatedMotif);
  
    try {
      const success = await updateMotifIntervention(patientId, motif.id, updatedMotif);
  
      if (success) {
        console.log("✅ Mise à jour réussie !");
        
        // 🛑 Ajout : Mise à jour du `state` pour rafraîchir immédiatement l'affichage
        setNewSituation(updatedMotif.situationPersonnelle);
        
        // 🛑 Ajout : Mise à jour du motif actuel
        motif.situationPersonnelle = updatedMotif.situationPersonnelle;
  
        setEditing(false);
      } else {
        console.error("❌ Mise à jour échouée.");
      }
    } catch (error) {
      console.error("❌ Erreur lors de la mise à jour :", error);
    }
  };
  

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-lg font-semibold mb-4">Situation Personnelle</h4>

      {/* ✅ Éditeur pour "Personne" */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Personne :</label>
        <QuillEditor
          value={newSituation.personne}
          onChange={(value) => handleInputChange("personne", value)}
          readOnly={!editing}
        />
      </div>

      {/* ✅ Éditeur pour "Occupation" */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Occupation :</label>
        <QuillEditor
          value={newSituation.occupation}
          onChange={(value) => handleInputChange("occupation", value)}
          readOnly={!editing}
        />
      </div>

      {/* ✅ Éditeur pour "Environnement" */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Environnement :</label>
        <QuillEditor
          value={newSituation.environnement}
          onChange={(value) => handleInputChange("environnement", value)}
          readOnly={!editing}
        />
      </div>

      {/* ✅ Boutons Modifier / Enregistrer / Annuler */}
      <div className="flex space-x-2">
        {!editing ? (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={handleEdit}>
            Modifier
          </button>
        ) : (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default PatientSituation;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";

const PatientSummary = ({ motif, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [synthese, setSynthese] = useState(motif?.synthese || "");

  useEffect(() => {
    setSynthese(motif?.synthese || "");
  }, [motif]);

  const handleSave = async () => {
    if (!motif) return;

    const updatedMotif = {
      ...motif,
      synthese,
    };

    try {
      await updateMotif(updatedMotif);
      setEditing(false);
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de la synthèse :", error);
    }
  };

  const handleCancel = () => {
    setEditing(false);
    setSynthese(motif?.synthese || "");
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg h-full">
      <h4 className="text-md font-semibold mb-4">Synthèse</h4>

      <div className="border rounded-lg p-2">
        <QuillEditor
          value={synthese}
          onChange={setSynthese}
          readOnly={!editing}
          className="min-h-[150px] max-h-64 overflow-auto"
        />
      </div>

      <div className="flex space-x-2 mt-4">
        {editing ? (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        ) : (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={() => setEditing(true)}>
            Modifier
          </button>
        )}
      </div>
    </div>
  );
};

export default PatientSummary;
import React, { useState, useEffect } from "react";
import QuillEditor from "../../QuillEditor.js";
import { updateMotifIntervention } from "../../../firebase/patientsFirestore.js";

const PatientTherapeutic = ({ motif, patientId, updateMotif }) => {
  const [editing, setEditing] = useState(false);
  const [therapeuticData, setTherapeuticData] = useState({
    assesments: motif?.perspectiveTherapeutique?.assesments || "",
    syntheseEvaluation: motif?.perspectiveTherapeutique?.syntheseEvaluation || "",
    restrictionsSouhaits: motif?.perspectiveTherapeutique?.restrictionsSouhaits || "",
    diagnosticOccupationnel: motif?.perspectiveTherapeutique?.diagnosticOccupationnel || "",
  });

  useEffect(() => {
    setTherapeuticData({
      assesments: motif?.perspectiveTherapeutique?.assesments || "",
      syntheseEvaluation: motif?.perspectiveTherapeutique?.syntheseEvaluation || "",
      restrictionsSouhaits: motif?.perspectiveTherapeutique?.restrictionsSouhaits || "",
      diagnosticOccupationnel: motif?.perspectiveTherapeutique?.diagnosticOccupationnel || "",
    });
  }, [motif]);

  const handleEdit = () => {
    setEditing(true);
  };

  const handleCancel = () => {
    setEditing(false);
    setTherapeuticData({
      assesments: motif?.perspectiveTherapeutique?.assesments || "",
      syntheseEvaluation: motif?.perspectiveTherapeutique?.syntheseEvaluation || "",
      restrictionsSouhaits: motif?.perspectiveTherapeutique?.restrictionsSouhaits || "",
      diagnosticOccupationnel: motif?.perspectiveTherapeutique?.diagnosticOccupationnel || "",
    });
  };

  const handleInputChange = (field, value) => {
    setTherapeuticData((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    if (!motif || !patientId) {
      console.error("❌ patientId ou motif est undefined !");
      return;
    }

    const updatedMotif = {
      ...motif,
      perspectiveTherapeutique: {
        assesments: therapeuticData.assesments || "",
        syntheseEvaluation: therapeuticData.syntheseEvaluation || "",
        restrictionsSouhaits: therapeuticData.restrictionsSouhaits || "",
        diagnosticOccupationnel: therapeuticData.diagnosticOccupationnel || "",
      },
    };

    console.log("📤 Sauvegarde des données thérapeutiques :", patientId, updatedMotif);

    try {
      await updateMotifIntervention(patientId, motif.id, updatedMotif);
      console.log("✅ Mise à jour réussie !");
      setEditing(false);
      updateMotif(updatedMotif); // Update the parent component's state
    } catch (error) {
      console.error("❌ Erreur lors de la mise à jour :", error);
    }
  };

  return (
    <div className="p-4 bg-white shadow-md rounded-lg">
      <h4 className="text-lg font-semibold mb-4">Perspective Thérapeutique</h4>

      <div className="mb-4 p-3 border border-gray-300 bg-gray-100 rounded-lg">
        <h5 className="text-md font-semibold text-gray-700">Batteries Code CIF</h5>
        <p className="text-gray-600">{therapeuticData.assesments || "Non défini"}</p>
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Synthèse de l'évaluation :</label>
        <QuillEditor
          value={therapeuticData.syntheseEvaluation}
          onChange={(value) => handleInputChange("syntheseEvaluation", value)}
          readOnly={!editing}
        />
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Restrictions de participation :</label>
        <QuillEditor
          value={therapeuticData.restrictionsSouhaits}
          onChange={(value) => handleInputChange("restrictionsSouhaits", value)}
          readOnly={!editing}
        />
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700">Diagnostic Occupationnel :</label>
        <QuillEditor
          value={therapeuticData.diagnosticOccupationnel}
          onChange={(value) => handleInputChange("diagnosticOccupationnel", value)}
          readOnly={!editing}
        />
      </div>

      <div className="flex space-x-2">
        {!editing ? (
          <button className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600" onClick={handleEdit}>
            Modifier
          </button>
        ) : (
          <>
            <button className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600" onClick={handleSave}>
              Enregistrer
            </button>
            <button className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600" onClick={handleCancel}>
              Annuler
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default PatientTherapeutic;
